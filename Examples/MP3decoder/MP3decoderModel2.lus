include "./toInclude_BitBlasting_ok.lus"

const maxValue = [1,1,1,1,0,0,0,0];

--**************** Const Rates ****************--

const huffman_p0_rate_out = [0,1,0,0,0,0,0,0];
const huffman_p1_rate_out = [0,1,0,0,0,0,0,0];
const huffman_p2_rate_in = [1,0,0,0,0,0,0,0];
const huffman_p3_rate_out = [1,0,0,0,0,0,0,0];
const huffman_p4_rate_in = [0,1,0,0,0,0,0,0];
const huffman_p5_rate_in = [0,1,0,0,0,0,0,0];
const req0_p0_rate_in = [1,0,0,0,0,0,0,0];
const req0_p1_rate_out = [1,0,0,0,0,0,0,0];
const req0_p2_rate_in = [1,0,0,0,0,0,0,0];
const req0_p3_rate_out = [1,0,0,0,0,0,0,0];
const reorder0_p0_rate_in = [1,0,0,0,0,0,0,0];
const reorder0_p1_rate_out = [1,0,0,0,0,0,0,0];
const req1_p0_rate_in = [1,0,0,0,0,0,0,0];
const req1_p1_rate_out = [1,0,0,0,0,0,0,0];
const req1_p2_rate_in = [1,0,0,0,0,0,0,0];
const req1_p3_rate_out = [1,0,0,0,0,0,0,0];
const reorder1_p0_rate_in = [1,0,0,0,0,0,0,0];
const reorder1_p1_rate_out = [1,0,0,0,0,0,0,0];
const stereo_p0_rate_in = [1,0,0,0,0,0,0,0];
const stereo_p1_rate_in = [1,0,0,0,0,0,0,0];
const stereo_p2_rate_out = [1,0,0,0,0,0,0,0];
const stereo_p3_rate_out = [1,0,0,0,0,0,0,0];
const antialias0_p0_rate_in = [1,0,0,0,0,0,0,0];
const antialias0_p1_rate_out = [1,0,0,0,0,0,0,0];
const hybridsynth0_p0_rate_in = [1,0,0,0,0,0,0,0];
const hybridsynth0_p1_rate_out = [1,0,0,0,0,0,0,0];
const freqinv0_p0_rate_in = [1,0,0,0,0,0,0,0];
const freqinv0_p1_rate_out = [1,0,0,0,0,0,0,0];
const subbinv0_p0_rate_in = [1,0,0,0,0,0,0,0];
const subbinv0_p1_rate_out = [1,0,0,0,0,0,0,0];
const antialias1_p0_rate_in = [1,0,0,0,0,0,0,0];
const antialias1_p1_rate_out = [1,0,0,0,0,0,0,0];
const hybridsynth1_p0_rate_in = [1,0,0,0,0,0,0,0];
const hybridsynth1_p1_rate_out = [1,0,0,0,0,0,0,0];
const freqinv1_p0_rate_in = [1,0,0,0,0,0,0,0];
const freqinv1_p1_rate_out = [1,0,0,0,0,0,0,0];
const subbinv1_p0_rate_in = [1,0,0,0,0,0,0,0];
const subbinv1_p1_rate_out = [1,0,0,0,0,0,0,0];

--**************** Init Channel ****************--

const ch0_I = [0,0,0,0,0,0,0,0];
const ch1_I = [0,0,0,0,0,0,0,0];
const ch2_I = [0,0,0,0,0,0,0,0];
const ch3_I = [0,0,0,0,0,0,0,0];
const ch4_I = [0,0,0,0,0,0,0,0];
const ch5_I = [0,0,0,0,0,0,0,0];
const ch6_I = [0,0,0,0,0,0,0,0];
const ch7_I = [0,0,0,0,0,0,0,0];
const ch8_I = [0,0,0,0,0,0,0,0];
const ch9_I = [0,0,0,0,0,0,0,0];
const ch10_I = [0,0,0,0,0,0,0,0];
const ch11_I = [0,0,0,0,0,0,0,0];
const ch12_I = [0,0,0,0,0,0,0,0];
const ch13_I = [0,0,0,0,0,0,0,0];
const ch14_I = [1,0,0,0,0,0,0,0];
const ch15_I = [1,0,0,0,0,0,0,0];
const ch16_I = [1,0,0,0,0,0,0,0];
const ch17_I = [0,1,0,0,0,0,0,0];
const ch18_I = [0,1,0,0,0,0,0,0];


--**************** Nodes Declaration ****************--

node huffman(p2, p4, p5 :UsrInt) returns (p0_P, p1_P, p2_C, p3_P, p4_C, p5_C :UsrInt; huffmannbrFired: UsrInt );

let
huffmannbrFired= if huffmanDoFire(p2, p4, p5,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p2_C, p4_C, p5_C,p0_P, p1_P, p3_P) = (UsrIntMult(huffmannbrFired, huffman_p2_rate_in),UsrIntMult(huffmannbrFired, huffman_p4_rate_in),UsrIntMult(huffmannbrFired, huffman_p5_rate_in),UsrIntMult(huffmannbrFired, huffman_p0_rate_out),UsrIntMult(huffmannbrFired, huffman_p1_rate_out),UsrIntMult(huffmannbrFired, huffman_p3_rate_out));

tel;
------------------
node huffmanDoFire(p2, p4, p5,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p2, UsrIntMult(times, huffman_p2_rate_in)) 
	and UsrIntGte(p4, UsrIntMult(times, huffman_p4_rate_in)) 
	and UsrIntGte(p5, UsrIntMult(times, huffman_p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node req0(p0, p2 :UsrInt) returns (p0_C, p1_P, p2_C, p3_P :UsrInt; req0nbrFired: UsrInt );

let
req0nbrFired= if req0DoFire(p0, p2,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C, p2_C,p1_P, p3_P) = (UsrIntMult(req0nbrFired, req0_p0_rate_in),UsrIntMult(req0nbrFired, req0_p2_rate_in),UsrIntMult(req0nbrFired, req0_p1_rate_out),UsrIntMult(req0nbrFired, req0_p3_rate_out));

tel;
------------------
node req0DoFire(p0, p2,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, req0_p0_rate_in)) 
	and UsrIntGte(p2, UsrIntMult(times, req0_p2_rate_in)) 
	then true 
	else false;

tel;
------------------
node reorder0(p0 :UsrInt) returns (p0_C, p1_P :UsrInt; reorder0nbrFired: UsrInt );

let
reorder0nbrFired= if reorder0DoFire(p0,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C,p1_P) = (UsrIntMult(reorder0nbrFired, reorder0_p0_rate_in),UsrIntMult(reorder0nbrFired, reorder0_p1_rate_out));

tel;
------------------
node reorder0DoFire(p0,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, reorder0_p0_rate_in)) 
	then true 
	else false;

tel;
------------------
node req1(p0, p2 :UsrInt) returns (p0_C, p1_P, p2_C, p3_P :UsrInt; req1nbrFired: UsrInt );

let
req1nbrFired= if req1DoFire(p0, p2,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C, p2_C,p1_P, p3_P) = (UsrIntMult(req1nbrFired, req1_p0_rate_in),UsrIntMult(req1nbrFired, req1_p2_rate_in),UsrIntMult(req1nbrFired, req1_p1_rate_out),UsrIntMult(req1nbrFired, req1_p3_rate_out));

tel;
------------------
node req1DoFire(p0, p2,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, req1_p0_rate_in)) 
	and UsrIntGte(p2, UsrIntMult(times, req1_p2_rate_in)) 
	then true 
	else false;

tel;
------------------
node reorder1(p0 :UsrInt) returns (p0_C, p1_P :UsrInt; reorder1nbrFired: UsrInt );

let
reorder1nbrFired= if reorder1DoFire(p0,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C,p1_P) = (UsrIntMult(reorder1nbrFired, reorder1_p0_rate_in),UsrIntMult(reorder1nbrFired, reorder1_p1_rate_out));

tel;
------------------
node reorder1DoFire(p0,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, reorder1_p0_rate_in)) 
	then true 
	else false;

tel;
------------------
node stereo(p0, p1 :UsrInt) returns (p0_C, p1_C, p2_P, p3_P :UsrInt; stereonbrFired: UsrInt );

let
stereonbrFired= if stereoDoFire(p0, p1,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C, p1_C,p2_P, p3_P) = (UsrIntMult(stereonbrFired, stereo_p0_rate_in),UsrIntMult(stereonbrFired, stereo_p1_rate_in),UsrIntMult(stereonbrFired, stereo_p2_rate_out),UsrIntMult(stereonbrFired, stereo_p3_rate_out));

tel;
------------------
node stereoDoFire(p0, p1,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, stereo_p0_rate_in)) 
	and UsrIntGte(p1, UsrIntMult(times, stereo_p1_rate_in)) 
	then true 
	else false;

tel;
------------------
node antialias0(p0 :UsrInt) returns (p0_C, p1_P :UsrInt; antialias0nbrFired: UsrInt );

let
antialias0nbrFired= if antialias0DoFire(p0,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C,p1_P) = (UsrIntMult(antialias0nbrFired, antialias0_p0_rate_in),UsrIntMult(antialias0nbrFired, antialias0_p1_rate_out));

tel;
------------------
node antialias0DoFire(p0,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, antialias0_p0_rate_in)) 
	then true 
	else false;

tel;
------------------
node hybridsynth0(p0 :UsrInt) returns (p0_C, p1_P :UsrInt; hybridsynth0nbrFired: UsrInt );

let
hybridsynth0nbrFired= if hybridsynth0DoFire(p0,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C,p1_P) = (UsrIntMult(hybridsynth0nbrFired, hybridsynth0_p0_rate_in),UsrIntMult(hybridsynth0nbrFired, hybridsynth0_p1_rate_out));

tel;
------------------
node hybridsynth0DoFire(p0,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, hybridsynth0_p0_rate_in)) 
	then true 
	else false;

tel;
------------------
node freqinv0(p0 :UsrInt) returns (p0_C, p1_P :UsrInt; freqinv0nbrFired: UsrInt );

let
freqinv0nbrFired= if freqinv0DoFire(p0,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C,p1_P) = (UsrIntMult(freqinv0nbrFired, freqinv0_p0_rate_in),UsrIntMult(freqinv0nbrFired, freqinv0_p1_rate_out));

tel;
------------------
node freqinv0DoFire(p0,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, freqinv0_p0_rate_in)) 
	then true 
	else false;

tel;
------------------
node subbinv0(p0 :UsrInt) returns (p0_C, p1_P :UsrInt; subbinv0nbrFired: UsrInt );

let
subbinv0nbrFired= if subbinv0DoFire(p0,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C,p1_P) = (UsrIntMult(subbinv0nbrFired, subbinv0_p0_rate_in),UsrIntMult(subbinv0nbrFired, subbinv0_p1_rate_out));

tel;
------------------
node subbinv0DoFire(p0,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, subbinv0_p0_rate_in)) 
	then true 
	else false;

tel;
------------------
node antialias1(p0 :UsrInt) returns (p0_C, p1_P :UsrInt; antialias1nbrFired: UsrInt );

let
antialias1nbrFired= if antialias1DoFire(p0,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C,p1_P) = (UsrIntMult(antialias1nbrFired, antialias1_p0_rate_in),UsrIntMult(antialias1nbrFired, antialias1_p1_rate_out));

tel;
------------------
node antialias1DoFire(p0,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, antialias1_p0_rate_in)) 
	then true 
	else false;

tel;
------------------
node hybridsynth1(p0 :UsrInt) returns (p0_C, p1_P :UsrInt; hybridsynth1nbrFired: UsrInt );

let
hybridsynth1nbrFired= if hybridsynth1DoFire(p0,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C,p1_P) = (UsrIntMult(hybridsynth1nbrFired, hybridsynth1_p0_rate_in),UsrIntMult(hybridsynth1nbrFired, hybridsynth1_p1_rate_out));

tel;
------------------
node hybridsynth1DoFire(p0,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, hybridsynth1_p0_rate_in)) 
	then true 
	else false;

tel;
------------------
node freqinv1(p0 :UsrInt) returns (p0_C, p1_P :UsrInt; freqinv1nbrFired: UsrInt );

let
freqinv1nbrFired= if freqinv1DoFire(p0,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C,p1_P) = (UsrIntMult(freqinv1nbrFired, freqinv1_p0_rate_in),UsrIntMult(freqinv1nbrFired, freqinv1_p1_rate_out));

tel;
------------------
node freqinv1DoFire(p0,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, freqinv1_p0_rate_in)) 
	then true 
	else false;

tel;
------------------
node subbinv1(p0 :UsrInt) returns (p0_C, p1_P :UsrInt; subbinv1nbrFired: UsrInt );

let
subbinv1nbrFired= if subbinv1DoFire(p0,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p0_C,p1_P) = (UsrIntMult(subbinv1nbrFired, subbinv1_p0_rate_in),UsrIntMult(subbinv1nbrFired, subbinv1_p1_rate_out));

tel;
------------------
node subbinv1DoFire(p0,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p0, UsrIntMult(times, subbinv1_p0_rate_in)) 
	then true 
	else false;

tel;
------------------

--**************** Node Top Declaration ****************--

node top (: UsrInt) returns (ch0, ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8, ch9, ch10, ch11, ch12, ch13, ch14, ch15, ch16, ch17, ch18, huffmannbrFired, req0nbrFired, reorder0nbrFired, req1nbrFired, reorder1nbrFired, stereonbrFired, antialias0nbrFired, hybridsynth0nbrFired, freqinv0nbrFired, subbinv0nbrFired, antialias1nbrFired, hybridsynth1nbrFired, freqinv1nbrFired, subbinv1nbrFired:UsrInt);

-------------- Les variables -------------- 

var

ch0_C, ch0_P: UsrInt; 
ch1_C, ch1_P: UsrInt; 
ch2_C, ch2_P: UsrInt; 
ch3_C, ch3_P: UsrInt; 
ch4_C, ch4_P: UsrInt; 
ch5_C, ch5_P: UsrInt; 
ch6_C, ch6_P: UsrInt; 
ch7_C, ch7_P: UsrInt; 
ch8_C, ch8_P: UsrInt; 
ch9_C, ch9_P: UsrInt; 
ch10_C, ch10_P: UsrInt; 
ch11_C, ch11_P: UsrInt; 
ch12_C, ch12_P: UsrInt; 
ch13_C, ch13_P: UsrInt; 
ch14_C, ch14_P: UsrInt; 
ch15_C, ch15_P: UsrInt; 
ch16_C, ch16_P: UsrInt; 
ch17_C, ch17_P: UsrInt; 
ch18_C, ch18_P: UsrInt; 

let

ch0 = ch0_I -> pre UsrIntPlus( UsrIntMinus( ch0,ch0_C), ch0_P);
ch1 = ch1_I -> pre UsrIntPlus( UsrIntMinus( ch1,ch1_C), ch1_P);
ch2 = ch2_I -> pre UsrIntPlus( UsrIntMinus( ch2,ch2_C), ch2_P);
ch3 = ch3_I -> pre UsrIntPlus( UsrIntMinus( ch3,ch3_C), ch3_P);
ch4 = ch4_I -> pre UsrIntPlus( UsrIntMinus( ch4,ch4_C), ch4_P);
ch5 = ch5_I -> pre UsrIntPlus( UsrIntMinus( ch5,ch5_C), ch5_P);
ch6 = ch6_I -> pre UsrIntPlus( UsrIntMinus( ch6,ch6_C), ch6_P);
ch7 = ch7_I -> pre UsrIntPlus( UsrIntMinus( ch7,ch7_C), ch7_P);
ch8 = ch8_I -> pre UsrIntPlus( UsrIntMinus( ch8,ch8_C), ch8_P);
ch9 = ch9_I -> pre UsrIntPlus( UsrIntMinus( ch9,ch9_C), ch9_P);
ch10 = ch10_I -> pre UsrIntPlus( UsrIntMinus( ch10,ch10_C), ch10_P);
ch11 = ch11_I -> pre UsrIntPlus( UsrIntMinus( ch11,ch11_C), ch11_P);
ch12 = ch12_I -> pre UsrIntPlus( UsrIntMinus( ch12,ch12_C), ch12_P);
ch13 = ch13_I -> pre UsrIntPlus( UsrIntMinus( ch13,ch13_C), ch13_P);
ch14 = ch14_I -> pre UsrIntPlus( UsrIntMinus( ch14,ch14_C), ch14_P);
ch15 = ch15_I -> pre UsrIntPlus( UsrIntMinus( ch15,ch15_C), ch15_P);
ch16 = ch16_I -> pre UsrIntPlus( UsrIntMinus( ch16,ch16_C), ch16_P);
ch17 = ch17_I -> pre UsrIntPlus( UsrIntMinus( ch17,ch17_C), ch17_P);
ch18 = ch18_I -> pre UsrIntPlus( UsrIntMinus( ch18,ch18_C), ch18_P);



(ch0_P, ch1_P, ch14_C, ch14_P, ch17_C, ch18_C, huffmannbrFired) = huffman(ch14, ch17, ch18);
(ch0_C, ch2_P, ch15_C, ch15_P, req0nbrFired) = req0(ch0, ch15);
(ch2_C, ch4_P, reorder0nbrFired) = reorder0(ch2);
(ch1_C, ch3_P, ch16_C, ch16_P, req1nbrFired) = req1(ch1, ch16);
(ch3_C, ch5_P, reorder1nbrFired) = reorder1(ch3);
(ch4_C, ch5_C, ch6_P, ch7_P, stereonbrFired) = stereo(ch4, ch5);
(ch6_C, ch8_P, antialias0nbrFired) = antialias0(ch6);
(ch8_C, ch10_P, hybridsynth0nbrFired) = hybridsynth0(ch8);
(ch10_C, ch12_P, freqinv0nbrFired) = freqinv0(ch10);
(ch12_C, ch17_P, subbinv0nbrFired) = subbinv0(ch12);
(ch7_C, ch9_P, antialias1nbrFired) = antialias1(ch7);
(ch9_C, ch11_P, hybridsynth1nbrFired) = hybridsynth1(ch9);
(ch11_C, ch13_P, freqinv1nbrFired) = freqinv1(ch11);
(ch13_C, ch18_P, subbinv1nbrFired) = subbinv1(ch13);


tel;


--**************** Node Harness Declaration ****************--

node Harness (: UsrInt) returns (noError :bool)

var

ch0, ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8, ch9, ch10, ch11, ch12, ch13, ch14, ch15, ch16, ch17, ch18, huffmannbrFired, req0nbrFired, reorder0nbrFired, req1nbrFired, reorder1nbrFired, stereonbrFired, antialias0nbrFired, hybridsynth0nbrFired, freqinv0nbrFired, subbinv0nbrFired, antialias1nbrFired, hybridsynth1nbrFired, freqinv1nbrFired, subbinv1nbrFired:UsrInt;

positiveValues: bool;

let

(ch0, ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8, ch9, ch10, ch11, ch12, ch13, ch14, ch15, ch16, ch17, ch18, huffmannbrFired, req0nbrFired, reorder0nbrFired, req1nbrFired, reorder1nbrFired, stereonbrFired, antialias0nbrFired, hybridsynth0nbrFired, freqinv0nbrFired, subbinv0nbrFired, antialias1nbrFired, hybridsynth1nbrFired, freqinv1nbrFired, subbinv1nbrFired) = top();

positiveValues = UsrIntGte( ch0, UsrInt_0) 
	and UsrIntGte( ch1, UsrInt_0) 
	and UsrIntGte( ch2, UsrInt_0) 
	and UsrIntGte( ch3, UsrInt_0) 
	and UsrIntGte( ch4, UsrInt_0) 
	and UsrIntGte( ch5, UsrInt_0) 
	and UsrIntGte( ch6, UsrInt_0) 
	and UsrIntGte( ch7, UsrInt_0) 
	and UsrIntGte( ch8, UsrInt_0) 
	and UsrIntGte( ch9, UsrInt_0) 
	and UsrIntGte( ch10, UsrInt_0) 
	and UsrIntGte( ch11, UsrInt_0) 
	and UsrIntGte( ch12, UsrInt_0) 
	and UsrIntGte( ch13, UsrInt_0) 
	and UsrIntGte( ch14, UsrInt_0) 
	and UsrIntGte( ch15, UsrInt_0) 
	and UsrIntGte( ch16, UsrInt_0) 
	and UsrIntGte( ch17, UsrInt_0) 
	and UsrIntGte( ch18, UsrInt_0) 
	and UsrIntGte( huffmannbrFired , UsrInt_0) 
	and UsrIntGte( req0nbrFired , UsrInt_0) 
	and UsrIntGte( reorder0nbrFired , UsrInt_0) 
	and UsrIntGte( req1nbrFired , UsrInt_0) 
	and UsrIntGte( reorder1nbrFired , UsrInt_0) 
	and UsrIntGte( stereonbrFired , UsrInt_0) 
	and UsrIntGte( antialias0nbrFired , UsrInt_0) 
	and UsrIntGte( hybridsynth0nbrFired , UsrInt_0) 
	and UsrIntGte( freqinv0nbrFired , UsrInt_0) 
	and UsrIntGte( subbinv0nbrFired , UsrInt_0) 
	and UsrIntGte( antialias1nbrFired , UsrInt_0) 
	and UsrIntGte( hybridsynth1nbrFired , UsrInt_0) 
	and UsrIntGte( freqinv1nbrFired , UsrInt_0) 
	and UsrIntGte( subbinv1nbrFired , UsrInt_0) ;

noError= positiveValues and true;

tel
