--** This lustre code is generated automatically on 13 sept. 2020 01:01:12 PM
--**It corresponds to a translation to Lustre of the  SDFG model  of the design "satellite" 



--**************** Const Rates ****************--

const a_p1_rate_out = 1;
const a__p2_rate_out = 1;
const a__p3_rate_in = 1;
const b_p1_rate_in = 4;
const b_p2_rate_out = 1;
const b__p3_rate_out = 1;
const b__p4_rate_in = 1;
const c_p1_rate_in = 11;
const c_p2_rate_out = 1;
const c_p3_rate_out = 10;
const c__p4_rate_out = 1;
const c__p5_rate_in = 1;
const d_p1_rate_out = 1;
const d__p2_rate_out = 1;
const d__p3_rate_in = 1;
const e_p1_rate_in = 4;
const e_p2_rate_out = 1;
const e__p3_rate_out = 1;
const e__p4_rate_in = 1;
const f_p1_rate_in = 11;
const f_p2_rate_out = 1;
const f_p3_rate_out = 10;
const f__p4_rate_out = 1;
const f__p5_rate_in = 1;
const g_p1_rate_in = 1;
const g_p2_rate_out = 1;
const g__p3_rate_out = 1;
const g__p4_rate_in = 1;
const h_p1_rate_in = 1;
const h_p2_rate_out = 11;
const h__p3_rate_out = 1;
const h__p4_rate_in = 1;
const i_p1_rate_in = 11;
const i_p2_rate_out = 10;
const i__p3_rate_out = 1;
const i__p4_rate_in = 1;
const j_p1_rate_in = 1;
const j_p2_rate_out = 1;
const j_p3_rate_out = 1;
const j__p4_rate_out = 1;
const j__p5_rate_in = 1;
const k_p1_rate_in = 1;
const k_p2_rate_out = 1;
const k__p3_rate_out = 1;
const k__p4_rate_in = 1;
const l_p1_rate_in = 1;
const l_p2_rate_out = 11;
const l__p3_rate_out = 1;
const l__p4_rate_in = 1;
const m_p1_rate_in = 11;
const m_p2_rate_out = 10;
const m__p3_rate_out = 1;
const m__p4_rate_in = 1;
const n_p1_rate_in = 1;
const n_p2_rate_out = 1;
const n_p3_rate_out = 1;
const n__p4_rate_out = 1;
const n__p5_rate_in = 1;
const p_p1_rate_in = 1;
const p_p2_rate_in = 1;
const p_p3_rate_in = 1;
const p_p4_rate_in = 1;
const p_p5_rate_out = 1;
const p_p6_rate_out = 1;
const p__p7_rate_out = 1;
const p__p8_rate_in = 1;
const q_p1_rate_in = 240;
const q_p2_rate_out = 240;
const q__p3_rate_out = 1;
const q__p4_rate_in = 1;
const r_p1_rate_in = 240;
const r_p2_rate_out = 240;
const r__p3_rate_out = 1;
const r__p4_rate_in = 1;
const s_p1_rate_in = 1;
const s_p2_rate_out = 1;
const s__p3_rate_out = 1;
const s__p4_rate_in = 1;
const t_p1_rate_in = 1;
const t_p2_rate_out = 1;
const t__p3_rate_out = 1;
const t__p4_rate_in = 1;
const u_p1_rate_in = 1;
const u_p2_rate_in = 1;
const u_p3_rate_out = 1;
const u__p4_rate_out = 1;
const u__p5_rate_in = 1;
const v_p1_rate_in = 240;
const v_p2_rate_out = 240;
const v__p3_rate_out = 1;
const v__p4_rate_in = 1;
const w_p1_rate_in = 1;
const w_p2_rate_in = 1;
const w_p3_rate_in = 1;
const w__p4_rate_out = 1;
const w__p5_rate_in = 1;

--**************** Init Channel ****************--

const ch1_I = 0 ;
const ch2_I = 0 ;
const ch3_I = 0 ;
const ch4_I = 0 ;
const ch5_I = 0 ;
const ch6_I = 0 ;
const ch7_I = 0 ;
const ch8_I = 0 ;
const ch9_I = 0 ;
const ch10_I = 0 ;
const ch11_I = 0 ;
const ch12_I = 0 ;
const ch13_I = 0 ;
const ch14_I = 0 ;
const ch15_I = 0 ;
const ch16_I = 0 ;
const ch17_I = 0 ;
const ch18_I = 0 ;
const ch19_I = 0 ;
const ch20_I = 0 ;
const ch21_I = 0 ;
const ch22_I = 0 ;
const ch23_I = 0 ;
const ch24_I = 0 ;
const ch25_I = 0 ;
const ch26_I = 0 ;
const _ch27_I = 1 ;
const _ch28_I = 1 ;
const _ch29_I = 1 ;
const _ch30_I = 1 ;
const _ch31_I = 1 ;
const _ch32_I = 1 ;
const _ch33_I = 1 ;
const _ch34_I = 1 ;
const _ch35_I = 1 ;
const _ch36_I = 1 ;
const _ch37_I = 1 ;
const _ch38_I = 1 ;
const _ch39_I = 1 ;
const _ch40_I = 1 ;
const _ch41_I = 1 ;
const _ch42_I = 1 ;
const _ch43_I = 1 ;
const _ch44_I = 1 ;
const _ch45_I = 1 ;
const _ch46_I = 1 ;
const _ch47_I = 1 ;
const _ch48_I = 1 ;


--**************** Actors Translation ****************--

node a(_p3 :int) returns (p1_P, _p2_P, _p3_C :int; anbrFired, anbrEnd : int );

let
anbrFired= if aDoFire(_p3,2) then 2
		else if aDoFire(_p3,1) then 1
		else 0;

anbrEnd= 0 -> pre (anbrFired);



(_p3_C) = ((anbrFired * a__p3_rate_in));

(p1_P, _p2_P) = ((anbrEnd * a_p1_rate_out), (anbrEnd * a__p2_rate_out));

tel;
------------------
node aDoFire(_p3 :int; times: int) returns ( yes: bool);
let

yes = if  (_p3>=  (times * a__p3_rate_in)) 
	then true 
	else false;

tel;
------------------
node b(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; bnbrFired, bnbrEnd : int );

let
bnbrFired= if bDoFire(p1, _p4,2) then 2
		else if bDoFire(p1, _p4,1) then 1
		else 0;

bnbrEnd= 0 -> pre (bnbrFired);



(p1_C, _p4_C) = ((bnbrFired * b_p1_rate_in), (bnbrFired * b__p4_rate_in));

(p2_P, _p3_P) = ((bnbrEnd * b_p2_rate_out), (bnbrEnd * b__p3_rate_out));

tel;
------------------
node bDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * b_p1_rate_in)) 
	and  (_p4>=  (times * b__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node c(p1, _p5 :int) returns (p1_C, p2_P, p3_P, _p4_P, _p5_C :int; cnbrFired, cnbrEnd : int );

let
cnbrFired= if cDoFire(p1, _p5,2) then 2
		else if cDoFire(p1, _p5,1) then 1
		else 0;

cnbrEnd= 0 -> pre (cnbrFired);



(p1_C, _p5_C) = ((cnbrFired * c_p1_rate_in), (cnbrFired * c__p5_rate_in));

(p2_P, p3_P, _p4_P) = ((cnbrEnd * c_p2_rate_out), (cnbrEnd * c_p3_rate_out), (cnbrEnd * c__p4_rate_out));

tel;
------------------
node cDoFire(p1, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * c_p1_rate_in)) 
	and  (_p5>=  (times * c__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node d(_p3 :int) returns (p1_P, _p2_P, _p3_C :int; dnbrFired, dnbrEnd : int );

let
dnbrFired= if dDoFire(_p3,2) then 2
		else if dDoFire(_p3,1) then 1
		else 0;

dnbrEnd= 0 -> pre (dnbrFired);



(_p3_C) = ((dnbrFired * d__p3_rate_in));

(p1_P, _p2_P) = ((dnbrEnd * d_p1_rate_out), (dnbrEnd * d__p2_rate_out));

tel;
------------------
node dDoFire(_p3 :int; times: int) returns ( yes: bool);
let

yes = if  (_p3>=  (times * d__p3_rate_in)) 
	then true 
	else false;

tel;
------------------
node e(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; enbrFired, enbrEnd : int );

let
enbrFired= if eDoFire(p1, _p4,2) then 2
		else if eDoFire(p1, _p4,1) then 1
		else 0;

enbrEnd= 0 -> pre (enbrFired);



(p1_C, _p4_C) = ((enbrFired * e_p1_rate_in), (enbrFired * e__p4_rate_in));

(p2_P, _p3_P) = ((enbrEnd * e_p2_rate_out), (enbrEnd * e__p3_rate_out));

tel;
------------------
node eDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * e_p1_rate_in)) 
	and  (_p4>=  (times * e__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node f(p1, _p5 :int) returns (p1_C, p2_P, p3_P, _p4_P, _p5_C :int; fnbrFired, fnbrEnd : int );

let
fnbrFired= if fDoFire(p1, _p5,2) then 2
		else if fDoFire(p1, _p5,1) then 1
		else 0;

fnbrEnd= 0 -> pre (fnbrFired);



(p1_C, _p5_C) = ((fnbrFired * f_p1_rate_in), (fnbrFired * f__p5_rate_in));

(p2_P, p3_P, _p4_P) = ((fnbrEnd * f_p2_rate_out), (fnbrEnd * f_p3_rate_out), (fnbrEnd * f__p4_rate_out));

tel;
------------------
node fDoFire(p1, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * f_p1_rate_in)) 
	and  (_p5>=  (times * f__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node g(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; gnbrFired, gnbrEnd : int );

let
gnbrFired= if gDoFire(p1, _p4,2) then 2
		else if gDoFire(p1, _p4,1) then 1
		else 0;

gnbrEnd= 0 -> pre (gnbrFired);



(p1_C, _p4_C) = ((gnbrFired * g_p1_rate_in), (gnbrFired * g__p4_rate_in));

(p2_P, _p3_P) = ((gnbrEnd * g_p2_rate_out), (gnbrEnd * g__p3_rate_out));

tel;
------------------
node gDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * g_p1_rate_in)) 
	and  (_p4>=  (times * g__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node h(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; hnbrFired, hnbrEnd : int );

let
hnbrFired= if hDoFire(p1, _p4,2) then 2
		else if hDoFire(p1, _p4,1) then 1
		else 0;

hnbrEnd= 0 -> pre (hnbrFired);



(p1_C, _p4_C) = ((hnbrFired * h_p1_rate_in), (hnbrFired * h__p4_rate_in));

(p2_P, _p3_P) = ((hnbrEnd * h_p2_rate_out), (hnbrEnd * h__p3_rate_out));

tel;
------------------
node hDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * h_p1_rate_in)) 
	and  (_p4>=  (times * h__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node i(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; inbrFired, inbrEnd : int );

let
inbrFired= if iDoFire(p1, _p4,2) then 2
		else if iDoFire(p1, _p4,1) then 1
		else 0;

inbrEnd= 0 -> pre (inbrFired);



(p1_C, _p4_C) = ((inbrFired * i_p1_rate_in), (inbrFired * i__p4_rate_in));

(p2_P, _p3_P) = ((inbrEnd * i_p2_rate_out), (inbrEnd * i__p3_rate_out));

tel;
------------------
node iDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * i_p1_rate_in)) 
	and  (_p4>=  (times * i__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node j(p1, _p5 :int) returns (p1_C, p2_P, p3_P, _p4_P, _p5_C :int; jnbrFired, jnbrEnd : int );

let
jnbrFired= if jDoFire(p1, _p5,2) then 2
		else if jDoFire(p1, _p5,1) then 1
		else 0;

jnbrEnd= 0 -> pre (jnbrFired);



(p1_C, _p5_C) = ((jnbrFired * j_p1_rate_in), (jnbrFired * j__p5_rate_in));

(p2_P, p3_P, _p4_P) = ((jnbrEnd * j_p2_rate_out), (jnbrEnd * j_p3_rate_out), (jnbrEnd * j__p4_rate_out));

tel;
------------------
node jDoFire(p1, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * j_p1_rate_in)) 
	and  (_p5>=  (times * j__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node k(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; knbrFired, knbrEnd : int );

let
knbrFired= if kDoFire(p1, _p4,2) then 2
		else if kDoFire(p1, _p4,1) then 1
		else 0;

knbrEnd= 0 -> pre (knbrFired);



(p1_C, _p4_C) = ((knbrFired * k_p1_rate_in), (knbrFired * k__p4_rate_in));

(p2_P, _p3_P) = ((knbrEnd * k_p2_rate_out), (knbrEnd * k__p3_rate_out));

tel;
------------------
node kDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * k_p1_rate_in)) 
	and  (_p4>=  (times * k__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node l(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; lnbrFired, lnbrEnd : int );

let
lnbrFired= if lDoFire(p1, _p4,2) then 2
		else if lDoFire(p1, _p4,1) then 1
		else 0;

lnbrEnd= 0 -> pre (lnbrFired);



(p1_C, _p4_C) = ((lnbrFired * l_p1_rate_in), (lnbrFired * l__p4_rate_in));

(p2_P, _p3_P) = ((lnbrEnd * l_p2_rate_out), (lnbrEnd * l__p3_rate_out));

tel;
------------------
node lDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * l_p1_rate_in)) 
	and  (_p4>=  (times * l__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node m(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; mnbrFired, mnbrEnd : int );

let
mnbrFired= if mDoFire(p1, _p4,2) then 2
		else if mDoFire(p1, _p4,1) then 1
		else 0;

mnbrEnd= 0 -> pre (mnbrFired);



(p1_C, _p4_C) = ((mnbrFired * m_p1_rate_in), (mnbrFired * m__p4_rate_in));

(p2_P, _p3_P) = ((mnbrEnd * m_p2_rate_out), (mnbrEnd * m__p3_rate_out));

tel;
------------------
node mDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * m_p1_rate_in)) 
	and  (_p4>=  (times * m__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node n(p1, _p5 :int) returns (p1_C, p2_P, p3_P, _p4_P, _p5_C :int; nnbrFired, nnbrEnd : int );

let
nnbrFired= if nDoFire(p1, _p5,2) then 2
		else if nDoFire(p1, _p5,1) then 1
		else 0;

nnbrEnd= 0 -> pre (nnbrFired);



(p1_C, _p5_C) = ((nnbrFired * n_p1_rate_in), (nnbrFired * n__p5_rate_in));

(p2_P, p3_P, _p4_P) = ((nnbrEnd * n_p2_rate_out), (nnbrEnd * n_p3_rate_out), (nnbrEnd * n__p4_rate_out));

tel;
------------------
node nDoFire(p1, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * n_p1_rate_in)) 
	and  (_p5>=  (times * n__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node p(p1, p2, p3, p4, _p8 :int) returns (p1_C, p2_C, p3_C, p4_C, p5_P, p6_P, _p7_P, _p8_C :int; pnbrFired, pnbrEnd : int );

let
pnbrFired= if pDoFire(p1, p2, p3, p4, _p8,2) then 2
		else if pDoFire(p1, p2, p3, p4, _p8,1) then 1
		else 0;

pnbrEnd= 0 -> pre (pnbrFired);



(p1_C, p2_C, p3_C, p4_C, _p8_C) = ((pnbrFired * p_p1_rate_in), (pnbrFired * p_p2_rate_in), (pnbrFired * p_p3_rate_in), (pnbrFired * p_p4_rate_in), (pnbrFired * p__p8_rate_in));

(p5_P, p6_P, _p7_P) = ((pnbrEnd * p_p5_rate_out), (pnbrEnd * p_p6_rate_out), (pnbrEnd * p__p7_rate_out));

tel;
------------------
node pDoFire(p1, p2, p3, p4, _p8 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * p_p1_rate_in)) 
	and  (p2>=  (times * p_p2_rate_in)) 
	and  (p3>=  (times * p_p3_rate_in)) 
	and  (p4>=  (times * p_p4_rate_in)) 
	and  (_p8>=  (times * p__p8_rate_in)) 
	then true 
	else false;

tel;
------------------
node q(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; qnbrFired, qnbrEnd : int );

let
qnbrFired= if qDoFire(p1, _p4,2) then 2
		else if qDoFire(p1, _p4,1) then 1
		else 0;

qnbrEnd= 0 -> pre (qnbrFired);



(p1_C, _p4_C) = ((qnbrFired * q_p1_rate_in), (qnbrFired * q__p4_rate_in));

(p2_P, _p3_P) = ((qnbrEnd * q_p2_rate_out), (qnbrEnd * q__p3_rate_out));

tel;
------------------
node qDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * q_p1_rate_in)) 
	and  (_p4>=  (times * q__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node r(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; rnbrFired, rnbrEnd : int );

let
rnbrFired= if rDoFire(p1, _p4,2) then 2
		else if rDoFire(p1, _p4,1) then 1
		else 0;

rnbrEnd= 0 -> pre (rnbrFired);



(p1_C, _p4_C) = ((rnbrFired * r_p1_rate_in), (rnbrFired * r__p4_rate_in));

(p2_P, _p3_P) = ((rnbrEnd * r_p2_rate_out), (rnbrEnd * r__p3_rate_out));

tel;
------------------
node rDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * r_p1_rate_in)) 
	and  (_p4>=  (times * r__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node s(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; snbrFired, snbrEnd : int );

let
snbrFired= if sDoFire(p1, _p4,2) then 2
		else if sDoFire(p1, _p4,1) then 1
		else 0;

snbrEnd= 0 -> pre (snbrFired);



(p1_C, _p4_C) = ((snbrFired * s_p1_rate_in), (snbrFired * s__p4_rate_in));

(p2_P, _p3_P) = ((snbrEnd * s_p2_rate_out), (snbrEnd * s__p3_rate_out));

tel;
------------------
node sDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * s_p1_rate_in)) 
	and  (_p4>=  (times * s__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node t(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; tnbrFired, tnbrEnd : int );

let
tnbrFired= if tDoFire(p1, _p4,2) then 2
		else if tDoFire(p1, _p4,1) then 1
		else 0;

tnbrEnd= 0 -> pre (tnbrFired);



(p1_C, _p4_C) = ((tnbrFired * t_p1_rate_in), (tnbrFired * t__p4_rate_in));

(p2_P, _p3_P) = ((tnbrEnd * t_p2_rate_out), (tnbrEnd * t__p3_rate_out));

tel;
------------------
node tDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * t_p1_rate_in)) 
	and  (_p4>=  (times * t__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node u(p1, p2, _p5 :int) returns (p1_C, p2_C, p3_P, _p4_P, _p5_C :int; unbrFired, unbrEnd : int );

let
unbrFired= if uDoFire(p1, p2, _p5,2) then 2
		else if uDoFire(p1, p2, _p5,1) then 1
		else 0;

unbrEnd= 0 -> pre (unbrFired);



(p1_C, p2_C, _p5_C) = ((unbrFired * u_p1_rate_in), (unbrFired * u_p2_rate_in), (unbrFired * u__p5_rate_in));

(p3_P, _p4_P) = ((unbrEnd * u_p3_rate_out), (unbrEnd * u__p4_rate_out));

tel;
------------------
node uDoFire(p1, p2, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * u_p1_rate_in)) 
	and  (p2>=  (times * u_p2_rate_in)) 
	and  (_p5>=  (times * u__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node v(p1, _p4 :int) returns (p1_C, p2_P, _p3_P, _p4_C :int; vnbrFired, vnbrEnd : int );

let
vnbrFired= if vDoFire(p1, _p4,2) then 2
		else if vDoFire(p1, _p4,1) then 1
		else 0;

vnbrEnd= 0 -> pre (vnbrFired);



(p1_C, _p4_C) = ((vnbrFired * v_p1_rate_in), (vnbrFired * v__p4_rate_in));

(p2_P, _p3_P) = ((vnbrEnd * v_p2_rate_out), (vnbrEnd * v__p3_rate_out));

tel;
------------------
node vDoFire(p1, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * v_p1_rate_in)) 
	and  (_p4>=  (times * v__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node w(p1, p2, p3, _p5 :int) returns (p1_C, p2_C, p3_C, _p4_P, _p5_C :int; wnbrFired, wnbrEnd : int );

let
wnbrFired= if wDoFire(p1, p2, p3, _p5,2) then 2
		else if wDoFire(p1, p2, p3, _p5,1) then 1
		else 0;

wnbrEnd= 0 -> pre (wnbrFired);



(p1_C, p2_C, p3_C, _p5_C) = ((wnbrFired * w_p1_rate_in), (wnbrFired * w_p2_rate_in), (wnbrFired * w_p3_rate_in), (wnbrFired * w__p5_rate_in));

(_p4_P) = ((wnbrEnd * w__p4_rate_out));

tel;
------------------
node wDoFire(p1, p2, p3, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p1>=  (times * w_p1_rate_in)) 
	and  (p2>=  (times * w_p2_rate_in)) 
	and  (p3>=  (times * w_p3_rate_in)) 
	and  (_p5>=  (times * w__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node top (_: bool) returns (ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8, ch9, ch10, ch11, ch12, ch13, ch14, ch15, ch16, ch17, ch18, ch19, ch20, ch21, ch22, ch23, ch24, ch25, ch26, _ch27, _ch28, _ch29, _ch30, _ch31, _ch32, _ch33, _ch34, _ch35, _ch36, _ch37, _ch38, _ch39, _ch40, _ch41, _ch42, _ch43, _ch44, _ch45, _ch46, _ch47, _ch48, anbrFired, bnbrFired, cnbrFired, dnbrFired, enbrFired, fnbrFired, gnbrFired, hnbrFired, inbrFired, jnbrFired, knbrFired, lnbrFired, mnbrFired, nnbrFired, pnbrFired, qnbrFired, rnbrFired, snbrFired, tnbrFired, unbrFired, vnbrFired, wnbrFired: int);

-------------- Les variables -------------- 

var

ch1_C, ch1_P: int; 
ch2_C, ch2_P: int; 
ch3_C, ch3_P: int; 
ch4_C, ch4_P: int; 
ch5_C, ch5_P: int; 
ch6_C, ch6_P: int; 
ch7_C, ch7_P: int; 
ch8_C, ch8_P: int; 
ch9_C, ch9_P: int; 
ch10_C, ch10_P: int; 
ch11_C, ch11_P: int; 
ch12_C, ch12_P: int; 
ch13_C, ch13_P: int; 
ch14_C, ch14_P: int; 
ch15_C, ch15_P: int; 
ch16_C, ch16_P: int; 
ch17_C, ch17_P: int; 
ch18_C, ch18_P: int; 
ch19_C, ch19_P: int; 
ch20_C, ch20_P: int; 
ch21_C, ch21_P: int; 
ch22_C, ch22_P: int; 
ch23_C, ch23_P: int; 
ch24_C, ch24_P: int; 
ch25_C, ch25_P: int; 
ch26_C, ch26_P: int; 
_ch27_C, _ch27_P: int; 
_ch28_C, _ch28_P: int; 
_ch29_C, _ch29_P: int; 
_ch30_C, _ch30_P: int; 
_ch31_C, _ch31_P: int; 
_ch32_C, _ch32_P: int; 
_ch33_C, _ch33_P: int; 
_ch34_C, _ch34_P: int; 
_ch35_C, _ch35_P: int; 
_ch36_C, _ch36_P: int; 
_ch37_C, _ch37_P: int; 
_ch38_C, _ch38_P: int; 
_ch39_C, _ch39_P: int; 
_ch40_C, _ch40_P: int; 
_ch41_C, _ch41_P: int; 
_ch42_C, _ch42_P: int; 
_ch43_C, _ch43_P: int; 
_ch44_C, _ch44_P: int; 
_ch45_C, _ch45_P: int; 
_ch46_C, _ch46_P: int; 
_ch47_C, _ch47_P: int; 
_ch48_C, _ch48_P: int; 
anbrEnd, bnbrEnd, cnbrEnd, dnbrEnd, enbrEnd, fnbrEnd, gnbrEnd, hnbrEnd, inbrEnd, jnbrEnd, knbrEnd, lnbrEnd, mnbrEnd, nnbrEnd, pnbrEnd, qnbrEnd, rnbrEnd, snbrEnd, tnbrEnd, unbrEnd, vnbrEnd, wnbrEnd : int; 

anbrRun, bnbrRun, cnbrRun, dnbrRun, enbrRun, fnbrRun, gnbrRun, hnbrRun, inbrRun, jnbrRun, knbrRun, lnbrRun, mnbrRun, nnbrRun, pnbrRun, qnbrRun, rnbrRun, snbrRun, tnbrRun, unbrRun, vnbrRun, wnbrRun : int; 

positiveValues, noDeadlock: bool;


let

ch1 = ch1_I -> pre  (   ch1-ch1_C)+ ch1_P;
ch2 = ch2_I -> pre  (   ch2-ch2_C)+ ch2_P;
ch3 = ch3_I -> pre  (   ch3-ch3_C)+ ch3_P;
ch4 = ch4_I -> pre  (   ch4-ch4_C)+ ch4_P;
ch5 = ch5_I -> pre  (   ch5-ch5_C)+ ch5_P;
ch6 = ch6_I -> pre  (   ch6-ch6_C)+ ch6_P;
ch7 = ch7_I -> pre  (   ch7-ch7_C)+ ch7_P;
ch8 = ch8_I -> pre  (   ch8-ch8_C)+ ch8_P;
ch9 = ch9_I -> pre  (   ch9-ch9_C)+ ch9_P;
ch10 = ch10_I -> pre  (   ch10-ch10_C)+ ch10_P;
ch11 = ch11_I -> pre  (   ch11-ch11_C)+ ch11_P;
ch12 = ch12_I -> pre  (   ch12-ch12_C)+ ch12_P;
ch13 = ch13_I -> pre  (   ch13-ch13_C)+ ch13_P;
ch14 = ch14_I -> pre  (   ch14-ch14_C)+ ch14_P;
ch15 = ch15_I -> pre  (   ch15-ch15_C)+ ch15_P;
ch16 = ch16_I -> pre  (   ch16-ch16_C)+ ch16_P;
ch17 = ch17_I -> pre  (   ch17-ch17_C)+ ch17_P;
ch18 = ch18_I -> pre  (   ch18-ch18_C)+ ch18_P;
ch19 = ch19_I -> pre  (   ch19-ch19_C)+ ch19_P;
ch20 = ch20_I -> pre  (   ch20-ch20_C)+ ch20_P;
ch21 = ch21_I -> pre  (   ch21-ch21_C)+ ch21_P;
ch22 = ch22_I -> pre  (   ch22-ch22_C)+ ch22_P;
ch23 = ch23_I -> pre  (   ch23-ch23_C)+ ch23_P;
ch24 = ch24_I -> pre  (   ch24-ch24_C)+ ch24_P;
ch25 = ch25_I -> pre  (   ch25-ch25_C)+ ch25_P;
ch26 = ch26_I -> pre  (   ch26-ch26_C)+ ch26_P;
_ch27 = _ch27_I -> pre  (   _ch27-_ch27_C)+ _ch27_P;
_ch28 = _ch28_I -> pre  (   _ch28-_ch28_C)+ _ch28_P;
_ch29 = _ch29_I -> pre  (   _ch29-_ch29_C)+ _ch29_P;
_ch30 = _ch30_I -> pre  (   _ch30-_ch30_C)+ _ch30_P;
_ch31 = _ch31_I -> pre  (   _ch31-_ch31_C)+ _ch31_P;
_ch32 = _ch32_I -> pre  (   _ch32-_ch32_C)+ _ch32_P;
_ch33 = _ch33_I -> pre  (   _ch33-_ch33_C)+ _ch33_P;
_ch34 = _ch34_I -> pre  (   _ch34-_ch34_C)+ _ch34_P;
_ch35 = _ch35_I -> pre  (   _ch35-_ch35_C)+ _ch35_P;
_ch36 = _ch36_I -> pre  (   _ch36-_ch36_C)+ _ch36_P;
_ch37 = _ch37_I -> pre  (   _ch37-_ch37_C)+ _ch37_P;
_ch38 = _ch38_I -> pre  (   _ch38-_ch38_C)+ _ch38_P;
_ch39 = _ch39_I -> pre  (   _ch39-_ch39_C)+ _ch39_P;
_ch40 = _ch40_I -> pre  (   _ch40-_ch40_C)+ _ch40_P;
_ch41 = _ch41_I -> pre  (   _ch41-_ch41_C)+ _ch41_P;
_ch42 = _ch42_I -> pre  (   _ch42-_ch42_C)+ _ch42_P;
_ch43 = _ch43_I -> pre  (   _ch43-_ch43_C)+ _ch43_P;
_ch44 = _ch44_I -> pre  (   _ch44-_ch44_C)+ _ch44_P;
_ch45 = _ch45_I -> pre  (   _ch45-_ch45_C)+ _ch45_P;
_ch46 = _ch46_I -> pre  (   _ch46-_ch46_C)+ _ch46_P;
_ch47 = _ch47_I -> pre  (   _ch47-_ch47_C)+ _ch47_P;
_ch48 = _ch48_I -> pre  (   _ch48-_ch48_C)+ _ch48_P;



(ch1_P, _ch27_P, _ch27_C, anbrFired, anbrEnd ) = a(_ch27);
(ch1_C, ch2_P, _ch28_P, _ch28_C, bnbrFired, bnbrEnd ) = b(ch1, _ch28);
(ch2_C, ch3_P, ch4_P, _ch29_P, _ch29_C, cnbrFired, cnbrEnd ) = c(ch2, _ch29);
(ch5_P, _ch30_P, _ch30_C, dnbrFired, dnbrEnd ) = d(_ch30);
(ch5_C, ch6_P, _ch31_P, _ch31_C, enbrFired, enbrEnd ) = e(ch5, _ch31);
(ch6_C, ch7_P, ch8_P, _ch32_P, _ch32_C, fnbrFired, fnbrEnd ) = f(ch6, _ch32);
(ch3_C, ch9_P, _ch33_P, _ch33_C, gnbrFired, gnbrEnd ) = g(ch3, _ch33);
(ch9_C, ch10_P, _ch34_P, _ch34_C, hnbrFired, hnbrEnd ) = h(ch9, _ch34);
(ch10_C, ch11_P, _ch35_P, _ch35_C, inbrFired, inbrEnd ) = i(ch10, _ch35);
(ch11_C, ch22_P, ch23_P, _ch36_P, _ch36_C, jnbrFired, jnbrEnd ) = j(ch11, _ch36);
(ch7_C, ch12_P, _ch37_P, _ch37_C, knbrFired, knbrEnd ) = k(ch7, _ch37);
(ch12_C, ch13_P, _ch38_P, _ch38_C, lnbrFired, lnbrEnd ) = l(ch12, _ch38);
(ch13_C, ch14_P, _ch39_P, _ch39_C, mnbrFired, mnbrEnd ) = m(ch13, _ch39);
(ch14_C, ch19_P, ch20_P, _ch40_P, _ch40_C, nnbrFired, nnbrEnd ) = n(ch14, _ch40);
(ch8_C, ch4_C, ch19_C, ch22_C, ch15_P, ch16_P, _ch41_P, _ch41_C, pnbrFired, pnbrEnd ) = p(ch8, ch4, ch19, ch22, _ch41);
(ch15_C, ch17_P, _ch42_P, _ch42_C, qnbrFired, qnbrEnd ) = q(ch15, _ch42);
(ch16_C, ch18_P, _ch43_P, _ch43_C, rnbrFired, rnbrEnd ) = r(ch16, _ch43);
(ch20_C, ch21_P, _ch44_P, _ch44_C, snbrFired, snbrEnd ) = s(ch20, _ch44);
(ch23_C, ch24_P, _ch45_P, _ch45_C, tnbrFired, tnbrEnd ) = t(ch23, _ch45);
(ch21_C, ch24_C, ch25_P, _ch46_P, _ch46_C, unbrFired, unbrEnd ) = u(ch21, ch24, _ch46);
(ch25_C, ch26_P, _ch47_P, _ch47_C, vnbrFired, vnbrEnd ) = v(ch25, _ch47);
(ch17_C, ch18_C, ch26_C, _ch48_P, _ch48_C, wnbrFired, wnbrEnd ) = w(ch17, ch18, ch26, _ch48);

anbrRun=  anbrFired  -> (pre anbrRun) +anbrFired - anbrEnd ;

bnbrRun=  bnbrFired  -> (pre bnbrRun) +bnbrFired - bnbrEnd ;

cnbrRun=  cnbrFired  -> (pre cnbrRun) +cnbrFired - cnbrEnd ;

dnbrRun=  dnbrFired  -> (pre dnbrRun) +dnbrFired - dnbrEnd ;

enbrRun=  enbrFired  -> (pre enbrRun) +enbrFired - enbrEnd ;

fnbrRun=  fnbrFired  -> (pre fnbrRun) +fnbrFired - fnbrEnd ;

gnbrRun=  gnbrFired  -> (pre gnbrRun) +gnbrFired - gnbrEnd ;

hnbrRun=  hnbrFired  -> (pre hnbrRun) +hnbrFired - hnbrEnd ;

inbrRun=  inbrFired  -> (pre inbrRun) +inbrFired - inbrEnd ;

jnbrRun=  jnbrFired  -> (pre jnbrRun) +jnbrFired - jnbrEnd ;

knbrRun=  knbrFired  -> (pre knbrRun) +knbrFired - knbrEnd ;

lnbrRun=  lnbrFired  -> (pre lnbrRun) +lnbrFired - lnbrEnd ;

mnbrRun=  mnbrFired  -> (pre mnbrRun) +mnbrFired - mnbrEnd ;

nnbrRun=  nnbrFired  -> (pre nnbrRun) +nnbrFired - nnbrEnd ;

pnbrRun=  pnbrFired  -> (pre pnbrRun) +pnbrFired - pnbrEnd ;

qnbrRun=  qnbrFired  -> (pre qnbrRun) +qnbrFired - qnbrEnd ;

rnbrRun=  rnbrFired  -> (pre rnbrRun) +rnbrFired - rnbrEnd ;

snbrRun=  snbrFired  -> (pre snbrRun) +snbrFired - snbrEnd ;

tnbrRun=  tnbrFired  -> (pre tnbrRun) +tnbrFired - tnbrEnd ;

unbrRun=  unbrFired  -> (pre unbrRun) +unbrFired - unbrEnd ;

vnbrRun=  vnbrFired  -> (pre vnbrRun) +vnbrFired - vnbrEnd ;

wnbrRun=  wnbrFired  -> (pre wnbrRun) +wnbrFired - wnbrEnd ;


positiveValues = ( ch1>=   0) 
	and  ( ch2>=   0) 
	and  ( ch3>=   0) 
	and  ( ch4>=   0) 
	and  ( ch5>=   0) 
	and  ( ch6>=   0) 
	and  ( ch7>=   0) 
	and  ( ch8>=   0) 
	and  ( ch9>=   0) 
	and  ( ch10>=   0) 
	and  ( ch11>=   0) 
	and  ( ch12>=   0) 
	and  ( ch13>=   0) 
	and  ( ch14>=   0) 
	and  ( ch15>=   0) 
	and  ( ch16>=   0) 
	and  ( ch17>=   0) 
	and  ( ch18>=   0) 
	and  ( ch19>=   0) 
	and  ( ch20>=   0) 
	and  ( ch21>=   0) 
	and  ( ch22>=   0) 
	and  ( ch23>=   0) 
	and  ( ch24>=   0) 
	and  ( ch25>=   0) 
	and  ( ch26>=   0) 
	and  ( _ch27>=   0) 
	and  ( _ch28>=   0) 
	and  ( _ch29>=   0) 
	and  ( _ch30>=   0) 
	and  ( _ch31>=   0) 
	and  ( _ch32>=   0) 
	and  ( _ch33>=   0) 
	and  ( _ch34>=   0) 
	and  ( _ch35>=   0) 
	and  ( _ch36>=   0) 
	and  ( _ch37>=   0) 
	and  ( _ch38>=   0) 
	and  ( _ch39>=   0) 
	and  ( _ch40>=   0) 
	and  ( _ch41>=   0) 
	and  ( _ch42>=   0) 
	and  ( _ch43>=   0) 
	and  ( _ch44>=   0) 
	and  ( _ch45>=   0) 
	and  ( _ch46>=   0) 
	and  ( _ch47>=   0) 
	and  ( _ch48>=   0) 
	and  ( anbrFired >= 0) 
	and  ( bnbrFired >= 0) 
	and  ( cnbrFired >= 0) 
	and  ( dnbrFired >= 0) 
	and  ( enbrFired >= 0) 
	and  ( fnbrFired >= 0) 
	and  ( gnbrFired >= 0) 
	and  ( hnbrFired >= 0) 
	and  ( inbrFired >= 0) 
	and  ( jnbrFired >= 0) 
	and  ( knbrFired >= 0) 
	and  ( lnbrFired >= 0) 
	and  ( mnbrFired >= 0) 
	and  ( nnbrFired >= 0) 
	and  ( pnbrFired >= 0) 
	and  ( qnbrFired >= 0) 
	and  ( rnbrFired >= 0) 
	and  ( snbrFired >= 0) 
	and  ( tnbrFired >= 0) 
	and  ( unbrFired >= 0) 
	and  ( vnbrFired >= 0) 
	and  ( wnbrFired >= 0) ;

noDeadlock = ( anbrRun >= 1) 
	or  ( bnbrRun >= 1) 
	or  ( cnbrRun >= 1) 
	or  ( dnbrRun >= 1) 
	or  ( enbrRun >= 1) 
	or  ( fnbrRun >= 1) 
	or  ( gnbrRun >= 1) 
	or  ( hnbrRun >= 1) 
	or  ( inbrRun >= 1) 
	or  ( jnbrRun >= 1) 
	or  ( knbrRun >= 1) 
	or  ( lnbrRun >= 1) 
	or  ( mnbrRun >= 1) 
	or  ( nnbrRun >= 1) 
	or  ( pnbrRun >= 1) 
	or  ( qnbrRun >= 1) 
	or  ( rnbrRun >= 1) 
	or  ( snbrRun >= 1) 
	or  ( tnbrRun >= 1) 
	or  ( unbrRun >= 1) 
	or  ( vnbrRun >= 1) 
	or  ( wnbrRun >= 1);

--%MAIN;

---%PROPERTY  "Ok, all variables are positive "  positiveValues;


---%PROPERTY  "Deadlock free "  noDeadlock;
--%PROPERTY  "processor  "  (anbrRun + bnbrRun +cnbrRun +dnbrRun +enbrRun +fnbrRun +gnbrRun +hnbrRun +inbrRun +jnbrRun +knbrRun +lnbrRun + mnbrRun +nnbrRun +pnbrRun +qnbrRun +rnbrRun +snbrRun +tnbrRun + unbrRun +vnbrRun +wnbrRun )<=23;


tel;

