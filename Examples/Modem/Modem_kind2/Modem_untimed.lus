--** This lustre code is generated automatically on 18 nov. 2020 12:01:07 AM
--**It corresponds to a translation to Lustre of the Untimed SDFG model  of the design "modem" 




--**************** Const Rates ****************--

const fork1_p_in_rate_in = 1 ;
const fork1_p_out1_rate_out = 1 ;
const fork1_p_out2_rate_out = 1 ;
const fork1__p4_rate_out = 1 ;
const fork1__p5_rate_in = 1 ;
const biq_p_in_rate_in = 1 ;
const biq_p_out_rate_out = 1 ;
const biq__p3_rate_out = 1 ;
const biq__p4_rate_in = 1 ;
const bi_p_in_rate_in = 1 ;
const bi_p_out_rate_out = 1 ;
const bi__p3_rate_out = 1 ;
const bi__p4_rate_in = 1 ;
const add_p_in1_rate_in = 1 ;
const add_p_in2_rate_in = 1 ;
const add_p_out_rate_out = 1 ;
const add__p4_rate_out = 1 ;
const add__p5_rate_in = 1 ;
const ac_p_in_rate_in = 1 ;
const ac_p_out_rate_out = 2 ;
const ac__p3_rate_out = 1 ;
const ac__p4_rate_in = 1 ;
const fork2_p_in_rate_in = 1 ;
const fork2_p_out1_rate_out = 1 ;
const fork2_p_out2_rate_out = 1 ;
const fork2__p4_rate_out = 1 ;
const fork2__p5_rate_in = 1 ;
const conj_p_in_rate_in = 2 ;
const conj_p_out_rate_out = 2 ;
const conj__p3_rate_out = 1 ;
const conj__p4_rate_in = 1 ;
const mul1_p_in1_rate_in = 2 ;
const mul1_p_in2_rate_in = 2 ;
const mul1_p_out_rate_out = 2 ;
const mul1__p4_rate_out = 1 ;
const mul1__p5_rate_in = 1 ;
const in_p_out_rate_out = 1 ;
const in__p2_rate_out = 1 ;
const in__p3_rate_in = 1 ;
const filt_p_in_rate_in = 1 ;
const filt_p_out_rate_out = 1 ;
const filt__p3_rate_out = 1 ;
const filt__p4_rate_in = 1 ;
const hil_p_in_rate_in = 8 ;
const hil_p_out_rate_out = 2 ;
const hil__p3_rate_out = 1 ;
const hil__p4_rate_in = 1 ;
const eq_p_in1_rate_in = 4 ;
const eq_p_in2_rate_in = 2 ;
const eq_p_out_rate_out = 2 ;
const eq__p4_rate_out = 1 ;
const eq__p5_rate_in = 1 ;
const mul2_p_in1_rate_in = 2 ;
const mul2_p_in2_rate_in = 2 ;
const mul2_p_out_rate_out = 2 ;
const mul2__p4_rate_out = 1 ;
const mul2__p5_rate_in = 1 ;
const deci_p_in_rate_in = 2 ;
const deci_p_out1_rate_out = 2 ;
const deci_p_out2_rate_out = 2 ;
const deci_p_out3_rate_out = 1 ;
const deci__p5_rate_out = 1 ;
const deci__p6_rate_in = 1 ;
const deco_p_in_rate_in = 2 ;
const deco_p_out_rate_out = 1 ;
const deco__p3_rate_out = 1 ;
const deco__p4_rate_in = 1 ;
const out_p_in_rate_in = 1 ;
const out__p2_rate_out = 1 ;
const out__p3_rate_in = 1 ;

--**************** Init Channel ****************--

const a_I = 0 ;
const b_I = 0 ;
const c_I = 0 ;
const d_I = 0 ;
const e_I = 0 ;
const f_I = 0 ;
const g_I = 0 ;
const h_I = 0 ;
const i_I = 0 ;
const j_I = 0 ;
const k_I = 2 ;
const l_I = 0 ;
const m_I = 0 ;
const n_I = 0 ;
const o_I = 0 ;
const p_I = 0 ;
const q_I = 0 ;
const r_I = 0 ;
const s_I = 1 ;
const _ch20_I = 1 ;
const _ch21_I = 1 ;
const _ch22_I = 1 ;
const _ch23_I = 1 ;
const _ch24_I = 1 ;
const _ch25_I = 1 ;
const _ch26_I = 1 ;
const _ch27_I = 1 ;
const _ch28_I = 1 ;
const _ch29_I = 1 ;
const _ch30_I = 1 ;
const _ch31_I = 1 ;
const _ch32_I = 1 ;
const _ch33_I = 1 ;
const _ch34_I = 1 ;
const _ch35_I = 1 ;


--**************** Nodes Declaration ****************--

node fork1(p_in, _p5 :int) returns (p_in_C, p_out1_P, p_out2_P, _p4_P, _p5_C :int; fork1nbrFired: int );

var
fork1nbrEnd: int;
let
fork1nbrFired= if fork1DoFire(p_in, _p5,1) then 1
		else 0;

fork1nbrEnd= 0 -> pre (fork1nbrFired);



(p_in_C, _p5_C) = ((fork1nbrFired * fork1_p_in_rate_in), (fork1nbrFired * fork1__p5_rate_in));

(p_out1_P, p_out2_P, _p4_P) = ((fork1nbrEnd * fork1_p_out1_rate_out), (fork1nbrEnd * fork1_p_out2_rate_out), (fork1nbrEnd * fork1__p4_rate_out));

tel;
------------------
node fork1DoFire(p_in, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in>=  (times * fork1_p_in_rate_in)) 
	and  (_p5>=  (times * fork1__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node biq(p_in, _p4 :int) returns (p_in_C, p_out_P, _p3_P, _p4_C :int; biqnbrFired: int );

var
biqnbrEnd: int;
let
biqnbrFired= if biqDoFire(p_in, _p4,1) then 1
		else 0;

biqnbrEnd= 0 -> pre (biqnbrFired);



(p_in_C, _p4_C) = ((biqnbrFired * biq_p_in_rate_in), (biqnbrFired * biq__p4_rate_in));

(p_out_P, _p3_P) = ((biqnbrEnd * biq_p_out_rate_out), (biqnbrEnd * biq__p3_rate_out));

tel;
------------------
node biqDoFire(p_in, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in>=  (times * biq_p_in_rate_in)) 
	and  (_p4>=  (times * biq__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node bi(p_in, _p4 :int) returns (p_in_C, p_out_P, _p3_P, _p4_C :int; binbrFired: int );

var
binbrEnd: int;
let
binbrFired= if biDoFire(p_in, _p4,1) then 1
		else 0;

binbrEnd= 0 -> pre (binbrFired);



(p_in_C, _p4_C) = ((binbrFired * bi_p_in_rate_in), (binbrFired * bi__p4_rate_in));

(p_out_P, _p3_P) = ((binbrEnd * bi_p_out_rate_out), (binbrEnd * bi__p3_rate_out));

tel;
------------------
node biDoFire(p_in, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in>=  (times * bi_p_in_rate_in)) 
	and  (_p4>=  (times * bi__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node add(p_in1, p_in2, _p5 :int) returns (p_in1_C, p_in2_C, p_out_P, _p4_P, _p5_C :int; addnbrFired: int );

var
addnbrEnd: int;
let
addnbrFired= if addDoFire(p_in1, p_in2, _p5,1) then 1
		else 0;

addnbrEnd= 0 -> pre (addnbrFired);



(p_in1_C, p_in2_C, _p5_C) = ((addnbrFired * add_p_in1_rate_in), (addnbrFired * add_p_in2_rate_in), (addnbrFired * add__p5_rate_in));

(p_out_P, _p4_P) = ((addnbrEnd * add_p_out_rate_out), (addnbrEnd * add__p4_rate_out));

tel;
------------------
node addDoFire(p_in1, p_in2, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in1>=  (times * add_p_in1_rate_in)) 
	and  (p_in2>=  (times * add_p_in2_rate_in)) 
	and  (_p5>=  (times * add__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node ac(p_in, _p4 :int) returns (p_in_C, p_out_P, _p3_P, _p4_C :int; acnbrFired: int );

var
acnbrEnd: int;
let
acnbrFired= if acDoFire(p_in, _p4,1) then 1
		else 0;

acnbrEnd= 0 -> pre (acnbrFired);



(p_in_C, _p4_C) = ((acnbrFired * ac_p_in_rate_in), (acnbrFired * ac__p4_rate_in));

(p_out_P, _p3_P) = ((acnbrEnd * ac_p_out_rate_out), (acnbrEnd * ac__p3_rate_out));

tel;
------------------
node acDoFire(p_in, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in>=  (times * ac_p_in_rate_in)) 
	and  (_p4>=  (times * ac__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node fork2(p_in, _p5 :int) returns (p_in_C, p_out1_P, p_out2_P, _p4_P, _p5_C :int; fork2nbrFired: int );

var
fork2nbrEnd: int;
let
fork2nbrFired= if fork2DoFire(p_in, _p5,1) then 1
		else 0;

fork2nbrEnd= 0 -> pre (fork2nbrFired);



(p_in_C, _p5_C) = ((fork2nbrFired * fork2_p_in_rate_in), (fork2nbrFired * fork2__p5_rate_in));

(p_out1_P, p_out2_P, _p4_P) = ((fork2nbrEnd * fork2_p_out1_rate_out), (fork2nbrEnd * fork2_p_out2_rate_out), (fork2nbrEnd * fork2__p4_rate_out));

tel;
------------------
node fork2DoFire(p_in, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in>=  (times * fork2_p_in_rate_in)) 
	and  (_p5>=  (times * fork2__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node conj(p_in, _p4 :int) returns (p_in_C, p_out_P, _p3_P, _p4_C :int; conjnbrFired: int );

var
conjnbrEnd: int;
let
conjnbrFired= if conjDoFire(p_in, _p4,1) then 1
		else 0;

conjnbrEnd= 0 -> pre (conjnbrFired);



(p_in_C, _p4_C) = ((conjnbrFired * conj_p_in_rate_in), (conjnbrFired * conj__p4_rate_in));

(p_out_P, _p3_P) = ((conjnbrEnd * conj_p_out_rate_out), (conjnbrEnd * conj__p3_rate_out));

tel;
------------------
node conjDoFire(p_in, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in>=  (times * conj_p_in_rate_in)) 
	and  (_p4>=  (times * conj__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node mul1(p_in1, p_in2, _p5 :int) returns (p_in1_C, p_in2_C, p_out_P, _p4_P, _p5_C :int; mul1nbrFired: int );

var
mul1nbrEnd: int;
let
mul1nbrFired= if mul1DoFire(p_in1, p_in2, _p5,1) then 1
		else 0;

mul1nbrEnd= 0 -> pre (mul1nbrFired);



(p_in1_C, p_in2_C, _p5_C) = ((mul1nbrFired * mul1_p_in1_rate_in), (mul1nbrFired * mul1_p_in2_rate_in), (mul1nbrFired * mul1__p5_rate_in));

(p_out_P, _p4_P) = ((mul1nbrEnd * mul1_p_out_rate_out), (mul1nbrEnd * mul1__p4_rate_out));

tel;
------------------
node mul1DoFire(p_in1, p_in2, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in1>=  (times * mul1_p_in1_rate_in)) 
	and  (p_in2>=  (times * mul1_p_in2_rate_in)) 
	and  (_p5>=  (times * mul1__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node in(_p3 :int) returns (p_out_P, _p2_P, _p3_C :int; innbrFired: int );

var
innbrEnd: int;
let
innbrFired= if inDoFire(_p3,1) then 1
		else 0;

innbrEnd= 0 -> pre (innbrFired);



(_p3_C) = ((innbrFired * in__p3_rate_in));

(p_out_P, _p2_P) = ((innbrEnd * in_p_out_rate_out), (innbrEnd * in__p2_rate_out));

tel;
------------------
node inDoFire(_p3 :int; times: int) returns ( yes: bool);
let

yes = if  (_p3>=  (times * in__p3_rate_in)) 
	then true 
	else false;

tel;
------------------
node filt(p_in, _p4 :int) returns (p_in_C, p_out_P, _p3_P, _p4_C :int; filtnbrFired: int );

var
filtnbrEnd: int;
let
filtnbrFired= if filtDoFire(p_in, _p4,1) then 1
		else 0;

filtnbrEnd= 0 -> pre (filtnbrFired);



(p_in_C, _p4_C) = ((filtnbrFired * filt_p_in_rate_in), (filtnbrFired * filt__p4_rate_in));

(p_out_P, _p3_P) = ((filtnbrEnd * filt_p_out_rate_out), (filtnbrEnd * filt__p3_rate_out));

tel;
------------------
node filtDoFire(p_in, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in>=  (times * filt_p_in_rate_in)) 
	and  (_p4>=  (times * filt__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node hil(p_in, _p4 :int) returns (p_in_C, p_out_P, _p3_P, _p4_C :int; hilnbrFired: int );

var
hilnbrEnd: int;
let
hilnbrFired= if hilDoFire(p_in, _p4,1) then 1
		else 0;

hilnbrEnd= 0 -> pre (hilnbrFired);



(p_in_C, _p4_C) = ((hilnbrFired * hil_p_in_rate_in), (hilnbrFired * hil__p4_rate_in));

(p_out_P, _p3_P) = ((hilnbrEnd * hil_p_out_rate_out), (hilnbrEnd * hil__p3_rate_out));

tel;
------------------
node hilDoFire(p_in, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in>=  (times * hil_p_in_rate_in)) 
	and  (_p4>=  (times * hil__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node eq(p_in1, p_in2, _p5 :int) returns (p_in1_C, p_in2_C, p_out_P, _p4_P, _p5_C :int; eqnbrFired: int );

var
eqnbrEnd: int;
let
eqnbrFired= if eqDoFire(p_in1, p_in2, _p5,1) then 1
		else 0;

eqnbrEnd= 0 -> pre (eqnbrFired);



(p_in1_C, p_in2_C, _p5_C) = ((eqnbrFired * eq_p_in1_rate_in), (eqnbrFired * eq_p_in2_rate_in), (eqnbrFired * eq__p5_rate_in));

(p_out_P, _p4_P) = ((eqnbrEnd * eq_p_out_rate_out), (eqnbrEnd * eq__p4_rate_out));

tel;
------------------
node eqDoFire(p_in1, p_in2, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in1>=  (times * eq_p_in1_rate_in)) 
	and  (p_in2>=  (times * eq_p_in2_rate_in)) 
	and  (_p5>=  (times * eq__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node mul2(p_in1, p_in2, _p5 :int) returns (p_in1_C, p_in2_C, p_out_P, _p4_P, _p5_C :int; mul2nbrFired: int );

var
mul2nbrEnd: int;
let
mul2nbrFired= if mul2DoFire(p_in1, p_in2, _p5,1) then 1
		else 0;

mul2nbrEnd= 0 -> pre (mul2nbrFired);



(p_in1_C, p_in2_C, _p5_C) = ((mul2nbrFired * mul2_p_in1_rate_in), (mul2nbrFired * mul2_p_in2_rate_in), (mul2nbrFired * mul2__p5_rate_in));

(p_out_P, _p4_P) = ((mul2nbrEnd * mul2_p_out_rate_out), (mul2nbrEnd * mul2__p4_rate_out));

tel;
------------------
node mul2DoFire(p_in1, p_in2, _p5 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in1>=  (times * mul2_p_in1_rate_in)) 
	and  (p_in2>=  (times * mul2_p_in2_rate_in)) 
	and  (_p5>=  (times * mul2__p5_rate_in)) 
	then true 
	else false;

tel;
------------------
node deci(p_in, _p6 :int) returns (p_in_C, p_out1_P, p_out2_P, p_out3_P, _p5_P, _p6_C :int; decinbrFired: int );

var
decinbrEnd: int;
let
decinbrFired= if deciDoFire(p_in, _p6,1) then 1
		else 0;

decinbrEnd= 0 -> pre (decinbrFired);



(p_in_C, _p6_C) = ((decinbrFired * deci_p_in_rate_in), (decinbrFired * deci__p6_rate_in));

(p_out1_P, p_out2_P, p_out3_P, _p5_P) = ((decinbrEnd * deci_p_out1_rate_out), (decinbrEnd * deci_p_out2_rate_out), (decinbrEnd * deci_p_out3_rate_out), (decinbrEnd * deci__p5_rate_out));

tel;
------------------
node deciDoFire(p_in, _p6 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in>=  (times * deci_p_in_rate_in)) 
	and  (_p6>=  (times * deci__p6_rate_in)) 
	then true 
	else false;

tel;
------------------
node deco(p_in, _p4 :int) returns (p_in_C, p_out_P, _p3_P, _p4_C :int; deconbrFired: int );

var
deconbrEnd: int;
let
deconbrFired= if decoDoFire(p_in, _p4,1) then 1
		else 0;

deconbrEnd= 0 -> pre (deconbrFired);



(p_in_C, _p4_C) = ((deconbrFired * deco_p_in_rate_in), (deconbrFired * deco__p4_rate_in));

(p_out_P, _p3_P) = ((deconbrEnd * deco_p_out_rate_out), (deconbrEnd * deco__p3_rate_out));

tel;
------------------
node decoDoFire(p_in, _p4 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in>=  (times * deco_p_in_rate_in)) 
	and  (_p4>=  (times * deco__p4_rate_in)) 
	then true 
	else false;

tel;
------------------
node out(p_in, _p3 :int) returns (p_in_C, _p2_P, _p3_C :int; outnbrFired: int );

var
outnbrEnd: int;
let
outnbrFired= if outDoFire(p_in, _p3,1) then 1
		else 0;

outnbrEnd= 0 -> pre (outnbrFired);



(p_in_C, _p3_C) = ((outnbrFired * out_p_in_rate_in), (outnbrFired * out__p3_rate_in));

(_p2_P) = ((outnbrEnd * out__p2_rate_out));

tel;
------------------
node outDoFire(p_in, _p3 :int; times: int) returns ( yes: bool);
let

yes = if  (p_in>=  (times * out_p_in_rate_in)) 
	and  (_p3>=  (times * out__p3_rate_in)) 
	then true 
	else false;

tel;
------------------

--**************** Node Top Declaration ****************--

node top (_: bool) returns (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, _ch20, _ch21, _ch22, _ch23, _ch24, _ch25, _ch26, _ch27, _ch28, _ch29, _ch30, _ch31, _ch32, _ch33, _ch34, _ch35, fork1nbrFired, biqnbrFired, binbrFired, addnbrFired, acnbrFired, fork2nbrFired, conjnbrFired, mul1nbrFired, innbrFired, filtnbrFired, hilnbrFired, eqnbrFired, mul2nbrFired, decinbrFired, deconbrFired, outnbrFired: int);

var

a_C, a_P: int; 
b_C, b_P: int; 
c_C, c_P: int; 
d_C, d_P: int; 
e_C, e_P: int; 
f_C, f_P: int; 
g_C, g_P: int; 
h_C, h_P: int; 
i_C, i_P: int; 
j_C, j_P: int; 
k_C, k_P: int; 
l_C, l_P: int; 
m_C, m_P: int; 
n_C, n_P: int; 
o_C, o_P: int; 
p_C, p_P: int; 
q_C, q_P: int; 
r_C, r_P: int; 
s_C, s_P: int; 
_ch20_C, _ch20_P: int; 
_ch21_C, _ch21_P: int; 
_ch22_C, _ch22_P: int; 
_ch23_C, _ch23_P: int; 
_ch24_C, _ch24_P: int; 
_ch25_C, _ch25_P: int; 
_ch26_C, _ch26_P: int; 
_ch27_C, _ch27_P: int; 
_ch28_C, _ch28_P: int; 
_ch29_C, _ch29_P: int; 
_ch30_C, _ch30_P: int; 
_ch31_C, _ch31_P: int; 
_ch32_C, _ch32_P: int; 
_ch33_C, _ch33_P: int; 
_ch34_C, _ch34_P: int; 
_ch35_C, _ch35_P: int; 
noDeadlock : bool;

let

a = a_I -> pre ( a-a_C)+ a_P;
b = b_I -> pre ( b-b_C)+ b_P;
c = c_I -> pre ( c-c_C)+ c_P;
d = d_I -> pre ( d-d_C)+ d_P;
e = e_I -> pre ( e-e_C)+ e_P;
f = f_I -> pre ( f-f_C)+ f_P;
g = g_I -> pre ( g-g_C)+ g_P;
h = h_I -> pre ( h-h_C)+ h_P;
i = i_I -> pre ( i-i_C)+ i_P;
j = j_I -> pre ( j-j_C)+ j_P;
k = k_I -> pre ( k-k_C)+ k_P;
l = l_I -> pre ( l-l_C)+ l_P;
m = m_I -> pre ( m-m_C)+ m_P;
n = n_I -> pre ( n-n_C)+ n_P;
o = o_I -> pre ( o-o_C)+ o_P;
p = p_I -> pre ( p-p_C)+ p_P;
q = q_I -> pre ( q-q_C)+ q_P;
r = r_I -> pre ( r-r_C)+ r_P;
s = s_I -> pre ( s-s_C)+ s_P;
_ch20 = _ch20_I -> pre ( _ch20-_ch20_C)+ _ch20_P;
_ch21 = _ch21_I -> pre ( _ch21-_ch21_C)+ _ch21_P;
_ch22 = _ch22_I -> pre ( _ch22-_ch22_C)+ _ch22_P;
_ch23 = _ch23_I -> pre ( _ch23-_ch23_C)+ _ch23_P;
_ch24 = _ch24_I -> pre ( _ch24-_ch24_C)+ _ch24_P;
_ch25 = _ch25_I -> pre ( _ch25-_ch25_C)+ _ch25_P;
_ch26 = _ch26_I -> pre ( _ch26-_ch26_C)+ _ch26_P;
_ch27 = _ch27_I -> pre ( _ch27-_ch27_C)+ _ch27_P;
_ch28 = _ch28_I -> pre ( _ch28-_ch28_C)+ _ch28_P;
_ch29 = _ch29_I -> pre ( _ch29-_ch29_C)+ _ch29_P;
_ch30 = _ch30_I -> pre ( _ch30-_ch30_C)+ _ch30_P;
_ch31 = _ch31_I -> pre ( _ch31-_ch31_C)+ _ch31_P;
_ch32 = _ch32_I -> pre ( _ch32-_ch32_C)+ _ch32_P;
_ch33 = _ch33_I -> pre ( _ch33-_ch33_C)+ _ch33_P;
_ch34 = _ch34_I -> pre ( _ch34-_ch34_C)+ _ch34_P;
_ch35 = _ch35_I -> pre ( _ch35-_ch35_C)+ _ch35_P;



(s_C, a_P, b_P, _ch20_P, _ch20_C, fork1nbrFired) = fork1(s, _ch20);
(a_C, c_P, _ch21_P, _ch21_C, biqnbrFired) = biq(a, _ch21);
(b_C, d_P, _ch22_P, _ch22_C, binbrFired) = bi(b, _ch22);
(c_C, d_C, e_P, _ch23_P, _ch23_C, addnbrFired) = add(c, d, _ch23);
(e_C, f_P, _ch24_P, _ch24_C, acnbrFired) = ac(e, _ch24);
(f_C, g_P, h_P, _ch25_P, _ch25_C, fork2nbrFired) = fork2(f, _ch25);
(g_C, i_P, _ch26_P, _ch26_C, conjnbrFired) = conj(g, _ch26);
(h_C, o_C, j_P, _ch27_P, _ch27_C, mul1nbrFired) = mul1(h, o, _ch27);
(l_P, _ch28_P, _ch28_C, innbrFired) = in(_ch28);
(l_C, m_P, _ch29_P, _ch29_C, filtnbrFired) = filt(l, _ch29);
(m_C, n_P, _ch30_P, _ch30_C, hilnbrFired) = hil(m, _ch30);
(n_C, k_C, o_P, _ch31_P, _ch31_C, eqnbrFired) = eq(n, k, _ch31);
(i_C, p_C, k_P, _ch32_P, _ch32_C, mul2nbrFired) = mul2(i, p, _ch32);
(j_C, p_P, q_P, s_P, _ch33_P, _ch33_C, decinbrFired) = deci(j, _ch33);
(q_C, r_P, _ch34_P, _ch34_C, deconbrFired) = deco(q, _ch34);
(r_C, _ch35_P, _ch35_C, outnbrFired) = out(r, _ch35);


noDeadlock = ( fork1nbrFired >= 1) 
	or  ( biqnbrFired >= 1) 
	or  ( binbrFired >= 1) 
	or  ( addnbrFired >= 1) 
	or  ( acnbrFired >= 1) 
	or  ( fork2nbrFired >= 1) 
	or  ( conjnbrFired >= 1) 
	or  ( mul1nbrFired >= 1) 
	or  ( innbrFired >= 1) 
	or  ( filtnbrFired >= 1) 
	or  ( hilnbrFired >= 1) 
	or  ( eqnbrFired >= 1) 
	or  ( mul2nbrFired >= 1) 
	or  ( decinbrFired >= 1) 
	or  ( deconbrFired >= 1) 
	or  ( outnbrFired >= 1);
--%MAIN;

--%PROPERTY  "Deadlock free "  noDeadlock;


tel;


