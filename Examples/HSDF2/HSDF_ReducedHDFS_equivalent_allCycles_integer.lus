--** This lustre code is generated automatically on 21 aoÃ»t 2020 03:25:07 PM
--**It corresponds to a translation to Lustre of the  SDFG model  of the design "hdfs" 



--**************** Const Rates ****************--

const a0_in_rate_in = 1;
const a0_e1in_rate_in = 1;
const a0_e1out_rate_out = 1;
const a0_e2_rate_out = 1;
const a0_e3_rate_out = 1;
const a0_e4_rate_out = 1;
const a0_e3__rate_out = 1;
const a0_e4__rate_out = 1;
const b0_e3_rate_in = 1;
const b0_e8_rate_in = 1;
const b0_e6_rate_out = 1;
const b0_e7_rate_out = 1;
const b1_e2_rate_in = 1;
const b1_e7_rate_in = 1;
const b1_e9_rate_out = 1;
const b1_e10_rate_out = 1;
const b2_e4_rate_in = 1;
const b2_e9_rate_in = 1;
const b2_e8_rate_out = 1;
const b2_e11_rate_out = 1;
const c0_e6_rate_in = 1;
const c0_e12_rate_out = 1;
const c1_e10_rate_in = 1;
const c1_e13_rate_out = 1;
const c2_e11_rate_in = 1;
const c2_e14_rate_out = 1;
const d0_e12_rate_in = 1;
const d0_e13_rate_in = 1;
const d0_e14_rate_in = 1;
const d0_e15in_rate_in = 1;
const d0_e15out_rate_out = 1;
const b0b1bis_e3__rate_in = 1;
const b0b1bis_e8__rate_in = 1;
const b0b1bis_e6__rate_out = 1;
const b0b1bis_e2__rate_out = 1;
const b0b1bis_e5__rate_out = 1;
const b2bis_e4__rate_in = 1;
const b2bis_e5__rate_in = 1;
const b2bis_e8__rate_out = 1;
const b2bis_e11__rate_out = 1;
const c0bis_e6__rate_in = 1;
const c0bis_e12__rate_out = 1;
const c1bis_e2__rate_in = 1;
const c1bis_e13__rate_out = 1;
const c2bis_e11__rate_in = 1;
const c2bis_e14__rate_out = 1;
const d0bis_e12__rate_in = 1;
const d0bis_e13__rate_in = 1;
const d0bis_e14__rate_in = 1;
const d0bis_e15_in_rate_in = 1;
const d0bis_e15_out_rate_out = 1;

--**************** Init Channel ****************--

const e1_I = 1 ;
const e2_I = 0 ;
const e3_I = 0 ;
const e4_I = 0 ;
const e6_I = 0 ;
const e7_I = 0 ;
const e8_I = 1 ;
const e9_I = 0 ;
const e10_I = 0 ;
const e11_I = 0 ;
const e12_I = 0 ;
const e13_I = 0 ;
const e14_I = 0 ;
const e15_I = 1 ;
const e2__I = 0 ;
const e3__I = 0 ;
const e4__I = 0 ;
const e5__I = 0 ;
const e6__I = 0 ;
const e8__I = 1 ;
const e11__I = 0 ;
const e12__I = 0 ;
const e13__I = 0 ;
const e14__I = 0 ;
const e15__I = 1 ;

const in_I = 0 ;

--**************** Actors Translation ****************--

node a0(in, e1in :int) returns (in_C, e1in_C, e1out_P, e2_P, e3_P, e4_P, e3__P, e4__P :int; a0nbrFired, nbrRuns : int );

var
a0nbrEnd: int;
let
a0nbrFired= if a0DoFire(in, e1in,1) then 1
		else 0;

a0nbrEnd= 0 -> pre (0 -> pre (0 -> pre (0 -> pre (a0nbrFired))));



nbrRuns=  a0nbrFired  ->(pre nbrRuns) +a0nbrFired - a0nbrEnd ;

(in_C, e1in_C) = ((a0nbrFired * a0_in_rate_in), (a0nbrFired * a0_e1in_rate_in));

(e1out_P, e2_P, e3_P, e4_P, e3__P, e4__P) = ((a0nbrEnd * a0_e1out_rate_out), (a0nbrEnd * a0_e2_rate_out), (a0nbrEnd * a0_e3_rate_out), (a0nbrEnd * a0_e4_rate_out), (a0nbrEnd * a0_e3__rate_out), (a0nbrEnd * a0_e4__rate_out));

tel;
------------------
node a0DoFire(in, e1in :int; times: int) returns ( yes: bool);
let

yes = if  (in>=  (times * a0_in_rate_in)) 
	and  (e1in>=  (times * a0_e1in_rate_in)) 
	then true 
	else false;

tel;
------------------
node b0(e3, e8 :int) returns (e3_C, e8_C, e6_P, e7_P :int; b0nbrFired, nbrRuns : int );

var
b0nbrEnd: int;
let
b0nbrFired= if b0DoFire(e3, e8,1) then 1
		else 0;

b0nbrEnd= 0 -> pre (b0nbrFired);



nbrRuns=  b0nbrFired  ->(pre nbrRuns) +b0nbrFired - b0nbrEnd ;

(e3_C, e8_C) = ((b0nbrFired * b0_e3_rate_in), (b0nbrFired * b0_e8_rate_in));

(e6_P, e7_P) = ((b0nbrEnd * b0_e6_rate_out), (b0nbrEnd * b0_e7_rate_out));

tel;
------------------
node b0DoFire(e3, e8 :int; times: int) returns ( yes: bool);
let

yes = if  (e3>=  (times * b0_e3_rate_in)) 
	and  (e8>=  (times * b0_e8_rate_in)) 
	then true 
	else false;

tel;
------------------
node b1(e2, e7 :int) returns (e2_C, e7_C, e9_P, e10_P :int; b1nbrFired, nbrRuns : int );

var
b1nbrEnd: int;
let
b1nbrFired= if b1DoFire(e2, e7,1) then 1
		else 0;

b1nbrEnd= 0 -> pre (b1nbrFired);



nbrRuns=  b1nbrFired  ->(pre nbrRuns) +b1nbrFired - b1nbrEnd ;

(e2_C, e7_C) = ((b1nbrFired * b1_e2_rate_in), (b1nbrFired * b1_e7_rate_in));

(e9_P, e10_P) = ((b1nbrEnd * b1_e9_rate_out), (b1nbrEnd * b1_e10_rate_out));

tel;
------------------
node b1DoFire(e2, e7 :int; times: int) returns ( yes: bool);
let

yes = if  (e2>=  (times * b1_e2_rate_in)) 
	and  (e7>=  (times * b1_e7_rate_in)) 
	then true 
	else false;

tel;
------------------
node b2(e4, e9 :int) returns (e4_C, e9_C, e8_P, e11_P :int; b2nbrFired, nbrRuns : int );

var
b2nbrEnd: int;
let
b2nbrFired= if b2DoFire(e4, e9,1) then 1
		else 0;

b2nbrEnd= 0 -> pre (b2nbrFired);



nbrRuns=  b2nbrFired  ->(pre nbrRuns) +b2nbrFired - b2nbrEnd ;

(e4_C, e9_C) = ((b2nbrFired * b2_e4_rate_in), (b2nbrFired * b2_e9_rate_in));

(e8_P, e11_P) = ((b2nbrEnd * b2_e8_rate_out), (b2nbrEnd * b2_e11_rate_out));

tel;
------------------
node b2DoFire(e4, e9 :int; times: int) returns ( yes: bool);
let

yes = if  (e4>=  (times * b2_e4_rate_in)) 
	and  (e9>=  (times * b2_e9_rate_in)) 
	then true 
	else false;

tel;
------------------
node c0(e6 :int) returns (e6_C, e12_P :int; c0nbrFired, nbrRuns : int );

var
c0nbrEnd: int;
let
c0nbrFired= if c0DoFire(e6,1) then 1
		else 0;

c0nbrEnd= 0 -> pre (c0nbrFired);



nbrRuns=  c0nbrFired  ->(pre nbrRuns) +c0nbrFired - c0nbrEnd ;

(e6_C) = ((c0nbrFired * c0_e6_rate_in));

(e12_P) = ((c0nbrEnd * c0_e12_rate_out));

tel;
------------------
node c0DoFire(e6 :int; times: int) returns ( yes: bool);
let

yes = if  (e6>=  (times * c0_e6_rate_in)) 
	then true 
	else false;

tel;
------------------
node c1(e10 :int) returns (e10_C, e13_P :int; c1nbrFired, nbrRuns : int );

var
c1nbrEnd: int;
let
c1nbrFired= if c1DoFire(e10,1) then 1
		else 0;

c1nbrEnd= 0 -> pre (c1nbrFired);



nbrRuns=  c1nbrFired  ->(pre nbrRuns) +c1nbrFired - c1nbrEnd ;

(e10_C) = ((c1nbrFired * c1_e10_rate_in));

(e13_P) = ((c1nbrEnd * c1_e13_rate_out));

tel;
------------------
node c1DoFire(e10 :int; times: int) returns ( yes: bool);
let

yes = if  (e10>=  (times * c1_e10_rate_in)) 
	then true 
	else false;

tel;
------------------
node c2(e11 :int) returns (e11_C, e14_P :int; c2nbrFired, nbrRuns : int );

var
c2nbrEnd: int;
let
c2nbrFired= if c2DoFire(e11,1) then 1
		else 0;

c2nbrEnd= 0 -> pre (c2nbrFired);



nbrRuns=  c2nbrFired  ->(pre nbrRuns) +c2nbrFired - c2nbrEnd ;

(e11_C) = ((c2nbrFired * c2_e11_rate_in));

(e14_P) = ((c2nbrEnd * c2_e14_rate_out));

tel;
------------------
node c2DoFire(e11 :int; times: int) returns ( yes: bool);
let

yes = if  (e11>=  (times * c2_e11_rate_in)) 
	then true 
	else false;

tel;
------------------
node d0(e12, e13, e14, e15in :int) returns (e12_C, e13_C, e14_C, e15in_C, e15out_P :int; d0nbrFired, nbrRuns : int );

var
d0nbrEnd: int;
let
d0nbrFired= if d0DoFire(e12, e13, e14, e15in,1) then 1
		else 0;

d0nbrEnd= 0 -> pre (d0nbrFired);



nbrRuns=  d0nbrFired  ->(pre nbrRuns) +d0nbrFired - d0nbrEnd ;

(e12_C, e13_C, e14_C, e15in_C) = ((d0nbrFired * d0_e12_rate_in), (d0nbrFired * d0_e13_rate_in), (d0nbrFired * d0_e14_rate_in), (d0nbrFired * d0_e15in_rate_in));

(e15out_P) = ((d0nbrEnd * d0_e15out_rate_out));

tel;
------------------
node d0DoFire(e12, e13, e14, e15in :int; times: int) returns ( yes: bool);
let

yes = if  (e12>=  (times * d0_e12_rate_in)) 
	and  (e13>=  (times * d0_e13_rate_in)) 
	and  (e14>=  (times * d0_e14_rate_in)) 
	and  (e15in>=  (times * d0_e15in_rate_in)) 
	then true 
	else false;

tel;
------------------
node b0b1bis(e3_, e8_ :int) returns (e3__C, e8__C, e6__P, e2__P, e5__P :int; b0b1bisnbrFired, nbrRuns : int );

var
b0b1bisnbrEnd: int;
let
b0b1bisnbrFired= if b0b1bisDoFire(e3_, e8_,1) then 1
		else 0;

b0b1bisnbrEnd= 0 -> pre (0 -> pre (b0b1bisnbrFired));



nbrRuns=  b0b1bisnbrFired  ->(pre nbrRuns) +b0b1bisnbrFired - b0b1bisnbrEnd ;

(e3__C, e8__C) = ((b0b1bisnbrFired * b0b1bis_e3__rate_in), (b0b1bisnbrFired * b0b1bis_e8__rate_in));

(e6__P, e2__P, e5__P) = ((b0b1bisnbrEnd * b0b1bis_e6__rate_out), (b0b1bisnbrEnd * b0b1bis_e2__rate_out), (b0b1bisnbrEnd * b0b1bis_e5__rate_out));

tel;
------------------
node b0b1bisDoFire(e3_, e8_ :int; times: int) returns ( yes: bool);
let

yes = if  (e3_>=  (times * b0b1bis_e3__rate_in)) 
	and  (e8_>=  (times * b0b1bis_e8__rate_in)) 
	then true 
	else false;

tel;
------------------
node b2bis(e4_, e5_ :int) returns (e4__C, e5__C, e8__P, e11__P :int; b2bisnbrFired, nbrRuns : int );

var
b2bisnbrEnd: int;
let
b2bisnbrFired= if b2bisDoFire(e4_, e5_,1) then 1
		else 0;

b2bisnbrEnd= 0 -> pre (b2bisnbrFired);



nbrRuns=  b2bisnbrFired  ->(pre nbrRuns) +b2bisnbrFired - b2bisnbrEnd ;

(e4__C, e5__C) = ((b2bisnbrFired * b2bis_e4__rate_in), (b2bisnbrFired * b2bis_e5__rate_in));

(e8__P, e11__P) = ((b2bisnbrEnd * b2bis_e8__rate_out), (b2bisnbrEnd * b2bis_e11__rate_out));

tel;
------------------
node b2bisDoFire(e4_, e5_ :int; times: int) returns ( yes: bool);
let

yes = if  (e4_>=  (times * b2bis_e4__rate_in)) 
	and  (e5_>=  (times * b2bis_e5__rate_in)) 
	then true 
	else false;

tel;
------------------
node c0bis(e6_ :int) returns (e6__C, e12__P :int; c0bisnbrFired, nbrRuns : int );

var
c0bisnbrEnd: int;
let
c0bisnbrFired= if c0bisDoFire(e6_,1) then 1
		else 0;

c0bisnbrEnd= 0 -> pre (c0bisnbrFired);



nbrRuns=  c0bisnbrFired  ->(pre nbrRuns) +c0bisnbrFired - c0bisnbrEnd ;

(e6__C) = ((c0bisnbrFired * c0bis_e6__rate_in));

(e12__P) = ((c0bisnbrEnd * c0bis_e12__rate_out));

tel;
------------------
node c0bisDoFire(e6_ :int; times: int) returns ( yes: bool);
let

yes = if  (e6_>=  (times * c0bis_e6__rate_in)) 
	then true 
	else false;

tel;
------------------
node c1bis(e2_ :int) returns (e2__C, e13__P :int; c1bisnbrFired, nbrRuns : int );

var
c1bisnbrEnd: int;
let
c1bisnbrFired= if c1bisDoFire(e2_,1) then 1
		else 0;

c1bisnbrEnd= 0 -> pre (c1bisnbrFired);



nbrRuns=  c1bisnbrFired  ->(pre nbrRuns) +c1bisnbrFired - c1bisnbrEnd ;

(e2__C) = ((c1bisnbrFired * c1bis_e2__rate_in));

(e13__P) = ((c1bisnbrEnd * c1bis_e13__rate_out));

tel;
------------------
node c1bisDoFire(e2_ :int; times: int) returns ( yes: bool);
let

yes = if  (e2_>=  (times * c1bis_e2__rate_in)) 
	then true 
	else false;

tel;
------------------
node c2bis(e11_ :int) returns (e11__C, e14__P :int; c2bisnbrFired, nbrRuns : int );

var
c2bisnbrEnd: int;
let
c2bisnbrFired= if c2bisDoFire(e11_,1) then 1
		else 0;

c2bisnbrEnd= 0 -> pre (c2bisnbrFired);



nbrRuns=  c2bisnbrFired  ->(pre nbrRuns) +c2bisnbrFired - c2bisnbrEnd ;

(e11__C) = ((c2bisnbrFired * c2bis_e11__rate_in));

(e14__P) = ((c2bisnbrEnd * c2bis_e14__rate_out));

tel;
------------------
node c2bisDoFire(e11_ :int; times: int) returns ( yes: bool);
let

yes = if  (e11_>=  (times * c2bis_e11__rate_in)) 
	then true 
	else false;

tel;
------------------
node d0bis(e12_, e13_, e14_, e15_in :int) returns (e12__C, e13__C, e14__C, e15_in_C, e15_out_P :int; d0bisnbrFired, nbrRuns : int );

var
d0bisnbrEnd: int;
let
d0bisnbrFired= if d0bisDoFire(e12_, e13_, e14_, e15_in,1) then 1
		else 0;

d0bisnbrEnd= 0 -> pre (d0bisnbrFired);



nbrRuns=  d0bisnbrFired  ->(pre nbrRuns) +d0bisnbrFired - d0bisnbrEnd ;

(e12__C, e13__C, e14__C, e15_in_C) = ((d0bisnbrFired * d0bis_e12__rate_in), (d0bisnbrFired * d0bis_e13__rate_in), (d0bisnbrFired * d0bis_e14__rate_in), (d0bisnbrFired * d0bis_e15_in_rate_in));

(e15_out_P) = ((d0bisnbrEnd * d0bis_e15_out_rate_out));

tel;
------------------
node d0bisDoFire(e12_, e13_, e14_, e15_in :int; times: int) returns ( yes: bool);
let

yes = if  (e12_>=  (times * d0bis_e12__rate_in)) 
	and  (e13_>=  (times * d0bis_e13__rate_in)) 
	and  (e14_>=  (times * d0bis_e14__rate_in)) 
	and  (e15_in>=  (times * d0bis_e15_in_rate_in)) 
	then true 
	else false;

tel;
------------------
node top (in_P: int) returns (e1, e2, e3, e4, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e2_, e3_, e4_, e5_, e6_, e8_, e11_, e12_, e13_, e14_, e15_, in, a0nbrFired, b0nbrFired, b1nbrFired, b2nbrFired, c0nbrFired, c1nbrFired, c2nbrFired, d0nbrFired, b0b1bisnbrFired, b2bisnbrFired, c0bisnbrFired, c1bisnbrFired, c2bisnbrFired, d0bisnbrFired: int);

-------------- Les variables -------------- 

var

e1_C, e1_P: int; 
e2_C, e2_P: int; 
e3_C, e3_P: int; 
e4_C, e4_P: int; 
e6_C, e6_P: int; 
e7_C, e7_P: int; 
e8_C, e8_P: int; 
e9_C, e9_P: int; 
e10_C, e10_P: int; 
e11_C, e11_P: int; 
e12_C, e12_P: int; 
e13_C, e13_P: int; 
e14_C, e14_P: int; 
e15_C, e15_P: int; 
e2__C, e2__P: int; 
e3__C, e3__P: int; 
e4__C, e4__P: int; 
e5__C, e5__P: int; 
e6__C, e6__P: int; 
e8__C, e8__P: int; 
e11__C, e11__P: int; 
e12__C, e12__P: int; 
e13__C, e13__P: int; 
e14__C, e14__P: int; 
e15__C, e15__P: int; 
in_C : int;
a0nbrRuns, b0nbrRuns, b1nbrRuns, b2nbrRuns, c0nbrRuns, c1nbrRuns, c2nbrRuns, d0nbrRuns, b0b1bisnbrRuns, b2bisnbrRuns, c0bisnbrRuns, c1bisnbrRuns, c2bisnbrRuns, d0bisnbrRuns : int; 

positiveValues: bool;


let


 
e1 = e1_I -> pre  (   e1-e1_C)+ e1_P;
e2 = e2_I -> pre  (   e2-e2_C)+ e2_P;
e3 = e3_I -> pre  (   e3-e3_C)+ e3_P;
e4 = e4_I -> pre  (   e4-e4_C)+ e4_P;
e6 = e6_I -> pre  (   e6-e6_C)+ e6_P;
e7 = e7_I -> pre  (   e7-e7_C)+ e7_P;
e8 = e8_I -> pre  (   e8-e8_C)+ e8_P;
e9 = e9_I -> pre  (   e9-e9_C)+ e9_P;
e10 = e10_I -> pre  (   e10-e10_C)+ e10_P;
e11 = e11_I -> pre  (   e11-e11_C)+ e11_P;
e12 = e12_I -> pre  (   e12-e12_C)+ e12_P;
e13 = e13_I -> pre  (   e13-e13_C)+ e13_P;
e14 = e14_I -> pre  (   e14-e14_C)+ e14_P;
e15 = e15_I -> pre  (   e15-e15_C)+ e15_P;
e2_ = e2__I -> pre  (   e2_-e2__C)+ e2__P;
e3_ = e3__I -> pre  (   e3_-e3__C)+ e3__P;
e4_ = e4__I -> pre  (   e4_-e4__C)+ e4__P;
e5_ = e5__I -> pre  (   e5_-e5__C)+ e5__P;
e6_ = e6__I -> pre  (   e6_-e6__C)+ e6__P;
e8_ = e8__I -> pre  (   e8_-e8__C)+ e8__P;
e11_ = e11__I -> pre  (   e11_-e11__C)+ e11__P;
e12_ = e12__I -> pre  (   e12_-e12__C)+ e12__P;
e13_ = e13__I -> pre  (   e13_-e13__C)+ e13__P;
e14_ = e14__I -> pre  (   e14_-e14__C)+ e14__P;
e15_ = e15__I -> pre  (   e15_-e15__C)+ e15__P;

in = in_P -> pre  ( in-in_C)+ in_P ;


(in_C, e1_C, e1_P, e2_P, e3_P, e4_P, e3__P, e4__P, a0nbrFired, a0nbrRuns  ) = a0(in, e1);
(e3_C, e8_C, e6_P, e7_P, b0nbrFired, b0nbrRuns  ) = b0(e3, e8);
(e2_C, e7_C, e9_P, e10_P, b1nbrFired, b1nbrRuns  ) = b1(e2, e7);
(e4_C, e9_C, e8_P, e11_P, b2nbrFired, b2nbrRuns  ) = b2(e4, e9);
(e6_C, e12_P, c0nbrFired, c0nbrRuns  ) = c0(e6);
(e10_C, e13_P, c1nbrFired, c1nbrRuns  ) = c1(e10);
(e11_C, e14_P, c2nbrFired, c2nbrRuns  ) = c2(e11);
(e12_C, e13_C, e14_C, e15_C, e15_P, d0nbrFired, d0nbrRuns  ) = d0(e12, e13, e14, e15);
(e3__C, e8__C, e6__P, e2__P, e5__P, b0b1bisnbrFired, b0b1bisnbrRuns  ) = b0b1bis(e3_, e8_);
(e4__C, e5__C, e8__P, e11__P, b2bisnbrFired, b2bisnbrRuns  ) = b2bis(e4_, e5_);
(e6__C, e12__P, c0bisnbrFired, c0bisnbrRuns  ) = c0bis(e6_);
(e2__C, e13__P, c1bisnbrFired, c1bisnbrRuns  ) = c1bis(e2_);
(e11__C, e14__P, c2bisnbrFired, c2bisnbrRuns  ) = c2bis(e11_);
(e12__C, e13__C, e14__C, e15__C, e15__P, d0bisnbrFired, d0bisnbrRuns  ) = d0bis(e12_, e13_, e14_, e15_);


positiveValues = ( e1>=   0) 
	and  ( e2>=   0) 
	and  ( e3>=   0) 
	and  ( e4>=   0) 
	and  ( e6>=   0) 
	and  ( e7>=   0) 
	and  ( e8>=   0) 
	and  ( e9>=   0) 
	and  ( e10>=   0) 
	and  ( e11>=   0) 
	and  ( e12>=   0) 
	and  ( e13>=   0) 
	and  ( e14>=   0) 
	and  ( e15>=   0) 
	and  ( e2_>=   0) 
	and  ( e3_>=   0) 
	and  ( e4_>=   0) 
	and  ( e5_>=   0) 
	and  ( e6_>=   0) 
	and  ( e8_>=   0) 
	and  ( e11_>=   0) 
	and  ( e12_>=   0) 
	and  ( e13_>=   0) 
	and  ( e14_>=   0) 
	and  ( e15_>=   0) 
	and  ( in>=  0) 
	and  ( a0nbrFired >= 0) 
	and  ( b0nbrFired >= 0) 
	and  ( b1nbrFired >= 0) 
	and  ( b2nbrFired >= 0) 
	and  ( c0nbrFired >= 0) 
	and  ( c1nbrFired >= 0) 
	and  ( c2nbrFired >= 0) 
	and  ( d0nbrFired >= 0) 
	and  ( b0b1bisnbrFired >= 0) 
	and  ( b2bisnbrFired >= 0) 
	and  ( c0bisnbrFired >= 0) 
	and  ( c1bisnbrFired >= 0) 
	and  ( c2bisnbrFired >= 0) 
	and  ( d0bisnbrFired >= 0) ;

--%MAIN;
assert (in_P  =1); 

--%PROPERTY  "Ok, all variables are positive "  positiveValues;

--%PROPERTY  "equiv "  d0bisnbrFired=d0nbrFired;
tel;

