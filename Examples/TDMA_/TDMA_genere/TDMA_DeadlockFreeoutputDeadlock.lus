include "./toInclude_BitBlasting_ok.lus"

const maxValue = [1,1,1,1,0,0,0,0];

--**************** Const Rates ****************--

const A_Vin_rate_in = [1,0,0,0,0,0,0,0];
const A_Vout_rate_out = [1,0,0,0,0,0,0,0];
const A_Z_rate_out = [1,0,0,0,0,0,0,0];
const A1_Z_rate_in = [1,0,0,0,0,0,0,0];

--**************** Init Channel ****************--

const V_I = [1,1,1,0,0,0,0,0];
const Z_I = [0,0,0,0,0,0,0,0];


--**************** Nodes Declaration ****************--

node A(Vin :UsrInt) returns (Vin_C, Vout_P, Z_P :UsrInt; AnbrFired: UsrInt );

let
AnbrFired= if ADoFire(Vin,UsrInt_3) then UsrInt_3
		else if ADoFire(Vin,UsrInt_2) then UsrInt_2
		else if ADoFire(Vin,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(Vin_C,Vout_P, Z_P) = (UsrIntMult(AnbrFired, A_Vin_rate_in),UsrIntMult(AnbrFired, A_Vout_rate_out),UsrIntMult(AnbrFired, A_Z_rate_out));

tel;
------------------
node ADoFire(Vin,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(Vin, UsrIntMult(times, A_Vin_rate_in)) 
	then true 
	else false;

tel;
------------------
node A1(Z :UsrInt) returns (Z_C :UsrInt; A1nbrFired: UsrInt );

let
A1nbrFired= if A1DoFire(Z,UsrInt_3) then UsrInt_3
		else if A1DoFire(Z,UsrInt_2) then UsrInt_2
		else if A1DoFire(Z,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(Z_C,) = (UsrIntMult(A1nbrFired, A1_Z_rate_in));

tel;
------------------
node A1DoFire(Z,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(Z, UsrIntMult(times, A1_Z_rate_in)) 
	then true 
	else false;

tel;
------------------

--**************** Node Top Declaration ****************--

node top (in: bool) returns (V, Z, AnbrFired, A1nbrFired:UsrInt);

-------------- Les variables -------------- 

var

V_C, V_P: UsrInt; 
Z_C, Z_P: UsrInt; 

let

V = V_I -> pre UsrIntPlus( UsrIntMinus( V,V_C), V_P);
Z = Z_I -> pre UsrIntPlus( UsrIntMinus( Z,Z_C), Z_P);



(V_C, V_P, Z_P, AnbrFired) = A(V);
(Z_C, A1nbrFired) = A1(Z);


tel;


--**************** Node Harness Declaration ****************--

node Harness (in: bool) returns (noError :bool)

var

V, Z, AnbrFired, A1nbrFired:UsrInt;

noDeadlock : bool;

let

(V, Z, AnbrFired, A1nbrFired) = top(in);

noDeadlock = UsrIntGte( AnbrFired , UsrInt_1) 
	or UsrIntGte( A1nbrFired , UsrInt_1);

noError= noDeadlock;

tel
