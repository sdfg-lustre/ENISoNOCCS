include "./toInclude_BitBlasting_ok.lus"

const maxValue = [1,1,1,1,0,0,0,0];

--**************** Const Rates ****************--

const A_Y_rate_in = [1,0,0,0,0,0,0,0];
const A_Vin_rate_in = [1,0,0,0,0,0,0,0];
const A_Vout_rate_out = [1,0,0,0,0,0,0,0];
const A_Z_rate_out = [1,0,0,0,0,0,0,0];
const A1_Z_rate_in = [1,0,0,0,0,0,0,0];
const A1_B_rate_out = [1,0,0,0,0,0,0,0];
const A1_B1_rate_out = [1,0,0,0,0,0,0,0];
const A1_B2_rate_out = [1,0,0,0,0,0,0,0];
const G_In_rate_in = [1,0,0,0,0,0,0,0];
const G_X_rate_out = [1,0,0,0,0,0,0,0];
const G_Y_rate_out = [1,0,0,0,0,0,0,0];
const P_X_rate_in = [1,0,0,0,0,0,0,0];
const P_B_rate_in = [1,0,0,0,0,0,0,0];
const P2_B1_rate_in = [1,0,0,0,0,0,0,0];
const P2_B2_rate_in = [1,0,0,0,0,0,0,0];

--**************** Init Channel ****************--

const X_I = [0,0,0,0,0,0,0,0];
const Y_I = [0,0,0,0,0,0,0,0];
const V_I = [1,1,0,0,0,0,0,0];
const Z_I = [0,0,0,0,0,0,0,0];
const B_I = [0,0,0,0,0,0,0,0];
const B1_I = [0,0,0,0,0,0,0,0];
const B2_I = [0,0,0,0,0,0,0,0];

const In_I = [0,0,0,0,0,0,0,0];

--**************** Nodes Declaration ****************--

node A(Y, Vin :UsrInt) returns (Y_C, Vin_C, Vout_P, Z_P :UsrInt; AnbrFired: UsrInt );

let
AnbrFired= if ADoFire(Y, Vin,UsrInt_3) then UsrInt_3
		else if ADoFire(Y, Vin,UsrInt_2) then UsrInt_2
		else if ADoFire(Y, Vin,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(Y_C, Vin_C,Vout_P, Z_P) = (UsrIntMult(AnbrFired, A_Y_rate_in),UsrIntMult(AnbrFired, A_Vin_rate_in),UsrIntMult(AnbrFired, A_Vout_rate_out),UsrIntMult(AnbrFired, A_Z_rate_out));

tel;
------------------
node ADoFire(Y, Vin,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(Y, UsrIntMult(times, A_Y_rate_in)) 
	and UsrIntGte(Vin, UsrIntMult(times, A_Vin_rate_in)) 
	then true 
	else false;

tel;
------------------
node A1(Z :UsrInt) returns (Z_C, B_P, B1_P, B2_P :UsrInt; A1nbrFired: UsrInt );

let
A1nbrFired= if A1DoFire(Z,UsrInt_3) then UsrInt_3
		else if A1DoFire(Z,UsrInt_2) then UsrInt_2
		else if A1DoFire(Z,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(Z_C,B_P, B1_P, B2_P) = (UsrIntMult(A1nbrFired, A1_Z_rate_in),UsrIntMult(A1nbrFired, A1_B_rate_out),UsrIntMult(A1nbrFired, A1_B1_rate_out),UsrIntMult(A1nbrFired, A1_B2_rate_out));

tel;
------------------
node A1DoFire(Z,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(Z, UsrIntMult(times, A1_Z_rate_in)) 
	then true 
	else false;

tel;
------------------
node G(In :UsrInt) returns (In_C, X_P, Y_P :UsrInt; GnbrFired: UsrInt );

let
GnbrFired= if GDoFire(In,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(In_C,X_P, Y_P) = (UsrIntMult(GnbrFired, G_In_rate_in),UsrIntMult(GnbrFired, G_X_rate_out),UsrIntMult(GnbrFired, G_Y_rate_out));

tel;
------------------
node GDoFire(In,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(In, UsrIntMult(times, G_In_rate_in)) 
	then true 
	else false;

tel;
------------------
node P(X, B :UsrInt) returns (X_C, B_C :UsrInt; PnbrFired: UsrInt );

let
PnbrFired= if PDoFire(X, B,UsrInt_5) then UsrInt_5
		else if PDoFire(X, B,UsrInt_4) then UsrInt_4
		else if PDoFire(X, B,UsrInt_3) then UsrInt_3
		else if PDoFire(X, B,UsrInt_2) then UsrInt_2
		else if PDoFire(X, B,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(X_C, B_C,) = (UsrIntMult(PnbrFired, P_X_rate_in),UsrIntMult(PnbrFired, P_B_rate_in));

tel;
------------------
node PDoFire(X, B,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(X, UsrIntMult(times, P_X_rate_in)) 
	and UsrIntGte(B, UsrIntMult(times, P_B_rate_in)) 
	then true 
	else false;

tel;
------------------
node P2(B1, B2 :UsrInt) returns (B1_C, B2_C :UsrInt; P2nbrFired: UsrInt );

let
P2nbrFired= if P2DoFire(B1, B2,UsrInt_5) then UsrInt_5
		else if P2DoFire(B1, B2,UsrInt_4) then UsrInt_4
		else if P2DoFire(B1, B2,UsrInt_3) then UsrInt_3
		else if P2DoFire(B1, B2,UsrInt_2) then UsrInt_2
		else if P2DoFire(B1, B2,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(B1_C, B2_C,) = (UsrIntMult(P2nbrFired, P2_B1_rate_in),UsrIntMult(P2nbrFired, P2_B2_rate_in));

tel;
------------------
node P2DoFire(B1, B2,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(B1, UsrIntMult(times, P2_B1_rate_in)) 
	and UsrIntGte(B2, UsrIntMult(times, P2_B2_rate_in)) 
	then true 
	else false;

tel;
------------------

--************************************************--
--******* Node Top***************--
--************************************************--
node top (In_P: UsrInt) returns (X, Y, V, Z, B, B1, B2, In, AnbrFired, A1nbrFired, GnbrFired, PnbrFired, P2nbrFired:UsrInt);

-------------- Les variables -------------- 

var

X_C, X_P: UsrInt; 
Y_C, Y_P: UsrInt; 
V_C, V_P: UsrInt; 
Z_C, Z_P: UsrInt; 
B_C, B_P: UsrInt; 
B1_C, B1_P: UsrInt; 
B2_C, B2_P: UsrInt; 
In_C : UsrInt;

let

X = X_I -> pre UsrIntPlus( UsrIntMinus( X,X_C), X_P);
Y = Y_I -> pre UsrIntPlus( UsrIntMinus( Y,Y_C), Y_P);
V = V_I -> pre UsrIntPlus( UsrIntMinus( V,V_C), V_P);
Z = Z_I -> pre UsrIntPlus( UsrIntMinus( Z,Z_C), Z_P);
B = B_I -> pre UsrIntPlus( UsrIntMinus( B,B_C), B_P);
B1 = B1_I -> pre UsrIntPlus( UsrIntMinus( B1,B1_C), B1_P);
B2 = B2_I -> pre UsrIntPlus( UsrIntMinus( B2,B2_C), B2_P);

In = In_I -> pre if UsrIntLt(UsrIntPlus( UsrIntMinus( In,In_C), In_P), maxValue) 
				then UsrIntPlus( UsrIntMinus( In,In_C), In_P)
				else UsrIntMinus( In,In_C);


(Y_C, V_C, V_P, Z_P, AnbrFired) = A(Y, V);
(Z_C, B_P, B1_P, B2_P, A1nbrFired) = A1(Z);
(In_C, X_P, Y_P, GnbrFired) = G(In);
(X_C, B_C, PnbrFired) = P(X, B);
(B1_C, B2_C, P2nbrFired) = P2(B1, B2);


tel;



--************************************************--
--******* Node Harness***************--
--************************************************--
node Harness (In_P: UsrInt) returns (noError :bool)

var

X, Y, V, Z, B, B1, B2, In, AnbrFired, A1nbrFired, GnbrFired, PnbrFired, P2nbrFired:UsrInt;

noDeadlock : bool;

let

(X, Y, V, Z, B, B1, B2, In, AnbrFired, A1nbrFired, GnbrFired, PnbrFired, P2nbrFired) = top(In_P);

noDeadlock = UsrIntGte( AnbrFired , UsrInt_1) 
	or UsrIntGte( A1nbrFired , UsrInt_1) 
	or UsrIntGte( GnbrFired , UsrInt_1) 
	or UsrIntGte( PnbrFired , UsrInt_1) 
	or UsrIntGte( P2nbrFired , UsrInt_1);

noError= noDeadlock;

tel
