--** This lustre code is generated automatically on 28 nov. 2020 04:08:14 PM
--**It corresponds to a translation to Lustre of the  SDFG model  of the design "hdfs" 



--**************** Const Rates ****************--

const a0bis_in_rate_in = 1;
const a0bis_e1_in_rate_in = 1;
const a0bis_e1_out_rate_out = 1;
const a0bis_e3__rate_out = 1;
const a0bis_e4__rate_out = 1;
const b0b1bis_e3__rate_in = 1;
const b0b1bis_e8__rate_in = 1;
const b0b1bis_e6__rate_out = 1;
const b0b1bis_e2__rate_out = 1;
const b0b1bis_e5__rate_out = 1;
const b2bis_e4__rate_in = 1;
const b2bis_e5__rate_in = 1;
const b2bis_e8__rate_out = 1;
const b2bis_e11__rate_out = 1;
const c0bis_e6__rate_in = 1;
const c0bis_e12__rate_out = 1;
const c1bis_e2__rate_in = 1;
const c1bis_e13__rate_out = 1;
const c2bis_e11__rate_in = 1;
const c2bis_e14__rate_out = 1;
const d0bis_e12__rate_in = 1;
const d0bis_e13__rate_in = 1;
const d0bis_e14__rate_in = 1;
const d0bis_e15_in_rate_in = 1;
const d0bis_e15_out_rate_out = 1;

--**************** Init Channel ****************--

const e1__I = 1 ;
const e2__I = 0 ;
const e3__I = 0 ;
const e4__I = 0 ;
const e5__I = 0 ;
const e6__I = 0 ;
const e8__I = 1 ;
const e11__I = 0 ;
const e12__I = 0 ;
const e13__I = 0 ;
const e14__I = 0 ;
const e15__I = 1 ;

const in_I = 0 ;

--**************** Actors Translation ****************--

node a0bis(in, e1_in :int) returns (in_C, e1_in_C, e1_out_P, e3__P, e4__P :int; a0bisnbrFired, a0bisnbrEnd : int );

let
a0bisnbrFired= if a0bisDoFire(in, e1_in,3) then 3
		else if a0bisDoFire(in, e1_in,2) then 2
		else if a0bisDoFire(in, e1_in,1) then 1
		else 0;

a0bisnbrEnd= 0 -> pre (0 -> pre (0 -> pre (0 -> pre (a0bisnbrFired))));



(in_C, e1_in_C) = ((a0bisnbrFired * a0bis_in_rate_in), (a0bisnbrFired * a0bis_e1_in_rate_in));

(e1_out_P, e3__P, e4__P) = ((a0bisnbrEnd * a0bis_e1_out_rate_out), (a0bisnbrEnd * a0bis_e3__rate_out), (a0bisnbrEnd * a0bis_e4__rate_out));

tel;
------------------
node a0bisDoFire(in, e1_in :int; times: int) returns ( yes: bool);
let

yes = if  (in>=  (times * a0bis_in_rate_in)) 
	and  (e1_in>=  (times * a0bis_e1_in_rate_in)) 
	then true 
	else false;

tel;
------------------
node b0b1bis(e3_, e8_ :int) returns (e3__C, e8__C, e6__P, e2__P, e5__P :int; b0b1bisnbrFired, b0b1bisnbrEnd : int );

let
b0b1bisnbrFired= if b0b1bisDoFire(e3_, e8_,3) then 3
		else if b0b1bisDoFire(e3_, e8_,2) then 2
		else if b0b1bisDoFire(e3_, e8_,1) then 1
		else 0;

b0b1bisnbrEnd= 0 -> pre (0 -> pre (b0b1bisnbrFired));



(e3__C, e8__C) = ((b0b1bisnbrFired * b0b1bis_e3__rate_in), (b0b1bisnbrFired * b0b1bis_e8__rate_in));

(e6__P, e2__P, e5__P) = ((b0b1bisnbrEnd * b0b1bis_e6__rate_out), (b0b1bisnbrEnd * b0b1bis_e2__rate_out), (b0b1bisnbrEnd * b0b1bis_e5__rate_out));

tel;
------------------
node b0b1bisDoFire(e3_, e8_ :int; times: int) returns ( yes: bool);
let

yes = if  (e3_>=  (times * b0b1bis_e3__rate_in)) 
	and  (e8_>=  (times * b0b1bis_e8__rate_in)) 
	then true 
	else false;

tel;
------------------
node b2bis(e4_, e5_ :int) returns (e4__C, e5__C, e8__P, e11__P :int; b2bisnbrFired, b2bisnbrEnd : int );

let
b2bisnbrFired= if b2bisDoFire(e4_, e5_,3) then 3
		else if b2bisDoFire(e4_, e5_,2) then 2
		else if b2bisDoFire(e4_, e5_,1) then 1
		else 0;

b2bisnbrEnd= 0 -> pre (b2bisnbrFired);



(e4__C, e5__C) = ((b2bisnbrFired * b2bis_e4__rate_in), (b2bisnbrFired * b2bis_e5__rate_in));

(e8__P, e11__P) = ((b2bisnbrEnd * b2bis_e8__rate_out), (b2bisnbrEnd * b2bis_e11__rate_out));

tel;
------------------
node b2bisDoFire(e4_, e5_ :int; times: int) returns ( yes: bool);
let

yes = if  (e4_>=  (times * b2bis_e4__rate_in)) 
	and  (e5_>=  (times * b2bis_e5__rate_in)) 
	then true 
	else false;

tel;
------------------
node c0bis(e6_ :int) returns (e6__C, e12__P :int; c0bisnbrFired, c0bisnbrEnd : int );

let
c0bisnbrFired= if c0bisDoFire(e6_,3) then 3
		else if c0bisDoFire(e6_,2) then 2
		else if c0bisDoFire(e6_,1) then 1
		else 0;

c0bisnbrEnd= 0 -> pre (c0bisnbrFired);



(e6__C) = ((c0bisnbrFired * c0bis_e6__rate_in));

(e12__P) = ((c0bisnbrEnd * c0bis_e12__rate_out));

tel;
------------------
node c0bisDoFire(e6_ :int; times: int) returns ( yes: bool);
let

yes = if  (e6_>=  (times * c0bis_e6__rate_in)) 
	then true 
	else false;

tel;
------------------
node c1bis(e2_ :int) returns (e2__C, e13__P :int; c1bisnbrFired, c1bisnbrEnd : int );

let
c1bisnbrFired= if c1bisDoFire(e2_,3) then 3
		else if c1bisDoFire(e2_,2) then 2
		else if c1bisDoFire(e2_,1) then 1
		else 0;

c1bisnbrEnd= 0 -> pre (c1bisnbrFired);



(e2__C) = ((c1bisnbrFired * c1bis_e2__rate_in));

(e13__P) = ((c1bisnbrEnd * c1bis_e13__rate_out));

tel;
------------------
node c1bisDoFire(e2_ :int; times: int) returns ( yes: bool);
let

yes = if  (e2_>=  (times * c1bis_e2__rate_in)) 
	then true 
	else false;

tel;
------------------
node c2bis(e11_ :int) returns (e11__C, e14__P :int; c2bisnbrFired, c2bisnbrEnd : int );

let
c2bisnbrFired= if c2bisDoFire(e11_,3) then 3
		else if c2bisDoFire(e11_,2) then 2
		else if c2bisDoFire(e11_,1) then 1
		else 0;

c2bisnbrEnd= 0 -> pre (c2bisnbrFired);



(e11__C) = ((c2bisnbrFired * c2bis_e11__rate_in));

(e14__P) = ((c2bisnbrEnd * c2bis_e14__rate_out));

tel;
------------------
node c2bisDoFire(e11_ :int; times: int) returns ( yes: bool);
let

yes = if  (e11_>=  (times * c2bis_e11__rate_in)) 
	then true 
	else false;

tel;
------------------
node d0bis(e12_, e13_, e14_, e15_in :int) returns (e12__C, e13__C, e14__C, e15_in_C, e15_out_P :int; d0bisnbrFired, d0bisnbrEnd : int );

let
d0bisnbrFired= if d0bisDoFire(e12_, e13_, e14_, e15_in,3) then 3
		else if d0bisDoFire(e12_, e13_, e14_, e15_in,2) then 2
		else if d0bisDoFire(e12_, e13_, e14_, e15_in,1) then 1
		else 0;

d0bisnbrEnd= 0 -> pre (d0bisnbrFired);



(e12__C, e13__C, e14__C, e15_in_C) = ((d0bisnbrFired * d0bis_e12__rate_in), (d0bisnbrFired * d0bis_e13__rate_in), (d0bisnbrFired * d0bis_e14__rate_in), (d0bisnbrFired * d0bis_e15_in_rate_in));

(e15_out_P) = ((d0bisnbrEnd * d0bis_e15_out_rate_out));

tel;
------------------
node d0bisDoFire(e12_, e13_, e14_, e15_in :int; times: int) returns ( yes: bool);
let

yes = if  (e12_>=  (times * d0bis_e12__rate_in)) 
	and  (e13_>=  (times * d0bis_e13__rate_in)) 
	and  (e14_>=  (times * d0bis_e14__rate_in)) 
	and  (e15_in>=  (times * d0bis_e15_in_rate_in)) 
	then true 
	else false;

tel;
------------------
node top (in_P : int)
returns (e1_, e2_, e3_, e4_, e5_, e6_, e8_, e11_, e12_, e13_, e14_, e15_, in, a0bisnbrFired, b0b1bisnbrFired, b2bisnbrFired, c0bisnbrFired, c1bisnbrFired, c2bisnbrFired, d0bisnbrFired: int);

-------------- Les variables -------------- 

var

e1__C, e1__P: int; 
e2__C, e2__P: int; 
e3__C, e3__P: int; 
e4__C, e4__P: int; 
e5__C, e5__P: int; 
e6__C, e6__P: int; 
e8__C, e8__P: int; 
e11__C, e11__P: int; 
e12__C, e12__P: int; 
e13__C, e13__P: int; 
e14__C, e14__P: int; 
e15__C, e15__P: int; 
in_C : int;
a0bisnbrEnd, b0b1bisnbrEnd, b2bisnbrEnd, c0bisnbrEnd, c1bisnbrEnd, c2bisnbrEnd, d0bisnbrEnd : int; 


let

e1_ = e1__I -> pre  (   e1_-e1__C)+ e1__P;
e2_ = e2__I -> pre  (   e2_-e2__C)+ e2__P;
e3_ = e3__I -> pre  (   e3_-e3__C)+ e3__P;
e4_ = e4__I -> pre  (   e4_-e4__C)+ e4__P;
e5_ = e5__I -> pre  (   e5_-e5__C)+ e5__P;
e6_ = e6__I -> pre  (   e6_-e6__C)+ e6__P;
e8_ = e8__I -> pre  (   e8_-e8__C)+ e8__P;
e11_ = e11__I -> pre  (   e11_-e11__C)+ e11__P;
e12_ = e12__I -> pre  (   e12_-e12__C)+ e12__P;
e13_ = e13__I -> pre  (   e13_-e13__C)+ e13__P;
e14_ = e14__I -> pre  (   e14_-e14__C)+ e14__P;
e15_ = e15__I -> pre  (   e15_-e15__C)+ e15__P;

in = in_P -> pre  ( in-in_C)+ in_P ;


(in_C, e1__C, e1__P, e3__P, e4__P, a0bisnbrFired, a0bisnbrEnd ) = a0bis(in, e1_);
(e3__C, e8__C, e6__P, e2__P, e5__P, b0b1bisnbrFired, b0b1bisnbrEnd ) = b0b1bis(e3_, e8_);
(e4__C, e5__C, e8__P, e11__P, b2bisnbrFired, b2bisnbrEnd ) = b2bis(e4_, e5_);
(e6__C, e12__P, c0bisnbrFired, c0bisnbrEnd ) = c0bis(e6_);
(e2__C, e13__P, c1bisnbrFired, c1bisnbrEnd ) = c1bis(e2_);
(e11__C, e14__P, c2bisnbrFired, c2bisnbrEnd ) = c2bis(e11_);
(e12__C, e13__C, e14__C, e15__C, e15__P, d0bisnbrFired, d0bisnbrEnd ) = d0bis(e12_, e13_, e14_, e15_);


assert in_P  =1; 
 
--%MAIN;

-- --%PROPERTY  .....


tel;

