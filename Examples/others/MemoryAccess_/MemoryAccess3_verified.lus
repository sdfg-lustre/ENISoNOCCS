--** This lustre code is generated automatically on 31 mai 2020 11:03:01 AM
--**It corresponds to a translation to Lustre of the  SDFG model  of the design "Memory Access" 



--**************** Const Rates ****************--

const ri_e1_rate_out = 3;
const ri_e8_rate_in = 3;
const m1_e8_rate_out = 1;
const m1_e1_rate_in = 1;
const m1_e2_rate_out = 1;
const m1_e12_rate_in = 1;
const m1_e7_rate_out = 1;
const m1_e4_rate_in = 1;
const m2_e2_rate_in = 1;
const m2_e12_rate_out = 1;
const m2_e3_rate_out = 1;
const m2_e6_rate_in = 1;
const a1_e3_rate_in = 1;
const a1_e7_rate_in = 1;
const a1_e4_rate_out = 1;
const a1_e9_rate_in = 1;
const a1_e10_rate_out = 1;
const a2_e6_rate_out = 1;
const a2_e10_rate_in = 1;
const a2_e9_rate_out = 1;
const a2_e11_rate_in = 1;
const a2_e5_rate_out = 1;
const r0_e11_rate_out = 3;
const r0_e5_rate_in = 3;

--**************** Init Channel ****************--

const e1_I = 0 ;
const e8_I = 3 ;
const e2_I = 0 ;
const e12_I = 1 ;
const e3_I = 1 ;
const e6_I = 0 ;
const e7_I = 1 ;
const e4_I = 0 ;
const e9_I = 1 ;
const e10_I = 0 ;
const e11_I = 3 ;
const e5_I = 0 ;


--**************** Actors Translation ****************--

node ri(e8 :int) returns (e1_P, e8_C :int; rinbrFired: int );

let
rinbrFired= if riDoFire(e8,3) then 3
		else if riDoFire(e8,2) then 2
		else if riDoFire(e8,1) then 1
		else 0;

(e8_C,e1_P) = ((rinbrFired * ri_e8_rate_in), (rinbrFired * ri_e1_rate_out));

tel;
------------------
node riDoFire(e8 :int; times: int) returns ( yes: bool);
let

yes = if  (e8>=  (times * ri_e8_rate_in)) 
	then true 
	else false;

tel;
------------------
node m1(e1, e12, e4 :int) returns (e8_P, e1_C, e2_P, e12_C, e7_P, e4_C :int; m1nbrFired: int );

var
e8_PD, e2_PD, e7_PD : int;
let
m1nbrFired= if m1DoFire(e1, e12, e4,3) then 3
		else if m1DoFire(e1, e12, e4,2) then 2
		else if m1DoFire(e1, e12, e4,1) then 1
		else 0;

(e1_C, e12_C, e4_C,e8_PD, e2_PD, e7_PD) = ((m1nbrFired * m1_e1_rate_in), (m1nbrFired * m1_e12_rate_in), (m1nbrFired * m1_e4_rate_in), (m1nbrFired * m1_e8_rate_out), (m1nbrFired * m1_e2_rate_out), (m1nbrFired * m1_e7_rate_out));

e8_P = 0 -> pre (0 -> pre (0 -> pre (e8_PD)));

e2_P = 0 -> pre (0 -> pre (0 -> pre (e2_PD)));

e7_P = 0 -> pre (0 -> pre (0 -> pre (e7_PD)));


tel;
------------------
node m1DoFire(e1, e12, e4 :int; times: int) returns ( yes: bool);
let

yes = if  (e1>=  (times * m1_e1_rate_in)) 
	and  (e12>=  (times * m1_e12_rate_in)) 
	and  (e4>=  (times * m1_e4_rate_in)) 
	then true 
	else false;

tel;
------------------
node m2(e2, e6 :int) returns (e2_C, e12_P, e3_P, e6_C :int; m2nbrFired: int );

var
e12_PD, e3_PD : int;
let
m2nbrFired= if m2DoFire(e2, e6,3) then 3
		else if m2DoFire(e2, e6,2) then 2
		else if m2DoFire(e2, e6,1) then 1
		else 0;

(e2_C, e6_C,e12_PD, e3_PD) = ((m2nbrFired * m2_e2_rate_in), (m2nbrFired * m2_e6_rate_in), (m2nbrFired * m2_e12_rate_out), (m2nbrFired * m2_e3_rate_out));

e12_P = 0 -> pre (e12_PD);

e3_P = 0 -> pre (e3_PD);


tel;
------------------
node m2DoFire(e2, e6 :int; times: int) returns ( yes: bool);
let

yes = if  (e2>=  (times * m2_e2_rate_in)) 
	and  (e6>=  (times * m2_e6_rate_in)) 
	then true 
	else false;

tel;
------------------
node a1(e3, e7, e9 :int) returns (e3_C, e7_C, e4_P, e9_C, e10_P :int; a1nbrFired: int );

var
e4_PD, e10_PD : int;
let
a1nbrFired= if a1DoFire(e3, e7, e9,3) then 3
		else if a1DoFire(e3, e7, e9,2) then 2
		else if a1DoFire(e3, e7, e9,1) then 1
		else 0;

(e3_C, e7_C, e9_C,e4_PD, e10_PD) = ((a1nbrFired * a1_e3_rate_in), (a1nbrFired * a1_e7_rate_in), (a1nbrFired * a1_e9_rate_in), (a1nbrFired * a1_e4_rate_out), (a1nbrFired * a1_e10_rate_out));

e4_P = 0 -> pre (0 -> pre (e4_PD));

e10_P = 0 -> pre (0 -> pre (e10_PD));


tel;
------------------
node a1DoFire(e3, e7, e9 :int; times: int) returns ( yes: bool);
let

yes = if  (e3>=  (times * a1_e3_rate_in)) 
	and  (e7>=  (times * a1_e7_rate_in)) 
	and  (e9>=  (times * a1_e9_rate_in)) 
	then true 
	else false;

tel;
------------------
node a2(e10, e11 :int) returns (e6_P, e10_C, e9_P, e11_C, e5_P :int; a2nbrFired: int );

var
e6_PD, e9_PD, e5_PD : int;
let
a2nbrFired= if a2DoFire(e10, e11,3) then 3
		else if a2DoFire(e10, e11,2) then 2
		else if a2DoFire(e10, e11,1) then 1
		else 0;

(e10_C, e11_C,e6_PD, e9_PD, e5_PD) = ((a2nbrFired * a2_e10_rate_in), (a2nbrFired * a2_e11_rate_in), (a2nbrFired * a2_e6_rate_out), (a2nbrFired * a2_e9_rate_out), (a2nbrFired * a2_e5_rate_out));

e6_P = 0 -> pre (e6_PD);

e9_P = 0 -> pre (e9_PD);

e5_P = 0 -> pre (e5_PD);


tel;
------------------
node a2DoFire(e10, e11 :int; times: int) returns ( yes: bool);
let

yes = if  (e10>=  (times * a2_e10_rate_in)) 
	and  (e11>=  (times * a2_e11_rate_in)) 
	then true 
	else false;

tel;
------------------
node r0(e5 :int) returns (e11_P, e5_C :int; r0nbrFired: int );

let
r0nbrFired= if r0DoFire(e5,3) then 3
		else if r0DoFire(e5,2) then 2
		else if r0DoFire(e5,1) then 1
		else 0;

(e5_C,e11_P) = ((r0nbrFired * r0_e5_rate_in), (r0nbrFired * r0_e11_rate_out));

tel;
------------------
node r0DoFire(e5 :int; times: int) returns ( yes: bool);
let

yes = if  (e5>=  (times * r0_e5_rate_in)) 
	then true 
	else false;

tel;
------------------
node top (_: bool) returns (e1, e8, e2, e12, e3, e6, e7, e4, e9, e10, e11, e5, rinbrFired, m1nbrFired, m2nbrFired, a1nbrFired, a2nbrFired, r0nbrFired: int);

-------------- Les variables -------------- 

var

e1_C, e1_P: int; 
e8_C, e8_P: int; 
e2_C, e2_P: int; 
e12_C, e12_P: int; 
e3_C, e3_P: int; 
e6_C, e6_P: int; 
e7_C, e7_P: int; 
e4_C, e4_P: int; 
e9_C, e9_P: int; 
e10_C, e10_P: int; 
e11_C, e11_P: int; 
e5_C, e5_P: int; 
P1, P2, P3, P4: bool;


let

e1 = e1_I -> pre  (  ( e1-e1_C)+ e1_P);
e8 = e8_I -> pre  (  ( e8-e8_C)+ e8_P);
e2 = e2_I -> pre  (  ( e2-e2_C)+ e2_P);
e12 = e12_I -> pre  (  ( e12-e12_C)+ e12_P);
e3 = e3_I -> pre  (  ( e3-e3_C)+ e3_P);
e6 = e6_I -> pre  (  ( e6-e6_C)+ e6_P);
e7 = e7_I -> pre  (  ( e7-e7_C)+ e7_P);
e4 = e4_I -> pre  (  ( e4-e4_C)+ e4_P);
e9 = e9_I -> pre  (  ( e9-e9_C)+ e9_P);
e10 = e10_I -> pre  (  ( e10-e10_C)+ e10_P);
e11 = e11_I -> pre  (  ( e11-e11_C)+ e11_P);
e5 = e5_I -> pre  (  ( e5-e5_C)+ e5_P);



(e1_P, e8_C, rinbrFired) = ri(e8);
(e8_P, e1_C, e2_P, e12_C, e7_P, e4_C, m1nbrFired) = m1(e1, e12, e4);
(e2_C, e12_P, e3_P, e6_C, m2nbrFired) = m2(e2, e6);
(e3_C, e7_C, e4_P, e9_C, e10_P, a1nbrFired) = a1(e3, e7, e9);
(e6_P, e10_C, e9_P, e11_C, e5_P, a2nbrFired) = a2(e10, e11);
(e11_P, e5_C, r0nbrFired) = r0(e5);


 
--P1= ( rinbrFired <=1) and  ( m1nbrFired <=1) 	and  ( m2nbrFired <=1) 	and  ( a1nbrFired <=1) 	and  ( a2nbrFired <=1) 	and  ( r0nbrFired <=1);
P1= (e1_P <= 3) and (e2_P <= 1) and (e3_P <= 1) and (e4_P <= 1) and (e5_P <= 1) and (e6_P <= 1) ;
 
 
P2= (m1nbrFired >= 1 => a2nbrFired >= 1 ) and (a2nbrFired >= 1 => m1nbrFired >= 1 ) ;
 
P3= (m2nbrFired >= 1 => a1nbrFired =0 ) and (a1nbrFired >= 1 => m2nbrFired =0 ) ;

---L1= 23, L2=25
P4= r0nbrFired >= 1 => 
 	(pre pre pre pre pre         pre pre pre pre pre 
	pre pre pre pre pre         pre pre pre pre pre 
         pre pre pre         	 rinbrFired >=1)  or
	(pre pre pre pre pre         pre pre pre pre pre 
        pre pre pre pre pre         pre pre pre pre pre 
         pre pre pre pre pre       rinbrFired >=1) ;

--%MAIN;

 
---%PROPERTY  "P1"  P1;
---%PROPERTY  "P2"  P2;
---%PROPERTY  "P3"  P3;
--%PROPERTY  "P4"  P4;
tel;

