--** This lustre code is generated automatically on 01 dÃ©c. 2020 10:02:42 AM
--** It corresponds to the translation of an SDFG model (example)  to Lustre. This version produce a Lustre code having a reduced number of steps.




--**************** Const Rates ****************--

const F_RF_rate_in = 1;
const F_FR_rate_out = 1;
const F_FM_rate_out = 1;
const F_FV_rate_out = 5;
const F_FI_rate_out = 5;
const R_FR_rate_in = 1;
const R_MR_rate_in = 1;
const R_IR_rate_in = 5;
const R_RF_rate_out = 1;
const R_RM_rate_out = 1;
const M_FM_rate_in = 1;
const M_VM_rate_in = 5;
const M_RM_rate_in = 1;
const M_MR_rate_out = 1;
const V_FV_rate_in = 1;
const V_VM_rate_out = 1;
const V_VI_rate_out = 1;
const I_FI_rate_in = 1;
const I_VI_rate_in = 1;
const I_IR_rate_out = 1;

--****************  Actors' durations ****************--

const F_maxStages  = 1;
const F_duration  = 1;
const R_maxStages  = 1;
const R_duration  = 1;
const M_maxStages  = 1;
const M_duration  = 1;
const V_maxStages  = 1;
const V_duration  = 1;
const I_maxStages  = 1;
const I_duration  = 1;
const  maxDuration  = 1;

--**************** Init Channel ****************--

const FR_I = 0;
const FM_I = 0;
const FV_I = 0;
const FI_I = 0;
const RF_I = 3;
const RM_I = 1;
const MR_I = 0;
const VM_I = 0;
const VI_I = 0;
const IR_I = 0;


--************************************************--
--******* Translation of Actor: F***************--
--************************************************--
node F(clock, RF :int) returns (nextClock, RF_C, FR_P, FM_P, FV_P, FI_P :int; nbrFired, nbrEnd: int );

let
nbrFired= if FDoFire(RF,1) then 1
		else 0;

(RF_C) = ((nbrFired * F_RF_rate_in));

(FR_P, FM_P, FV_P, FI_P) = ((nbrEnd * F_FR_rate_out), (nbrEnd * F_FM_rate_out), (nbrEnd * F_FV_rate_out), (nbrEnd * F_FI_rate_out));

nbrEnd = 0 -> pre nbrFired  ;
nextClock = if (nbrFired = 0) then maxDuration else 1;
tel;
------------------subnode Dofire of ActorF-----------------
node FDoFire(RF,times:int) returns ( yes: bool);
let

yes = if (RF>=  (times * F_RF_rate_in)) 
	then true 
	else false;

tel;

--************************************************--
--******* Translation of Actor: R***************--
--************************************************--
node R(clock, FR, MR, IR :int) returns (nextClock, FR_C, MR_C, IR_C, RF_P, RM_P :int; nbrFired, nbrEnd: int );

let
nbrFired= if RDoFire(FR, MR, IR,1) then 1
		else 0;

(FR_C, MR_C, IR_C) = ((nbrFired * R_FR_rate_in), (nbrFired * R_MR_rate_in), (nbrFired * R_IR_rate_in));

(RF_P, RM_P) = ((nbrEnd * R_RF_rate_out), (nbrEnd * R_RM_rate_out));

nbrEnd = 0 -> pre nbrFired  ;
nextClock = if (nbrFired = 0) then maxDuration else 1;
tel;
------------------subnode Dofire of ActorR-----------------
node RDoFire(FR, MR, IR,times:int) returns ( yes: bool);
let

yes = if (FR>=  (times * R_FR_rate_in)) 
	and (MR>=  (times * R_MR_rate_in)) 
	and (IR>=  (times * R_IR_rate_in)) 
	then true 
	else false;

tel;

--************************************************--
--******* Translation of Actor: M***************--
--************************************************--
node M(clock, FM, VM, RM :int) returns (nextClock, FM_C, VM_C, RM_C, MR_P :int; nbrFired, nbrEnd: int );

let
nbrFired= if MDoFire(FM, VM, RM,1) then 1
		else 0;

(FM_C, VM_C, RM_C) = ((nbrFired * M_FM_rate_in), (nbrFired * M_VM_rate_in), (nbrFired * M_RM_rate_in));

(MR_P) = ((nbrEnd * M_MR_rate_out));

nbrEnd = 0 -> pre nbrFired  ;
nextClock = if (nbrFired = 0) then maxDuration else 1;
tel;
------------------subnode Dofire of ActorM-----------------
node MDoFire(FM, VM, RM,times:int) returns ( yes: bool);
let

yes = if (FM>=  (times * M_FM_rate_in)) 
	and (VM>=  (times * M_VM_rate_in)) 
	and (RM>=  (times * M_RM_rate_in)) 
	then true 
	else false;

tel;

--************************************************--
--******* Translation of Actor: V***************--
--************************************************--
node V(clock, FV :int) returns (nextClock, FV_C, VM_P, VI_P :int; nbrFired, nbrEnd: int );

let
nbrFired= if VDoFire(FV,1) then 1
		else 0;

(FV_C) = ((nbrFired * V_FV_rate_in));

(VM_P, VI_P) = ((nbrEnd * V_VM_rate_out), (nbrEnd * V_VI_rate_out));

nbrEnd = 0 -> pre nbrFired  ;
nextClock = if (nbrFired = 0) then maxDuration else 1;
tel;
------------------subnode Dofire of ActorV-----------------
node VDoFire(FV,times:int) returns ( yes: bool);
let

yes = if (FV>=  (times * V_FV_rate_in)) 
	then true 
	else false;

tel;

--************************************************--
--******* Translation of Actor: I***************--
--************************************************--
node I(clock, FI, VI :int) returns (nextClock, FI_C, VI_C, IR_P :int; nbrFired, nbrEnd: int );

let
nbrFired= if IDoFire(FI, VI,1) then 1
		else 0;

(FI_C, VI_C) = ((nbrFired * I_FI_rate_in), (nbrFired * I_VI_rate_in));

(IR_P) = ((nbrEnd * I_IR_rate_out));

nbrEnd = 0 -> pre nbrFired  ;
nextClock = if (nbrFired = 0) then maxDuration else 1;
tel;
------------------subnode Dofire of ActorI-----------------
node IDoFire(FI, VI,times:int) returns ( yes: bool);
let

yes = if (FI>=  (times * I_FI_rate_in)) 
	and (VI>=  (times * I_VI_rate_in)) 
	then true 
	else false;

tel;
--******* Node Min***************--
node Min (x, y :int) returns ( r: int);
let
r= if  (x < y) then x else y;
tel;

--************************************************--
--******* Node Top***************--
--************************************************--
node top (_: bool) returns ( adv, FR, FM, FV, FI, RF, RM, MR, VM, VI, IR, FnbrFired, RnbrFired, MnbrFired, VnbrFired, InbrFired:int);

var

FR_C, FR_P: int; 
FM_C, FM_P: int; 
FV_C, FV_P: int; 
FI_C, FI_P: int; 
RF_C, RF_P: int; 
RM_C, RM_P: int; 
MR_C, MR_P: int; 
VM_C, VM_P: int; 
VI_C, VI_P: int; 
IR_C, IR_P: int; 
FnextClock : int;  
RnextClock : int;  
MnextClock : int;  
VnextClock : int;  
InextClock : int;  
FnbrEnd, RnbrEnd, MnbrEnd, VnbrEnd, InbrEnd : int; 

FnbrRun, RnbrRun, MnbrRun, VnbrRun, InbrRun : int; 

 noDeadlock: bool; 

let

FR = FR_I ->  ( pre ( FR - FR_C) + FR_P);
FM = FM_I ->  ( pre ( FM - FM_C) + FM_P);
FV = FV_I ->  ( pre ( FV - FV_C) + FV_P);
FI = FI_I ->  ( pre ( FI - FI_C) + FI_P);
RF = RF_I ->  ( pre ( RF - RF_C) + RF_P);
RM = RM_I ->  ( pre ( RM - RM_C) + RM_P);
MR = MR_I ->  ( pre ( MR - MR_C) + MR_P);
VM = VM_I ->  ( pre ( VM - VM_C) + VM_P);
VI = VI_I ->  ( pre ( VI - VI_C) + VI_P);
IR = IR_I ->  ( pre ( IR - IR_C) + IR_P);




(FnextClock, RF_C, FR_P, FM_P, FV_P, FI_P, FnbrFired, FnbrEnd ) = F(adv, RF);
(RnextClock, FR_C, MR_C, IR_C, RF_P, RM_P, RnbrFired, RnbrEnd ) = R(adv, FR, MR, IR);
(MnextClock, FM_C, VM_C, RM_C, MR_P, MnbrFired, MnbrEnd ) = M(adv, FM, VM, RM);
(VnextClock, FV_C, VM_P, VI_P, VnbrFired, VnbrEnd ) = V(adv, FV);
(InextClock, FI_C, VI_C, IR_P, InbrFired, InbrEnd ) = I(adv, FI, VI);

adv= Min(FnextClock , Min(RnextClock , Min(MnextClock , Min(VnextClock , InextClock))));


FnbrRun=  FnbrFired  -> (pre FnbrRun) +FnbrFired - FnbrEnd ;

RnbrRun=  RnbrFired  -> (pre RnbrRun) +RnbrFired - RnbrEnd ;

MnbrRun=  MnbrFired  -> (pre MnbrRun) +MnbrFired - MnbrEnd ;

VnbrRun=  VnbrFired  -> (pre VnbrRun) +VnbrFired - VnbrEnd ;

InbrRun=  InbrFired  -> (pre InbrRun) +InbrFired - InbrEnd ;


noDeadlock = ( FnbrRun >= 1) 
	or  ( RnbrRun >= 1) 
	or  ( MnbrRun >= 1) 
	or  ( VnbrRun >= 1) 
	or  ( InbrRun >= 1);
--%MAIN;

--%PROPERTY  "no deadlock "  noDeadlock;

-- --%PROPERTY  ....

tel;


