

--pour la simulation on utlise pipelineBis.lus avec P4bisV2 ; ou pipelineBis4_16.lus avec P4bisV2
--Pipeline.lus est généré automatiquement;  pipelineBis.lus est une copie de  pipeline.lus où on ajouter une deuxième  variante de P4bis.
--si on utlise  pipelineBis.lus, on peut utliser les propriétes Pi ou PiBis
P1= UsrIntGte (TanbrFired, UsrInt_1) => UsrIntEq (TanbrFired, UsrInt_1)  and  UsrIntEq (pre TanbrFired, UsrInt_0);
P2=  UsrIntEq ( TanbrFired, UsrInt_0) => UsrIntEq(pre pre A, UsrInt_0)  or  UsrIntEq (pre pre W,  UsrInt_0) or    UsrIntGte (pre TanbrFired, UsrInt_1)  ;

 P3= UsrIntGte (W,  UsrInt_0) ;

P4= UsrIntEq (TanbrFired, UsrInt_0) => UsrIntEq (pre pre WaitnbrFired, UsrInt_0 );

--l'autre ensemble  equivalent de propriétes
P1bis= UsrIntGte (WaitnbrFired, UsrInt_1) => UsrIntEq (WaitnbrFired, UsrInt_1)  and  UsrIntEq (pre WaitnbrFired, UsrInt_0);


P2bis=  UsrIntEq ( WaitnbrFired, UsrInt_0) => UsrIntEq( A, UsrInt_0)  or  UsrIntEq ( W,  UsrInt_0) or    UsrIntGte (pre WaitnbrFired, UsrInt_1)  ;

P3bis= UsrIntGte (W,  UsrInt_0) ; 

-- deux façons d'exprimer P4bis. Et l'article utilise la deuxième
--P4bis= (UsrIntEq (TanbrFired, UsrInt_0) => UsrIntEq (pre pre WaitnbrFired, UsrInt_0 )) and (UsrIntGte (TanbrFired, UsrInt_1) => UsrIntGte (pre pre WaitnbrFired, UsrInt_1 ));

P4bisV2= (UsrIntEq (TanbrFired, UsrInt_0) => UsrIntEq (pre  Z_P, UsrInt_0 )) and (UsrIntGte (TanbrFired, UsrInt_1) => UsrIntGte (pre Z_P, UsrInt_1 ));

noError= positiveValues  and P4bisV2;
--noError= positiveValues  and P1bis and P2bis and P3bis and P4bis;
--noError= positiveValues  and P1 and P2 and P3 and P4;

assert UsrIntLte(A_P, UsrInt_4) and UsrIntGte(A_P, UsrInt_0);

