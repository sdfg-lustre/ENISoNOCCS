const maxValue = 8 ;

--**************** Const Rates ****************--

const a1_e1_rate_in = 1;
const a1_e3_rate_in = 1;
const a1_e5in_rate_in = 1;
const a1_e5out_rate_out = 1;
const a1_e4_rate_out = 1;
const a2_e4_rate_in = 1;
const a2_e2_rate_out = 1;
const a2_e3_rate_out = 1;
const end_e2_rate_in = 1;

--**************** Init Channel ****************--

const e2_I = 0 ;
const e3_I = 5 ;
const e4_I = 0 ;
const e5_I = 1 ;

const e1_I = 0 ;

--**************** Actors Translation ****************--

node a1(e1, e3, e5in :int) returns (e1_C, e3_C, e5in_C, e5out_P, e4_P :int; a1nbrFired: int );

var
e5out_PD, e4_PD : int;
let
a1nbrFired= if a1DoFire(e1, e3, e5in,1) then 1
		else 0;

(e1_C, e3_C, e5in_C,e5out_PD, e4_PD) = ((a1nbrFired * a1_e1_rate_in), (a1nbrFired * a1_e3_rate_in), (a1nbrFired * a1_e5in_rate_in), (a1nbrFired * a1_e5out_rate_out), (a1nbrFired * a1_e4_rate_out));

e5out_P = 0 -> pre (e5out_PD);

e4_P = 0 -> pre (e4_PD);


tel;
------------------
node a1DoFire(e1, e3, e5in :int; times: int) returns ( yes: bool);
let

yes = if  (e1>=  (times * a1_e1_rate_in)) 
	and  (e3>=  (times * a1_e3_rate_in)) 
	and  (e5in>=  (times * a1_e5in_rate_in)) 
	then true 
	else false;

tel;
------------------
node a2(e4 :int) returns (e4_C, e2_P, e3_P :int; a2nbrFired: int );

var
e2_PD, e3_PD : int;
let
a2nbrFired= if a2DoFire(e4,3) then 3
		else if a2DoFire(e4,2) then 2
		else if a2DoFire(e4,1) then 1
		else 0;

(e4_C,e2_PD, e3_PD) = ((a2nbrFired * a2_e4_rate_in), (a2nbrFired * a2_e2_rate_out), (a2nbrFired * a2_e3_rate_out));

e2_P = 0 -> pre (0 -> pre (0 -> pre (0 -> pre (0 -> pre (0 -> pre (0 -> pre (0 -> pre (0 -> pre (e2_PD)))))))));

e3_P = 0 -> pre (0 -> pre (0 -> pre (0 -> pre (0 -> pre (0 -> pre (0 -> pre (0 -> pre (0 -> pre (e3_PD)))))))));


tel;
------------------
node a2DoFire(e4 :int; times: int) returns ( yes: bool);
let

yes = if  (e4>=  (times * a2_e4_rate_in)) 
	then true 
	else false;

tel;
------------------
node end(e2 :int) returns (e2_C :int; endnbrFired: int );

let
endnbrFired= if endDoFire(e2,1) then 1
		else 0;

(e2_C,) = ((endnbrFired * end_e2_rate_in));

tel;
------------------
node endDoFire(e2 :int; times: int) returns ( yes: bool);
let

yes = if  (e2>=  (times * end_e2_rate_in)) 
	then true 
	else false;

tel;
------------------
node top (e1_P: int) returns (e2, e3, e4, e5, e1, a1nbrFired, a2nbrFired, endnbrFired: int);

-------------- Les variables -------------- 

var

e2_C, e2_P: int; 
e3_C, e3_P: int; 
e4_C, e4_P: int; 
e5_C, e5_P: int; 
e1_C : int;

let

e2 = e2_I -> pre  (  ( e2-e2_C)+ e2_P);
e3 = e3_I -> pre  (  ( e3-e3_C)+ e3_P);
e4 = e4_I -> pre  (  ( e4-e4_C)+ e4_P);
e5 = e5_I -> pre  (  ( e5-e5_C)+ e5_P);

e1 = e1_I -> pre if ((  ( e1-e1_C) + e1_P) <  maxValue) 
				then  (  ( e1-e1_C)+ e1_P)
				else  ( e1-e1_C);


(e1_C, e3_C, e5_C, e5_P, e4_P, a1nbrFired) = a1(e1, e3, e5);
(e4_C, e2_P, e3_P, a2nbrFired) = a2(e4);
(e2_C, endnbrFired) = end(e2);


tel;


--**************** Node Harness Declaration ****************--

node Harness (e1_P: int) returns (noError :bool)

var

e2, e3, e4, e5, e1, a1nbrFired, a2nbrFired, endnbrFired: int;

positiveValues: bool;

let

(e2, e3, e4, e5, e1, a1nbrFired, a2nbrFired, endnbrFired) =top(e1_P);

positiveValues = ( e2>=   0) 
	and  ( e3>=   0) 
	and  ( e4>=   0) 
	and  ( e5>=   0) 
	and  ( e1>=  0) 
	and  ( a1nbrFired >= 0) 
	and  ( a2nbrFired >= 0) 
	and  ( endnbrFired >= 0) ;

noError= positiveValues and true;

tel
