const IN_X=1;	const OUT_X=1; const X0=0; 
const IN_Y=1;	const OUT_Y=1; const Y0=0;
const IN_Z=1;	const OUT_Z=1; const Z0=1;
const IN_V=1;	const OUT_V=1; const V0=1;
const IN_W=1;	const OUT_W=1; const W0=3;
const IN_A=1;
const IN_B=1; const OUT_B=1; const B0=8;

--node top1 (A:bool) returns ( preTa,  Ta, start, wait: bool);
node top1 (H:bool) returns ( preTa,  Ta, start, wait: bool);
var  prodX, consX, prodY, consY,  prodZ, consZ, delayedZ, prodV, consV, delayedV,  prodW, consW, delayedW,  prodB,  consB, delayedB,
X, Y, Z, V, W, B,
 X1, Y1, Z1, V1, W1, B1: int;
A:bool;

let
A=true->true->true->true->false;

  start=A and (B >= IN_B);
  (prodX, prodY, consB) =  if  start then (OUT_X,OUT_Y, IN_B) else (0,0,0);

  wait=(X >=IN_X and V >=IN_V);
  (consX, consV, delayedV, delayedZ) =  if  wait then (IN_X, IN_V, OUT_V, OUT_Z) else (0,0,0,0);
   prodV= 0->(pre delayedV);
   prodZ= 0->(pre delayedZ);

  Ta=(Y>= IN_Y and Z >=IN_Z and W >=IN_W  );
preTa= false -> pre Ta;
   (consZ, consY, consW, delayedW, delayedB) =  if  Ta then (IN_Z, IN_Y, IN_W, OUT_W,OUT_B) else (0,0,0,0,0);
  prodW= 0->(pre (0-> (pre (0-> (pre (0-> (pre (0-> (pre (0-> (pre delayedW)))))))))));
  prodB= 0->(pre (0-> (pre (0-> (pre (0-> (pre (0-> (pre (0-> (pre delayedB)))))))))));
 -- prodB= 0->(pre (0-> (pre (0-> (pre (0-> (pre delayedB)))))));  


X1= (X- consX+ prodX);   X= X0-> (pre X1);
Y1= (Y- consY+ prodY);   Y= Y0-> (pre Y1);
Z1= (Z- consZ+ prodZ);   Z= Z0-> (pre Z1);
V1= (V- consV+ prodV);     V= V0-> (pre V1);
W1= (W- consW+ prodW);     W= W0-> (pre W1);
B1= (B -consB+prodB);       B= B0-> (pre B1);


--assert (prodX <=20); assert (consX  <=20) ; assert (prodY  <=20) ; assert (consY  <=20) ; assert  (prodZ  -----<=20) ; assert (consZ <=20) ; assert (delayedZ <=20) ; assert (prodV <=20) ; assert (consV <=20) ; assert ---(delayedV  <=20) ; assert (prodW  <=20) ; assert (consW <=20) ; assert (delayedW <=20) ; assert (prodB ---

--<=20) ; assert  (consB  <=20) ; assert (delayedB <=20) ; assert (X  <=20) ; assert (Y  <=20) ; assert (Z  ---- <=20) ; assert (V <=20) ; assert (W  <=20) ; assert (B  <=20) ; assert  (X1 <=20) ; assert (Y1 <=20) ; --  -- assert (Z1 <=20) ; assert (V1 <=20 ) ; assert (W1 <=20) ; assert (B1 <=20 );
tel
