--** This lustre code is generated automatically on 21 nov. 2020 11:00:14 PM
--** It corresponds to the translation of an SDFG model (example)  to Lustre. This version produce a Lustre code having a reduced number of steps.




--**************** Const Rates ****************--

const a1_e1_rate_in = 1;
const a1_e3_rate_in = 1;
const a1_e5in_rate_in = 1;
const a1_e5out_rate_out = 1;
const a1_e4_rate_out = 1;
const a2_e4_rate_in = 1;
const a2_e2_rate_out = 1;
const a2_e3_rate_out = 1;

--****************  Actors' durations ****************--

const a1_maxStages  = 1;
const a1_duration  = 2;
const a2_maxStages  = 3;
const a2_duration  = 10;
const  maxDuration  = 10;

--**************** Init Channel ****************--

const e3_I = 3;
const e4_I = 0;
const e5_I = 1;

const e1_I = 0;
const e2_I = 0;

--************************************************--
--******* Translation of Actor: a1***************--
--************************************************--
node a1(clock, e1, e3, e5in :int) returns (nextClock, e1_C, e3_C, e5in_C, e5out_P, e4_P :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if a1DoFire(e1, e3, e5in,1) then 1
		else 0;

(e1_C, e3_C, e5in_C) = ((nbrFired * a1_e1_rate_in), (nbrFired * a1_e3_rate_in), (nbrFired * a1_e5in_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = a1Stage (clock, stage, 1, nbrFired ); 
(e5out_P, e4_P) = ((nbrEnd * a1_e5out_rate_out), (nbrEnd * a1_e4_rate_out));

tel;
------------------subnode Dofire of Actora1-----------------
node a1DoFire(e1, e3, e5in,times:int) returns ( yes: bool);
let

yes = if (e1>=  (times * a1_e1_rate_in)) 
	and (e3>=  (times * a1_e3_rate_in)) 
	and (e5in>=  (times * a1_e5in_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actora1-----------------
node a1Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then a1_duration  else maxDuration -> 
          if  selected then a1_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: a2***************--
--************************************************--
node a2(clock, e4 :int) returns (nextClock, e4_C, e2_P, e3_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
rTime3, nbrEnd3 : int; 
let
nbrFired= if a2DoFire(e4,1) then 1
		else 0;

(e4_C) = ((nbrFired * a2_e4_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = a2_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =a2Stage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =a2Stage(clock, stage, 2, nbrFired); 
(rTime3, nbrEnd3) =a2Stage(clock, stage, 3, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + ( nbrEnd2 + nbrEnd3));
 
(e2_P, e3_P) = ((nbrEnd * a2_e2_rate_out), (nbrEnd * a2_e3_rate_out));

 nextClock= Min(rTime1 , Min(rTime2 , rTime3));
 

tel;
------------------subnode Dofire of Actora2-----------------
node a2DoFire(e4,times:int) returns ( yes: bool);
let

yes = if (e4>=  (times * a2_e4_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actora2-----------------
node a2Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then a2_duration  else maxDuration -> 
          if  selected then a2_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 

--******* Node Min***************--
node Min (x, y :int) returns ( r: int);
let
r= if  (x < y) then x else y;
tel;

--************************************************--
--******* Node Top***************--
--************************************************--
node top (e1_P : int)
returns ( adv, e3, e4, e5, e1, e2, a1nbrFired, a2nbrFired:int);

var

e3_C, e3_P: int; 
e4_C, e4_P: int; 
e5_C, e5_P: int; 
e1_C : int;
e2_P : int;
a1nextClock : int;  
a2nextClock : int;  
a1nbrEnd, a2nbrEnd : int; 


let

e3 = e3_I ->  ( pre ( e3 - e3_C) + e3_P);
e4 = e4_I ->  ( pre ( e4 - e4_C) + e4_P);
e5 = e5_I ->  ( pre ( e5 - e5_C) + e5_P);


e1 = e1_P -> pre  ( e1-e1_C)+ e1_P ;

e2 = e2_I -> pre (e2+ e2_P);

(a1nextClock, e1_C, e3_C, e5_C, e5_P, e4_P, a1nbrFired, a1nbrEnd ) = a1(adv, e1, e3, e5);
(a2nextClock, e4_C, e2_P, e3_P, a2nbrFired, a2nbrEnd ) = a2(adv, e4);

adv= Min(a1nextClock , a2nextClock);


--%MAIN;

-- assert ....
-- --%PROPERTY  ....

tel;


