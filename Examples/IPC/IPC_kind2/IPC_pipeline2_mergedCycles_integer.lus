--** This lustre code is generated automatically on 04 juin 2020 06:50:23 PM
--** It corresponds to the translation of an SDFG model (IPC)  to Lustre. This version produce a Lustre code having a reduced number of steps.




--**************** Const Rates ****************--

const P1_e1_rate_in = 1;
const P1_e2_rate_out = 1;
const P1_e21_rate_out = 1;
const W1_e2_rate_in = 1;
const W1_e5_rate_in = 1;
const W1_e3_rate_out = 1;
const W1_e6_rate_out = 1;
const P2_e3_rate_in = 1;
const P2_e4_rate_out = 1;
const W2_e4_rate_in = 1;
const W2_e7_rate_in = 1;
const W2_e1_rate_out = 1;
const W2_e8_rate_out = 1;
const T1_e6_rate_in = 1;
const T1_e9_rate_in = 1;
const T1_e15_rate_in = 1;
const T1_e5_rate_out = 1;
const T1_e10_rate_out = 1;
const T1_e11_rate_out = 1;
const T2_e8_rate_in = 1;
const T2_e10_rate_in = 1;
const T2_e14_rate_in = 1;
const T2_e7_rate_out = 1;
const T2_e9_rate_out = 1;
const T2_e13_rate_out = 1;
const R1_e11_rate_in = 1;
const R1_e17_rate_in = 1;
const R1_e14_rate_out = 1;
const R1_e28_rate_out = 1;
const R2_e13_rate_in = 1;
const R2_e15_rate_out = 1;
const R2_e16_rate_out = 1;
const R2_e29_rate_out = 1;
const C_e16_rate_in = 1;
const C_e18_in_rate_in = 1;
const C_e20_rate_in = 1;
const C_e18_out_rate_out = 1;
const C_e19_rate_out = 1;
const C2_e19_rate_in = 1;
const C2_e20_rate_out = 1;
const C2_e17_rate_out = 1;
const C2_e22_rate_out = 1;
const puit1_e21_rate_in = 1;
const puit1_e22_rate_in = 1;
const puit4_e28_rate_in = 1;
const puit4_e29_rate_in = 1;

--****************  Actors' durations ****************--

const P1_maxStages  = 1;
const P1_duration  = 5;
const W1_maxStages  = 1;
const W1_duration  = 1;
const P2_maxStages  = 1;
const P2_duration  = 5;
const W2_maxStages  = 1;
const W2_duration  = 1;
const T1_maxStages  = 1;
const T1_duration  = 2;
const T2_maxStages  = 1;
const T2_duration  = 4;
const R1_maxStages  = 1;
const R1_duration  = 1;
const R2_maxStages  = 1;
const R2_duration  = 1;
const C_maxStages  = 1;
const C_duration  = 6;
const C2_maxStages  = 1;
const C2_duration  = 10;
const puit1_maxStages  = 1;
const puit1_duration  = 1;
const puit4_maxStages  = 1;
const puit4_duration  = 1;
const  maxDuration  = 10;

--**************** Init Channel ****************--

const e1_I = 1;
const e2_I = 0;
const e3_I = 0;
const e4_I = 0;
const e5_I = 1;
const e6_I = 0;
const e7_I = 1;
const e8_I = 0;
const e9_I = 1;
const e10_I = 0;
const e11_I = 0;
const e13_I = 0;
const e14_I = 0;
const e15_I = 1;
const e16_I = 0;
const e18_I = 1;
const e19_I = 0;
const e20_I = 3;
const e17_I = 1;
const e21_I = 0;
const e22_I = 0;
const e28_I = 0;
const e29_I = 0;


--************************************************--
--******* Translation of Actor: P1***************--
--************************************************--
node P1(clock, e1 :int) returns (nextClock, e1_C, e2_P, e21_P :int; P1nbrFired: int );

var
e2_PD, e21_PD :int;
stage :int;
let
P1nbrFired= if P1DoFire(e1,1) then 1
		else 0;

(e1_C, e2_PD, e21_PD) = ((P1nbrFired * P1_e1_rate_in),(P1nbrFired * P1_e2_rate_out),(P1nbrFired * P1_e21_rate_out));

stage = if (P1nbrFired = 0) then 0 
         else   1 ;

(nextClock , e2_P, e21_P)=P1Stage(clock, stage, 1, e2_PD, e21_PD); 

tel;
------------------subnode Dofire of ActorP1-----------------
node P1DoFire(e1,times:int) returns ( yes: bool);
let

yes = if (e1>=  (times * P1_e1_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorP1-----------------
node P1Stage(clock,  stage, numStage, e2_PD, e21_PD: int) returns (rTime, e2_P, e21_P : int);

var 
e2_PDBuffer, e21_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then P1_duration  else maxDuration -> 
          if  selected then P1_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e2_PDBuffer, e21_PDBuffer) = if selected then (e2_PD, e21_PD) 
                               else (0, 0) 
 ->if selected then (e2_PD, e21_PD) 
                               else if endExecution then (0, 0)
           else pre (e2_PDBuffer, e21_PDBuffer); 
(e2_P, e21_P) = (0, 0) ->   if endExecution then pre (e2_PDBuffer, e21_PDBuffer)
                                        else (0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: W1***************--
--************************************************--
node W1(clock, e2, e5 :int) returns (nextClock, e2_C, e5_C, e3_P, e6_P :int; W1nbrFired: int );

var
e3_PD, e6_PD :int;
let
W1nbrFired= if W1DoFire(e2, e5,1) then 1
		else 0;

(e2_C, e5_C, e3_PD, e6_PD) = ((W1nbrFired * W1_e2_rate_in),(W1nbrFired * W1_e5_rate_in),(W1nbrFired * W1_e3_rate_out),(W1nbrFired * W1_e6_rate_out));

e3_P = 0 -> pre e3_PD;

e6_P = 0 -> pre e6_PD;

nextClock = if (W1nbrFired = 0) then maxDuration else 1;
tel;
------------------subnode Dofire of ActorW1-----------------
node W1DoFire(e2, e5,times:int) returns ( yes: bool);
let

yes = if (e2>=  (times * W1_e2_rate_in)) 
	and (e5>=  (times * W1_e5_rate_in)) 
	then true 
	else false;

tel;

--************************************************--
--******* Translation of Actor: P2***************--
--************************************************--
node P2(clock, e3 :int) returns (nextClock, e3_C, e4_P :int; P2nbrFired: int );

var
e4_PD :int;
stage :int;
let
P2nbrFired= if P2DoFire(e3,1) then 1
		else 0;

(e3_C, e4_PD) = ((P2nbrFired * P2_e3_rate_in),(P2nbrFired * P2_e4_rate_out));

stage = if (P2nbrFired = 0) then 0 
         else   1 ;

(nextClock , e4_P)=P2Stage(clock, stage, 1, e4_PD); 

tel;
------------------subnode Dofire of ActorP2-----------------
node P2DoFire(e3,times:int) returns ( yes: bool);
let

yes = if (e3>=  (times * P2_e3_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorP2-----------------
node P2Stage(clock,  stage, numStage, e4_PD: int) returns (rTime, e4_P : int);

var 
e4_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then P2_duration  else maxDuration -> 
          if  selected then P2_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e4_PDBuffer) = if selected then (e4_PD) 
                               else (0) 
 ->if selected then (e4_PD) 
                               else if endExecution then (0)
           else pre (e4_PDBuffer); 
(e4_P) = (0) ->   if endExecution then pre (e4_PDBuffer)
                                        else (0); 
tel; 


--************************************************--
--******* Translation of Actor: W2***************--
--************************************************--
node W2(clock, e4, e7 :int) returns (nextClock, e4_C, e7_C, e1_P, e8_P :int; W2nbrFired: int );

var
e1_PD, e8_PD :int;
let
W2nbrFired= if W2DoFire(e4, e7,1) then 1
		else 0;

(e4_C, e7_C, e1_PD, e8_PD) = ((W2nbrFired * W2_e4_rate_in),(W2nbrFired * W2_e7_rate_in),(W2nbrFired * W2_e1_rate_out),(W2nbrFired * W2_e8_rate_out));

e1_P = 0 -> pre e1_PD;

e8_P = 0 -> pre e8_PD;

nextClock = if (W2nbrFired = 0) then maxDuration else 1;
tel;
------------------subnode Dofire of ActorW2-----------------
node W2DoFire(e4, e7,times:int) returns ( yes: bool);
let

yes = if (e4>=  (times * W2_e4_rate_in)) 
	and (e7>=  (times * W2_e7_rate_in)) 
	then true 
	else false;

tel;

--************************************************--
--******* Translation of Actor: T1***************--
--************************************************--
node T1(clock, e6, e9, e15 :int) returns (nextClock, e6_C, e9_C, e15_C, e5_P, e10_P, e11_P :int; T1nbrFired: int );

var
e5_PD, e10_PD, e11_PD :int;
stage :int;
let
T1nbrFired= if T1DoFire(e6, e9, e15,1) then 1
		else 0;

(e6_C, e9_C, e15_C, e5_PD, e10_PD, e11_PD) = ((T1nbrFired * T1_e6_rate_in),(T1nbrFired * T1_e9_rate_in),(T1nbrFired * T1_e15_rate_in),(T1nbrFired * T1_e5_rate_out),(T1nbrFired * T1_e10_rate_out),(T1nbrFired * T1_e11_rate_out));

stage = if (T1nbrFired = 0) then 0 
         else   1 ;

(nextClock , e5_P, e10_P, e11_P)=T1Stage(clock, stage, 1, e5_PD, e10_PD, e11_PD); 

tel;
------------------subnode Dofire of ActorT1-----------------
node T1DoFire(e6, e9, e15,times:int) returns ( yes: bool);
let

yes = if (e6>=  (times * T1_e6_rate_in)) 
	and (e9>=  (times * T1_e9_rate_in)) 
	and (e15>=  (times * T1_e15_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorT1-----------------
node T1Stage(clock,  stage, numStage, e5_PD, e10_PD, e11_PD: int) returns (rTime, e5_P, e10_P, e11_P : int);

var 
e5_PDBuffer, e10_PDBuffer, e11_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then T1_duration  else maxDuration -> 
          if  selected then T1_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e5_PDBuffer, e10_PDBuffer, e11_PDBuffer) = if selected then (e5_PD, e10_PD, e11_PD) 
                               else (0, 0, 0) 
 ->if selected then (e5_PD, e10_PD, e11_PD) 
                               else if endExecution then (0, 0, 0)
           else pre (e5_PDBuffer, e10_PDBuffer, e11_PDBuffer); 
(e5_P, e10_P, e11_P) = (0, 0, 0) ->   if endExecution then pre (e5_PDBuffer, e10_PDBuffer, e11_PDBuffer)
                                        else (0, 0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: T2***************--
--************************************************--
node T2(clock, e8, e10, e14 :int) returns (nextClock, e8_C, e10_C, e14_C, e7_P, e9_P, e13_P :int; T2nbrFired: int );

var
e7_PD, e9_PD, e13_PD :int;
stage :int;
let
T2nbrFired= if T2DoFire(e8, e10, e14,1) then 1
		else 0;

(e8_C, e10_C, e14_C, e7_PD, e9_PD, e13_PD) = ((T2nbrFired * T2_e8_rate_in),(T2nbrFired * T2_e10_rate_in),(T2nbrFired * T2_e14_rate_in),(T2nbrFired * T2_e7_rate_out),(T2nbrFired * T2_e9_rate_out),(T2nbrFired * T2_e13_rate_out));

stage = if (T2nbrFired = 0) then 0 
         else   1 ;

(nextClock , e7_P, e9_P, e13_P)=T2Stage(clock, stage, 1, e7_PD, e9_PD, e13_PD); 

tel;
------------------subnode Dofire of ActorT2-----------------
node T2DoFire(e8, e10, e14,times:int) returns ( yes: bool);
let

yes = if (e8>=  (times * T2_e8_rate_in)) 
	and (e10>=  (times * T2_e10_rate_in)) 
	and (e14>=  (times * T2_e14_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorT2-----------------
node T2Stage(clock,  stage, numStage, e7_PD, e9_PD, e13_PD: int) returns (rTime, e7_P, e9_P, e13_P : int);

var 
e7_PDBuffer, e9_PDBuffer, e13_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then T2_duration  else maxDuration -> 
          if  selected then T2_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e7_PDBuffer, e9_PDBuffer, e13_PDBuffer) = if selected then (e7_PD, e9_PD, e13_PD) 
                               else (0, 0, 0) 
 ->if selected then (e7_PD, e9_PD, e13_PD) 
                               else if endExecution then (0, 0, 0)
           else pre (e7_PDBuffer, e9_PDBuffer, e13_PDBuffer); 
(e7_P, e9_P, e13_P) = (0, 0, 0) ->   if endExecution then pre (e7_PDBuffer, e9_PDBuffer, e13_PDBuffer)
                                        else (0, 0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: R1***************--
--************************************************--
node R1(clock, e11, e17 :int) returns (nextClock, e11_C, e17_C, e14_P, e28_P :int; R1nbrFired: int );

var
e14_PD, e28_PD :int;
let
R1nbrFired= if R1DoFire(e11, e17,1) then 1
		else 0;

(e11_C, e17_C, e14_PD, e28_PD) = ((R1nbrFired * R1_e11_rate_in),(R1nbrFired * R1_e17_rate_in),(R1nbrFired * R1_e14_rate_out),(R1nbrFired * R1_e28_rate_out));

e14_P = 0 -> pre e14_PD;

e28_P = 0 -> pre e28_PD;

nextClock = if (R1nbrFired = 0) then maxDuration else 1;
tel;
------------------subnode Dofire of ActorR1-----------------
node R1DoFire(e11, e17,times:int) returns ( yes: bool);
let

yes = if (e11>=  (times * R1_e11_rate_in)) 
	and (e17>=  (times * R1_e17_rate_in)) 
	then true 
	else false;

tel;

--************************************************--
--******* Translation of Actor: R2***************--
--************************************************--
node R2(clock, e13 :int) returns (nextClock, e13_C, e15_P, e16_P, e29_P :int; R2nbrFired: int );

var
e15_PD, e16_PD, e29_PD :int;
let
R2nbrFired= if R2DoFire(e13,1) then 1
		else 0;

(e13_C, e15_PD, e16_PD, e29_PD) = ((R2nbrFired * R2_e13_rate_in),(R2nbrFired * R2_e15_rate_out),(R2nbrFired * R2_e16_rate_out),(R2nbrFired * R2_e29_rate_out));

e15_P = 0 -> pre e15_PD;

e16_P = 0 -> pre e16_PD;

e29_P = 0 -> pre e29_PD;

nextClock = if (R2nbrFired = 0) then maxDuration else 1;
tel;
------------------subnode Dofire of ActorR2-----------------
node R2DoFire(e13,times:int) returns ( yes: bool);
let

yes = if (e13>=  (times * R2_e13_rate_in)) 
	then true 
	else false;

tel;

--************************************************--
--******* Translation of Actor: C***************--
--************************************************--
node C(clock, e16, e18_in, e20 :int) returns (nextClock, e16_C, e18_in_C, e20_C, e18_out_P, e19_P :int; CnbrFired: int );

var
e18_out_PD, e19_PD :int;
stage :int;
let
CnbrFired= if CDoFire(e16, e18_in, e20,1) then 1
		else 0;

(e16_C, e18_in_C, e20_C, e18_out_PD, e19_PD) = ((CnbrFired * C_e16_rate_in),(CnbrFired * C_e18_in_rate_in),(CnbrFired * C_e20_rate_in),(CnbrFired * C_e18_out_rate_out),(CnbrFired * C_e19_rate_out));

stage = if (CnbrFired = 0) then 0 
         else   1 ;

(nextClock , e18_out_P, e19_P)=CStage(clock, stage, 1, e18_out_PD, e19_PD); 

tel;
------------------subnode Dofire of ActorC-----------------
node CDoFire(e16, e18_in, e20,times:int) returns ( yes: bool);
let

yes = if (e16>=  (times * C_e16_rate_in)) 
	and (e18_in>=  (times * C_e18_in_rate_in)) 
	and (e20>=  (times * C_e20_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorC-----------------
node CStage(clock,  stage, numStage, e18_out_PD, e19_PD: int) returns (rTime, e18_out_P, e19_P : int);

var 
e18_out_PDBuffer, e19_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then C_duration  else maxDuration -> 
          if  selected then C_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e18_out_PDBuffer, e19_PDBuffer) = if selected then (e18_out_PD, e19_PD) 
                               else (0, 0) 
 ->if selected then (e18_out_PD, e19_PD) 
                               else if endExecution then (0, 0)
           else pre (e18_out_PDBuffer, e19_PDBuffer); 
(e18_out_P, e19_P) = (0, 0) ->   if endExecution then pre (e18_out_PDBuffer, e19_PDBuffer)
                                        else (0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: C2***************--
--************************************************--
node C2(clock, e19 :int) returns (nextClock, e19_C, e20_P, e17_P, e22_P :int; C2nbrFired: int );

var
e20_PD, e17_PD, e22_PD :int;
stage :int;
let
C2nbrFired= if C2DoFire(e19,3) then 3
		else if C2DoFire(e19,2) then 2
		else if C2DoFire(e19,1) then 1
		else 0;

(e19_C, e20_PD, e17_PD, e22_PD) = ((C2nbrFired * C2_e19_rate_in),(C2nbrFired * C2_e20_rate_out),(C2nbrFired * C2_e17_rate_out),(C2nbrFired * C2_e22_rate_out));

stage = if (C2nbrFired = 0) then 0 
         else   1 ;

(nextClock , e20_P, e17_P, e22_P)=C2Stage(clock, stage, 1, e20_PD, e17_PD, e22_PD); 

tel;
------------------subnode Dofire of ActorC2-----------------
node C2DoFire(e19,times:int) returns ( yes: bool);
let

yes = if (e19>=  (times * C2_e19_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorC2-----------------
node C2Stage(clock,  stage, numStage, e20_PD, e17_PD, e22_PD: int) returns (rTime, e20_P, e17_P, e22_P : int);

var 
e20_PDBuffer, e17_PDBuffer, e22_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then C2_duration  else maxDuration -> 
          if  selected then C2_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e20_PDBuffer, e17_PDBuffer, e22_PDBuffer) = if selected then (e20_PD, e17_PD, e22_PD) 
                               else (0, 0, 0) 
 ->if selected then (e20_PD, e17_PD, e22_PD) 
                               else if endExecution then (0, 0, 0)
           else pre (e20_PDBuffer, e17_PDBuffer, e22_PDBuffer); 
(e20_P, e17_P, e22_P) = (0, 0, 0) ->   if endExecution then pre (e20_PDBuffer, e17_PDBuffer, e22_PDBuffer)
                                        else (0, 0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: puit1***************--
--************************************************--
node puit1(clock, e21, e22 :int) returns (nextClock, e21_C, e22_C :int; puit1nbrFired: int );

let
puit1nbrFired= if puit1DoFire(e21, e22,1) then 1
		else 0;

(e21_C, e22_C) = ((puit1nbrFired * puit1_e21_rate_in),(puit1nbrFired * puit1_e22_rate_in));

nextClock = maxDuration ;
tel;
------------------subnode Dofire of Actorpuit1-----------------
node puit1DoFire(e21, e22,times:int) returns ( yes: bool);
let

yes = if (e21>=  (times * puit1_e21_rate_in)) 
	and (e22>=  (times * puit1_e22_rate_in)) 
	then true 
	else false;

tel;

--************************************************--
--******* Translation of Actor: puit4***************--
--************************************************--
node puit4(clock, e28, e29 :int) returns (nextClock, e28_C, e29_C :int; puit4nbrFired: int );

let
puit4nbrFired= if puit4DoFire(e28, e29,1) then 1
		else 0;

(e28_C, e29_C) = ((puit4nbrFired * puit4_e28_rate_in),(puit4nbrFired * puit4_e29_rate_in));

nextClock = maxDuration ;
tel;
------------------subnode Dofire of Actorpuit4-----------------
node puit4DoFire(e28, e29,times:int) returns ( yes: bool);
let

yes = if (e28>=  (times * puit4_e28_rate_in)) 
	and (e29>=  (times * puit4_e29_rate_in)) 
	then true 
	else false;

tel;
--******* Node Min***************--
node Min (x, y :int) returns ( r: int);
let
r= if  (x < y) then x else y;
tel;

--************************************************--
--******* Node Top***************--
--************************************************--
node top (_: bool) returns ( clock, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e13, e14, e15, e16, e18, e19, e20, e17, e21, e22, e28, e29, P1nbrFired, W1nbrFired, P2nbrFired, W2nbrFired, T1nbrFired, T2nbrFired, R1nbrFired, R2nbrFired, CnbrFired, C2nbrFired, puit1nbrFired, puit4nbrFired:int);

var

e1_C, e1_P: int; 
e2_C, e2_P: int; 
e3_C, e3_P: int; 
e4_C, e4_P: int; 
e5_C, e5_P: int; 
e6_C, e6_P: int; 
e7_C, e7_P: int; 
e8_C, e8_P: int; 
e9_C, e9_P: int; 
e10_C, e10_P: int; 
e11_C, e11_P: int; 
e13_C, e13_P: int; 
e14_C, e14_P: int; 
e15_C, e15_P: int; 
e16_C, e16_P: int; 
e18_C, e18_P: int; 
e19_C, e19_P: int; 
e20_C, e20_P: int; 
e17_C, e17_P: int; 
e21_C, e21_P: int; 
e22_C, e22_P: int; 
e28_C, e28_P: int; 
e29_C, e29_P: int; 
P1nextClock : int;  
W1nextClock : int;  
P2nextClock : int;  
W2nextClock : int;  
T1nextClock : int;  
T2nextClock : int;  
R1nextClock : int;  
R2nextClock : int;  
CnextClock : int;  
C2nextClock : int;  
puit1nextClock : int;  
puit4nextClock : int;  
positiveValues: bool; 

let

e1 = e1_I ->  ( pre ( e1 - e1_C) + e1_P);
e2 = e2_I ->  ( pre ( e2 - e2_C) + e2_P);
e3 = e3_I ->  ( pre ( e3 - e3_C) + e3_P);
e4 = e4_I ->  ( pre ( e4 - e4_C) + e4_P);
e5 = e5_I ->  ( pre ( e5 - e5_C) + e5_P);
e6 = e6_I ->  ( pre ( e6 - e6_C) + e6_P);
e7 = e7_I ->  ( pre ( e7 - e7_C) + e7_P);
e8 = e8_I ->  ( pre ( e8 - e8_C) + e8_P);
e9 = e9_I ->  ( pre ( e9 - e9_C) + e9_P);
e10 = e10_I ->  ( pre ( e10 - e10_C) + e10_P);
e11 = e11_I ->  ( pre ( e11 - e11_C) + e11_P);
e13 = e13_I ->  ( pre ( e13 - e13_C) + e13_P);
e14 = e14_I ->  ( pre ( e14 - e14_C) + e14_P);
e15 = e15_I ->  ( pre ( e15 - e15_C) + e15_P);
e16 = e16_I ->  ( pre ( e16 - e16_C) + e16_P);
e18 = e18_I ->  ( pre ( e18 - e18_C) + e18_P);
e19 = e19_I ->  ( pre ( e19 - e19_C) + e19_P);
e20 = e20_I ->  ( pre ( e20 - e20_C) + e20_P);
e17 = e17_I ->  ( pre ( e17 - e17_C) + e17_P);
e21 = e21_I ->  ( pre ( e21 - e21_C) + e21_P);
e22 = e22_I ->  ( pre ( e22 - e22_C) + e22_P);
e28 = e28_I ->  ( pre ( e28 - e28_C) + e28_P);
e29 = e29_I ->  ( pre ( e29 - e29_C) + e29_P);




(P1nextClock, e1_C, e2_P, e21_P, P1nbrFired) = P1(clock, e1);
(W1nextClock, e2_C, e5_C, e3_P, e6_P, W1nbrFired) = W1(clock, e2, e5);
(P2nextClock, e3_C, e4_P, P2nbrFired) = P2(clock, e3);
(W2nextClock, e4_C, e7_C, e1_P, e8_P, W2nbrFired) = W2(clock, e4, e7);
(T1nextClock, e6_C, e9_C, e15_C, e5_P, e10_P, e11_P, T1nbrFired) = T1(clock, e6, e9, e15);
(T2nextClock, e8_C, e10_C, e14_C, e7_P, e9_P, e13_P, T2nbrFired) = T2(clock, e8, e10, e14);
(R1nextClock, e11_C, e17_C, e14_P, e28_P, R1nbrFired) = R1(clock, e11, e17);
(R2nextClock, e13_C, e15_P, e16_P, e29_P, R2nbrFired) = R2(clock, e13);
(CnextClock, e16_C, e18_C, e20_C, e18_P, e19_P, CnbrFired) = C(clock, e16, e18, e20);
(C2nextClock, e19_C, e20_P, e17_P, e22_P, C2nbrFired) = C2(clock, e19);
(puit1nextClock, e21_C, e22_C, puit1nbrFired) = puit1(clock, e21, e22);
(puit4nextClock, e28_C, e29_C, puit4nbrFired) = puit4(clock, e28, e29);

clock= Min(P1nextClock , Min(W1nextClock , Min(P2nextClock , Min(W2nextClock , Min(T1nextClock , Min(T2nextClock , Min(R1nextClock , Min(R2nextClock , Min(CnextClock , Min(C2nextClock , Min(puit1nextClock , puit4nextClock)))))))))));



positiveValues = ( e1 >= 0) 
	and ( e2 >= 0) 
	and ( e3 >= 0) 
	and ( e4 >= 0) 
	and ( e5 >= 0) 
	and ( e6 >= 0) 
	and ( e7 >= 0) 
	and ( e8 >= 0) 
	and ( e9 >= 0) 
	and ( e10 >= 0) 
	and ( e11 >= 0) 
	and ( e13 >= 0) 
	and ( e14 >= 0) 
	and ( e15 >= 0) 
	and ( e16 >= 0) 
	and ( e18 >= 0) 
	and ( e19 >= 0) 
	and ( e20 >= 0) 
	and ( e17 >= 0) 
	and ( e21 >= 0) 
	and ( e22 >= 0) 
	and ( e28 >= 0) 
	and ( e29 >= 0) 
	and ( P1nbrFired  >=  0) 
	and ( W1nbrFired  >=  0) 
	and ( P2nbrFired  >=  0) 
	and ( W2nbrFired  >=  0) 
	and ( T1nbrFired  >=  0) 
	and ( T2nbrFired  >=  0) 
	and ( R1nbrFired  >=  0) 
	and ( R2nbrFired  >=  0) 
	and ( CnbrFired  >=  0) 
	and ( C2nbrFired  >=  0) 
	and ( puit1nbrFired  >=  0) 
	and ( puit4nbrFired  >=  0) ;
--%MAIN;

--%PROPERTY  "Ok, all variables are positive "  positiveValues;


tel;


