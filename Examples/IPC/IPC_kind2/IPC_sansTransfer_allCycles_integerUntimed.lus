--** This lustre code is generated automatically on 30 aoÃ»t 2020 12:34:10 PM
--**It corresponds to a translation to Lustre of the Untimed SDFG model  of the design "IPC" 




--**************** Const Rates ****************--

const P1_e1_rate_in = 1 ;
const P1_e2_rate_out = 1 ;
const P1_e21_rate_out = 1 ;
const W1_e2_rate_in = 1 ;
const W1_e6_rate_in = 1 ;
const W1_e3_rate_out = 1 ;
const W1_e5_rate_out = 1 ;
const P2_e3_rate_in = 1 ;
const P2_e4_rate_out = 1 ;
const W2_e4_rate_in = 1 ;
const W2_e7_rate_in = 1 ;
const W2_e1_rate_out = 1 ;
const W2_e8_rate_out = 1 ;
const R1_e5_rate_in = 1 ;
const R1_e17_rate_in = 1 ;
const R1_e7_rate_out = 1 ;
const R1_e11_rate_out = 1 ;
const R1_e28_rate_out = 1 ;
const R2_e11_rate_in = 1 ;
const R2_e8_rate_in = 1 ;
const R2_e6_rate_out = 1 ;
const R2_e16_rate_out = 1 ;
const R2_e29_rate_out = 1 ;
const C_e16_rate_in = 1 ;
const C_e17_rate_out = 1 ;
const C_e22_rate_out = 1 ;
const puit1_e21_rate_in = 1 ;
const puit1_e22_rate_in = 1 ;
const puit4_e28_rate_in = 1 ;
const puit4_e29_rate_in = 1 ;

--**************** Init Channel ****************--

const e1_I = 1 ;
const e2_I = 0 ;
const e3_I = 0 ;
const e4_I = 0 ;
const e5_I = 0 ;
const e6_I = 1 ;
const e7_I = 0 ;
const e8_I = 0 ;
const e11_I = 0 ;
const e16_I = 0 ;
const e17_I = 1 ;
const e21_I = 0 ;
const e22_I = 0 ;
const e28_I = 0 ;
const e29_I = 0 ;


--**************** Nodes Declaration ****************--

node P1(e1 :int) returns (e1_C, e2_P, e21_P :int; P1nbrFired: int );

var
P1nbrEnd: int;
let
P1nbrFired= if P1DoFire(e1,1) then 1
		else 0;

P1nbrEnd= 0 -> pre (P1nbrFired);



(e1_C) = ((P1nbrFired * P1_e1_rate_in));

(e2_P, e21_P) = ((P1nbrEnd * P1_e2_rate_out), (P1nbrEnd * P1_e21_rate_out));

tel;
------------------
node P1DoFire(e1 :int; times: int) returns ( yes: bool);
let

yes = if  (e1>=  (times * P1_e1_rate_in)) 
	then true 
	else false;

tel;
------------------
node W1(e2, e6 :int) returns (e2_C, e6_C, e3_P, e5_P :int; W1nbrFired: int );

var
W1nbrEnd: int;
let
W1nbrFired= if W1DoFire(e2, e6,1) then 1
		else 0;

W1nbrEnd= 0 -> pre (W1nbrFired);



(e2_C, e6_C) = ((W1nbrFired * W1_e2_rate_in), (W1nbrFired * W1_e6_rate_in));

(e3_P, e5_P) = ((W1nbrEnd * W1_e3_rate_out), (W1nbrEnd * W1_e5_rate_out));

tel;
------------------
node W1DoFire(e2, e6 :int; times: int) returns ( yes: bool);
let

yes = if  (e2>=  (times * W1_e2_rate_in)) 
	and  (e6>=  (times * W1_e6_rate_in)) 
	then true 
	else false;

tel;
------------------
node P2(e3 :int) returns (e3_C, e4_P :int; P2nbrFired: int );

var
P2nbrEnd: int;
let
P2nbrFired= if P2DoFire(e3,1) then 1
		else 0;

P2nbrEnd= 0 -> pre (P2nbrFired);



(e3_C) = ((P2nbrFired * P2_e3_rate_in));

(e4_P) = ((P2nbrEnd * P2_e4_rate_out));

tel;
------------------
node P2DoFire(e3 :int; times: int) returns ( yes: bool);
let

yes = if  (e3>=  (times * P2_e3_rate_in)) 
	then true 
	else false;

tel;
------------------
node W2(e4, e7 :int) returns (e4_C, e7_C, e1_P, e8_P :int; W2nbrFired: int );

var
W2nbrEnd: int;
let
W2nbrFired= if W2DoFire(e4, e7,1) then 1
		else 0;

W2nbrEnd= 0 -> pre (W2nbrFired);



(e4_C, e7_C) = ((W2nbrFired * W2_e4_rate_in), (W2nbrFired * W2_e7_rate_in));

(e1_P, e8_P) = ((W2nbrEnd * W2_e1_rate_out), (W2nbrEnd * W2_e8_rate_out));

tel;
------------------
node W2DoFire(e4, e7 :int; times: int) returns ( yes: bool);
let

yes = if  (e4>=  (times * W2_e4_rate_in)) 
	and  (e7>=  (times * W2_e7_rate_in)) 
	then true 
	else false;

tel;
------------------
node R1(e5, e17 :int) returns (e5_C, e17_C, e7_P, e11_P, e28_P :int; R1nbrFired: int );

var
R1nbrEnd: int;
let
R1nbrFired= if R1DoFire(e5, e17,2) then 2
		else if R1DoFire(e5, e17,1) then 1
		else 0;

R1nbrEnd= 0 -> pre (R1nbrFired);



(e5_C, e17_C) = ((R1nbrFired * R1_e5_rate_in), (R1nbrFired * R1_e17_rate_in));

(e7_P, e11_P, e28_P) = ((R1nbrEnd * R1_e7_rate_out), (R1nbrEnd * R1_e11_rate_out), (R1nbrEnd * R1_e28_rate_out));

tel;
------------------
node R1DoFire(e5, e17 :int; times: int) returns ( yes: bool);
let

yes = if  (e5>=  (times * R1_e5_rate_in)) 
	and  (e17>=  (times * R1_e17_rate_in)) 
	then true 
	else false;

tel;
------------------
node R2(e11, e8 :int) returns (e11_C, e8_C, e6_P, e16_P, e29_P :int; R2nbrFired: int );

var
R2nbrEnd: int;
let
R2nbrFired= if R2DoFire(e11, e8,2) then 2
		else if R2DoFire(e11, e8,1) then 1
		else 0;

R2nbrEnd= 0 -> pre (R2nbrFired);



(e11_C, e8_C) = ((R2nbrFired * R2_e11_rate_in), (R2nbrFired * R2_e8_rate_in));

(e6_P, e16_P, e29_P) = ((R2nbrEnd * R2_e6_rate_out), (R2nbrEnd * R2_e16_rate_out), (R2nbrEnd * R2_e29_rate_out));

tel;
------------------
node R2DoFire(e11, e8 :int; times: int) returns ( yes: bool);
let

yes = if  (e11>=  (times * R2_e11_rate_in)) 
	and  (e8>=  (times * R2_e8_rate_in)) 
	then true 
	else false;

tel;
------------------
node C(e16 :int) returns (e16_C, e17_P, e22_P :int; CnbrFired: int );

var
CnbrEnd: int;
let
CnbrFired= if CDoFire(e16,2) then 2
		else if CDoFire(e16,1) then 1
		else 0;

CnbrEnd= 0 -> pre (CnbrFired);



(e16_C) = ((CnbrFired * C_e16_rate_in));

(e17_P, e22_P) = ((CnbrEnd * C_e17_rate_out), (CnbrEnd * C_e22_rate_out));

tel;
------------------
node CDoFire(e16 :int; times: int) returns ( yes: bool);
let

yes = if  (e16>=  (times * C_e16_rate_in)) 
	then true 
	else false;

tel;
------------------
node puit1(e21, e22 :int) returns (e21_C, e22_C :int; puit1nbrFired: int );

var
puit1nbrEnd: int;
let
puit1nbrFired= if puit1DoFire(e21, e22,1) then 1
		else 0;

puit1nbrEnd= 0 -> pre (puit1nbrFired);



(e21_C, e22_C) = ((puit1nbrFired * puit1_e21_rate_in), (puit1nbrFired * puit1_e22_rate_in));

tel;
------------------
node puit1DoFire(e21, e22 :int; times: int) returns ( yes: bool);
let

yes = if  (e21>=  (times * puit1_e21_rate_in)) 
	and  (e22>=  (times * puit1_e22_rate_in)) 
	then true 
	else false;

tel;
------------------
node puit4(e28, e29 :int) returns (e28_C, e29_C :int; puit4nbrFired: int );

var
puit4nbrEnd: int;
let
puit4nbrFired= if puit4DoFire(e28, e29,1) then 1
		else 0;

puit4nbrEnd= 0 -> pre (puit4nbrFired);



(e28_C, e29_C) = ((puit4nbrFired * puit4_e28_rate_in), (puit4nbrFired * puit4_e29_rate_in));

tel;
------------------
node puit4DoFire(e28, e29 :int; times: int) returns ( yes: bool);
let

yes = if  (e28>=  (times * puit4_e28_rate_in)) 
	and  (e29>=  (times * puit4_e29_rate_in)) 
	then true 
	else false;

tel;
------------------

--**************** Node Top Declaration ****************--

node top (_: bool) returns (e1, e2, e3, e4, e5, e6, e7, e8, e11, e16, e17, e21, e22, e28, e29, P1nbrFired, W1nbrFired, P2nbrFired, W2nbrFired, R1nbrFired, R2nbrFired, CnbrFired, puit1nbrFired, puit4nbrFired: int);

var

e1_C, e1_P: int; 
e2_C, e2_P: int; 
e3_C, e3_P: int; 
e4_C, e4_P: int; 
e5_C, e5_P: int; 
e6_C, e6_P: int; 
e7_C, e7_P: int; 
e8_C, e8_P: int; 
e11_C, e11_P: int; 
e16_C, e16_P: int; 
e17_C, e17_P: int; 
e21_C, e21_P: int; 
e22_C, e22_P: int; 
e28_C, e28_P: int; 
e29_C, e29_P: int; 
noDeadlock : bool;

let

e1 = e1_I -> pre ( e1-e1_C)+ e1_P;
e2 = e2_I -> pre ( e2-e2_C)+ e2_P;
e3 = e3_I -> pre ( e3-e3_C)+ e3_P;
e4 = e4_I -> pre ( e4-e4_C)+ e4_P;
e5 = e5_I -> pre ( e5-e5_C)+ e5_P;
e6 = e6_I -> pre ( e6-e6_C)+ e6_P;
e7 = e7_I -> pre ( e7-e7_C)+ e7_P;
e8 = e8_I -> pre ( e8-e8_C)+ e8_P;
e11 = e11_I -> pre ( e11-e11_C)+ e11_P;
e16 = e16_I -> pre ( e16-e16_C)+ e16_P;
e17 = e17_I -> pre ( e17-e17_C)+ e17_P;
e21 = e21_I -> pre ( e21-e21_C)+ e21_P;
e22 = e22_I -> pre ( e22-e22_C)+ e22_P;
e28 = e28_I -> pre ( e28-e28_C)+ e28_P;
e29 = e29_I -> pre ( e29-e29_C)+ e29_P;



(e1_C, e2_P, e21_P, P1nbrFired) = P1(e1);
(e2_C, e6_C, e3_P, e5_P, W1nbrFired) = W1(e2, e6);
(e3_C, e4_P, P2nbrFired) = P2(e3);
(e4_C, e7_C, e1_P, e8_P, W2nbrFired) = W2(e4, e7);
(e5_C, e17_C, e7_P, e11_P, e28_P, R1nbrFired) = R1(e5, e17);
(e11_C, e8_C, e6_P, e16_P, e29_P, R2nbrFired) = R2(e11, e8);
(e16_C, e17_P, e22_P, CnbrFired) = C(e16);
(e21_C, e22_C, puit1nbrFired) = puit1(e21, e22);
(e28_C, e29_C, puit4nbrFired) = puit4(e28, e29);


noDeadlock = ( P1nbrFired >= 1) 
	or  ( W1nbrFired >= 1) 
	or  ( P2nbrFired >= 1) 
	or  ( W2nbrFired >= 1) 
	or  ( R1nbrFired >= 1) 
	or  ( R2nbrFired >= 1) 
	or  ( CnbrFired >= 1) 
	or  ( puit1nbrFired >= 1) 
	or  ( puit4nbrFired >= 1);
--%MAIN;

--%PROPERTY  "Deadlock free "  noDeadlock;


tel;


