--** This lustre code is generated automatically on 04 sept. 2020 09:55:55 PM
--**It corresponds to a translation to Lustre of the Untimed SDFG model  of the design "Memory Access" 




--**************** Const Rates ****************--

const ri_e1_rate_out = 3 ;
const ri_e8_rate_in = 3 ;
const ri_e13_rate_out = 1 ;
const ri_e14_rate_out = 1 ;
const m1_e8_rate_out = 1 ;
const m1_e1_rate_in = 1 ;
const m1_e2_rate_out = 1 ;
const m1_e12_rate_in = 1 ;
const m1_e7_rate_out = 1 ;
const m1_e4_rate_in = 1 ;
const m2_e2_rate_in = 1 ;
const m2_e12_rate_out = 1 ;
const m2_e3_rate_out = 1 ;
const m2_e6_rate_in = 1 ;
const a1_e3_rate_in = 1 ;
const a1_e7_rate_in = 1 ;
const a1_e4_rate_out = 1 ;
const a1_e9_rate_in = 1 ;
const a1_e10_rate_out = 1 ;
const a2_e6_rate_out = 1 ;
const a2_e10_rate_in = 1 ;
const a2_e9_rate_out = 1 ;
const a2_e11_rate_in = 1 ;
const a2_e5_rate_out = 1 ;
const r0_e11_rate_out = 3 ;
const r0_e5_rate_in = 3 ;
const sink1_e13_rate_in = 1 ;
const sink1_e15_rate_out = 1 ;
const sink2_e14_rate_in = 1 ;
const sink2_e16_rate_out = 1 ;

--**************** Init Channel ****************--

const e1_I = 0 ;
const e8_I = 3 ;
const e2_I = 0 ;
const e12_I = 1 ;
const e3_I = 1 ;
const e6_I = 0 ;
const e7_I = 1 ;
const e4_I = 0 ;
const e9_I = 1 ;
const e10_I = 0 ;
const e11_I = 3 ;
const e5_I = 0 ;
const e13_I = 0 ;
const e14_I = 0 ;

const e15_I = 0; 
const e16_I = 0; 

--**************** Nodes Declaration ****************--

node ri(e8 :int) returns (e1_P, e8_C, e13_P, e14_P :int; rinbrFired: int );

var
rinbrEnd: int;
let
rinbrFired= if riDoFire(e8,3) then 3
		else if riDoFire(e8,2) then 2
		else if riDoFire(e8,1) then 1
		else 0;

rinbrEnd= 0 -> pre (rinbrFired);



(e8_C) = ((rinbrFired * ri_e8_rate_in));

(e1_P, e13_P, e14_P) = ((rinbrEnd * ri_e1_rate_out), (rinbrEnd * ri_e13_rate_out), (rinbrEnd * ri_e14_rate_out));

tel;
------------------
node riDoFire(e8 :int; times: int) returns ( yes: bool);
let

yes = if  (e8>=  (times * ri_e8_rate_in)) 
	then true 
	else false;

tel;
------------------
node m1(e1, e12, e4 :int) returns (e8_P, e1_C, e2_P, e12_C, e7_P, e4_C :int; m1nbrFired: int );

var
m1nbrEnd: int;
let
m1nbrFired= if m1DoFire(e1, e12, e4,3) then 3
		else if m1DoFire(e1, e12, e4,2) then 2
		else if m1DoFire(e1, e12, e4,1) then 1
		else 0;

m1nbrEnd= 0 -> pre (m1nbrFired);



(e1_C, e12_C, e4_C) = ((m1nbrFired * m1_e1_rate_in), (m1nbrFired * m1_e12_rate_in), (m1nbrFired * m1_e4_rate_in));

(e8_P, e2_P, e7_P) = ((m1nbrEnd * m1_e8_rate_out), (m1nbrEnd * m1_e2_rate_out), (m1nbrEnd * m1_e7_rate_out));

tel;
------------------
node m1DoFire(e1, e12, e4 :int; times: int) returns ( yes: bool);
let

yes = if  (e1>=  (times * m1_e1_rate_in)) 
	and  (e12>=  (times * m1_e12_rate_in)) 
	and  (e4>=  (times * m1_e4_rate_in)) 
	then true 
	else false;

tel;
------------------
node m2(e2, e6 :int) returns (e2_C, e12_P, e3_P, e6_C :int; m2nbrFired: int );

var
m2nbrEnd: int;
let
m2nbrFired= if m2DoFire(e2, e6,3) then 3
		else if m2DoFire(e2, e6,2) then 2
		else if m2DoFire(e2, e6,1) then 1
		else 0;

m2nbrEnd= 0 -> pre (m2nbrFired);



(e2_C, e6_C) = ((m2nbrFired * m2_e2_rate_in), (m2nbrFired * m2_e6_rate_in));

(e12_P, e3_P) = ((m2nbrEnd * m2_e12_rate_out), (m2nbrEnd * m2_e3_rate_out));

tel;
------------------
node m2DoFire(e2, e6 :int; times: int) returns ( yes: bool);
let

yes = if  (e2>=  (times * m2_e2_rate_in)) 
	and  (e6>=  (times * m2_e6_rate_in)) 
	then true 
	else false;

tel;
------------------
node a1(e3, e7, e9 :int) returns (e3_C, e7_C, e4_P, e9_C, e10_P :int; a1nbrFired: int );

var
a1nbrEnd: int;
let
a1nbrFired= if a1DoFire(e3, e7, e9,3) then 3
		else if a1DoFire(e3, e7, e9,2) then 2
		else if a1DoFire(e3, e7, e9,1) then 1
		else 0;

a1nbrEnd= 0 -> pre (a1nbrFired);



(e3_C, e7_C, e9_C) = ((a1nbrFired * a1_e3_rate_in), (a1nbrFired * a1_e7_rate_in), (a1nbrFired * a1_e9_rate_in));

(e4_P, e10_P) = ((a1nbrEnd * a1_e4_rate_out), (a1nbrEnd * a1_e10_rate_out));

tel;
------------------
node a1DoFire(e3, e7, e9 :int; times: int) returns ( yes: bool);
let

yes = if  (e3>=  (times * a1_e3_rate_in)) 
	and  (e7>=  (times * a1_e7_rate_in)) 
	and  (e9>=  (times * a1_e9_rate_in)) 
	then true 
	else false;

tel;
------------------
node a2(e10, e11 :int) returns (e6_P, e10_C, e9_P, e11_C, e5_P :int; a2nbrFired: int );

var
a2nbrEnd: int;
let
a2nbrFired= if a2DoFire(e10, e11,3) then 3
		else if a2DoFire(e10, e11,2) then 2
		else if a2DoFire(e10, e11,1) then 1
		else 0;

a2nbrEnd= 0 -> pre (a2nbrFired);



(e10_C, e11_C) = ((a2nbrFired * a2_e10_rate_in), (a2nbrFired * a2_e11_rate_in));

(e6_P, e9_P, e5_P) = ((a2nbrEnd * a2_e6_rate_out), (a2nbrEnd * a2_e9_rate_out), (a2nbrEnd * a2_e5_rate_out));

tel;
------------------
node a2DoFire(e10, e11 :int; times: int) returns ( yes: bool);
let

yes = if  (e10>=  (times * a2_e10_rate_in)) 
	and  (e11>=  (times * a2_e11_rate_in)) 
	then true 
	else false;

tel;
------------------
node r0(e5 :int) returns (e11_P, e5_C :int; r0nbrFired: int );

var
r0nbrEnd: int;
let
r0nbrFired= if r0DoFire(e5,3) then 3
		else if r0DoFire(e5,2) then 2
		else if r0DoFire(e5,1) then 1
		else 0;

r0nbrEnd= 0 -> pre (r0nbrFired);



(e5_C) = ((r0nbrFired * r0_e5_rate_in));

(e11_P) = ((r0nbrEnd * r0_e11_rate_out));

tel;
------------------
node r0DoFire(e5 :int; times: int) returns ( yes: bool);
let

yes = if  (e5>=  (times * r0_e5_rate_in)) 
	then true 
	else false;

tel;
------------------
node sink1(e13 :int) returns (e13_C, e15_P :int; sink1nbrFired: int );

var
sink1nbrEnd: int;
let
sink1nbrFired= if sink1DoFire(e13,1) then 1
		else 0;

sink1nbrEnd= 0 -> pre (sink1nbrFired);



(e13_C) = ((sink1nbrFired * sink1_e13_rate_in));

(e15_P) = ((sink1nbrEnd * sink1_e15_rate_out));

tel;
------------------
node sink1DoFire(e13 :int; times: int) returns ( yes: bool);
let

yes = if  (e13>=  (times * sink1_e13_rate_in)) 
	then true 
	else false;

tel;
------------------
node sink2(e14 :int) returns (e14_C, e16_P :int; sink2nbrFired: int );

var
sink2nbrEnd: int;
let
sink2nbrFired= if sink2DoFire(e14,1) then 1
		else 0;

sink2nbrEnd= 0 -> pre (sink2nbrFired);



(e14_C) = ((sink2nbrFired * sink2_e14_rate_in));

(e16_P) = ((sink2nbrEnd * sink2_e16_rate_out));

tel;
------------------
node sink2DoFire(e14 :int; times: int) returns ( yes: bool);
let

yes = if  (e14>=  (times * sink2_e14_rate_in)) 
	then true 
	else false;

tel;
------------------

--**************** Node Top Declaration ****************--

node top (_: bool) returns (e1, e8, e2, e12, e3, e6, e7, e4, e9, e10, e11, e5, e13, e14, e15, e16, rinbrFired, m1nbrFired, m2nbrFired, a1nbrFired, a2nbrFired, r0nbrFired, sink1nbrFired, sink2nbrFired: int);

var

e1_C, e1_P: int; 
e8_C, e8_P: int; 
e2_C, e2_P: int; 
e12_C, e12_P: int; 
e3_C, e3_P: int; 
e6_C, e6_P: int; 
e7_C, e7_P: int; 
e4_C, e4_P: int; 
e9_C, e9_P: int; 
e10_C, e10_P: int; 
e11_C, e11_P: int; 
e5_C, e5_P: int; 
e13_C, e13_P: int; 
e14_C, e14_P: int; 
e15_P : int;
e16_P : int;
noDeadlock : bool;

let

e1 = e1_I -> pre ( e1-e1_C)+ e1_P;
e8 = e8_I -> pre ( e8-e8_C)+ e8_P;
e2 = e2_I -> pre ( e2-e2_C)+ e2_P;
e12 = e12_I -> pre ( e12-e12_C)+ e12_P;
e3 = e3_I -> pre ( e3-e3_C)+ e3_P;
e6 = e6_I -> pre ( e6-e6_C)+ e6_P;
e7 = e7_I -> pre ( e7-e7_C)+ e7_P;
e4 = e4_I -> pre ( e4-e4_C)+ e4_P;
e9 = e9_I -> pre ( e9-e9_C)+ e9_P;
e10 = e10_I -> pre ( e10-e10_C)+ e10_P;
e11 = e11_I -> pre ( e11-e11_C)+ e11_P;
e5 = e5_I -> pre ( e5-e5_C)+ e5_P;
e13 = e13_I -> pre ( e13-e13_C)+ e13_P;
e14 = e14_I -> pre ( e14-e14_C)+ e14_P;


e15 = e15_I -> pre e15+ e15_P;
e16 = e16_I -> pre e16+ e16_P;

(e1_P, e8_C, e13_P, e14_P, rinbrFired) = ri(e8);
(e8_P, e1_C, e2_P, e12_C, e7_P, e4_C, m1nbrFired) = m1(e1, e12, e4);
(e2_C, e12_P, e3_P, e6_C, m2nbrFired) = m2(e2, e6);
(e3_C, e7_C, e4_P, e9_C, e10_P, a1nbrFired) = a1(e3, e7, e9);
(e6_P, e10_C, e9_P, e11_C, e5_P, a2nbrFired) = a2(e10, e11);
(e11_P, e5_C, r0nbrFired) = r0(e5);
(e13_C, e15_P, sink1nbrFired) = sink1(e13);
(e14_C, e16_P, sink2nbrFired) = sink2(e14);


noDeadlock = ( rinbrFired >= 1) 
	or  ( m1nbrFired >= 1) 
	or  ( m2nbrFired >= 1) 
	or  ( a1nbrFired >= 1) 
	or  ( a2nbrFired >= 1) 
	or  ( r0nbrFired >= 1) 
	or  ( sink1nbrFired >= 1) 
	or  ( sink2nbrFired >= 1);
--%MAIN;

--%PROPERTY  "Deadlock free "  noDeadlock;


tel;


