--** This lustre code is generated automatically on 28 aoÃ»t 2020 10:25:45 AM
--** It corresponds to the translation of an SDFG model (Memory Access equivalence)  to Lustre. This version produce a Lustre code having a reduced number of steps.




--**************** Const Rates ****************--

const ri_e1_rate_out = 3;
const ri_e8_rate_in = 3;
const m1_e8_rate_out = 1;
const m1_e1_rate_in = 1;
const m1_e2_rate_out = 1;
const m1_e12_rate_in = 1;
const m1_e7_rate_out = 1;
const m1_e4_rate_in = 1;
const m2_e2_rate_in = 1;
const m2_e12_rate_out = 1;
const m2_e3_rate_out = 1;
const m2_e6_rate_in = 1;
const a1_e3_rate_in = 1;
const a1_e7_rate_in = 1;
const a1_e4_rate_out = 1;
const a1_e9_rate_in = 1;
const a1_e10_rate_out = 1;
const a2_e6_rate_out = 1;
const a2_e10_rate_in = 1;
const a2_e9_rate_out = 1;
const a2_e11_rate_in = 1;
const a2_e5_rate_out = 1;
const r0_e11_rate_out = 3;
const r0_e5_rate_in = 3;
const a11_ea11x_rate_out = 1;
const a11_ea11y_rate_out = 1;
const a11_ea32x_rate_in = 1;
const a11_em31x_rate_in = 1;
const a11_em32x_rate_in = 1;
const a12_ea12x_rate_out = 1;
const a12_ea12y_rate_out = 1;
const a12_ea11x_rate_in = 1;
const a21_ea21x_rate_out = 1;
const a21_ea21y_rate_out = 1;
const a21_ea12x_rate_in = 1;
const a21_em11x_rate_in = 1;
const a21_em12x_rate_in = 1;
const a22_ea22x_rate_out = 1;
const a22_ea22y_rate_out = 1;
const a22_ea21x_rate_in = 1;
const a31_ea31x_rate_out = 1;
const a31_ea31y_rate_out = 1;
const a31_ea22x_rate_in = 1;
const a31_em21x_rate_in = 1;
const a31_em22x_rate_in = 1;
const a32_ea32x_rate_out = 1;
const a32_ea32y_rate_out = 1;
const a32_ea31x_rate_in = 1;
const m11_em11x_rate_out = 1;
const m11_em11y_rate_out = 1;
const m11_ea11y_rate_in = 1;
const m11_em32y_rate_in = 1;
const m12_em12x_rate_out = 1;
const m12_em12y_rate_out = 1;
const m12_ea12y_rate_in = 1;
const m12_em11y_rate_in = 1;
const m21_em21x_rate_out = 1;
const m21_em21y_rate_out = 1;
const m21_ea21y_rate_in = 1;
const m21_em12y_rate_in = 1;
const m22_em22x_rate_out = 1;
const m22_em22y_rate_out = 1;
const m22_ea22y_rate_in = 1;
const m22_em21y_rate_in = 1;
const m31_em31x_rate_out = 1;
const m31_em31y_rate_out = 1;
const m31_ea31y_rate_in = 1;
const m31_em22y_rate_in = 1;
const m32_em32x_rate_out = 1;
const m32_em32y_rate_out = 1;
const m32_ea32y_rate_in = 1;
const m32_em31y_rate_in = 1;

--****************  Actors' durations ****************--

const ri_maxStages  = 1;
const ri_duration  = 1;
const m1_maxStages  = 1;
const m1_duration  = 4;
const m2_maxStages  = 1;
const m2_duration  = 2;
const a1_maxStages  = 1;
const a1_duration  = 3;
const a2_maxStages  = 1;
const a2_duration  = 2;
const r0_maxStages  = 1;
const r0_duration  = 1;
const a11_maxStages  = 1;
const a11_duration  = 3;
const a12_maxStages  = 1;
const a12_duration  = 2;
const a21_maxStages  = 1;
const a21_duration  = 3;
const a22_maxStages  = 1;
const a22_duration  = 2;
const a31_maxStages  = 1;
const a31_duration  = 3;
const a32_maxStages  = 1;
const a32_duration  = 2;
const m11_maxStages  = 1;
const m11_duration  = 4;
const m12_maxStages  = 1;
const m12_duration  = 2;
const m21_maxStages  = 1;
const m21_duration  = 4;
const m22_maxStages  = 1;
const m22_duration  = 2;
const m31_maxStages  = 1;
const m31_duration  = 4;
const m32_maxStages  = 1;
const m32_duration  = 2;
const  maxDuration  = 4;

--**************** Init Channel ****************--

const e1_I = 0;
const e8_I = 3;
const e2_I = 0;
const e12_I = 1;
const e3_I = 1;
const e6_I = 0;
const e7_I = 1;
const e4_I = 0;
const e9_I = 1;
const e10_I = 0;
const e11_I = 3;
const e5_I = 0;
const ea11x_I = 0;
const ea11y_I = 0;
const ea12x_I = 0;
const ea12y_I = 0;
const ea21x_I = 0;
const ea21y_I = 0;
const ea22x_I = 0;
const ea22y_I = 0;
const ea31x_I = 0;
const ea31y_I = 0;
const ea32x_I = 1;
const ea32y_I = 0;
const em11x_I = 0;
const em11y_I = 0;
const em12x_I = 0;
const em12y_I = 0;
const em21x_I = 0;
const em21y_I = 0;
const em22x_I = 0;
const em22y_I = 0;
const em31x_I = 1;
const em31y_I = 0;
const em32x_I = 1;
const em32y_I = 1;


--************************************************--
--******* Translation of Actor: ri***************--
--************************************************--
node ri(clock, e8 :int) returns (nextClock, e1_P, e8_C :int; nbrFired, nbrEnd: int );

let
nbrFired= if riDoFire(e8,1) then 1
		else 0;

(e8_C) = ((nbrFired * ri_e8_rate_in));

nbrEnd = 0 -> pre nbrFired  ;
(e1_P) = ((nbrEnd * ri_e1_rate_out));

nextClock = if (nbrFired = 0) then maxDuration else 1;
tel;
------------------subnode Dofire of Actorri-----------------
node riDoFire(e8,times:int) returns ( yes: bool);
let

yes = if (e8>=  (times * ri_e8_rate_in)) 
	then true 
	else false;

tel;

--************************************************--
--******* Translation of Actor: m1***************--
--************************************************--
node m1(clock, e1, e12, e4 :int) returns (nextClock, e8_P, e1_C, e2_P, e12_C, e7_P, e4_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if m1DoFire(e1, e12, e4,1) then 1
		else 0;

(e1_C, e12_C, e4_C) = ((nbrFired * m1_e1_rate_in), (nbrFired * m1_e12_rate_in), (nbrFired * m1_e4_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = m1Stage (clock, stage, 1, nbrFired ); 
(e8_P, e2_P, e7_P) = ((nbrEnd * m1_e8_rate_out), (nbrEnd * m1_e2_rate_out), (nbrEnd * m1_e7_rate_out));

tel;
------------------subnode Dofire of Actorm1-----------------
node m1DoFire(e1, e12, e4,times:int) returns ( yes: bool);
let

yes = if (e1>=  (times * m1_e1_rate_in)) 
	and (e12>=  (times * m1_e12_rate_in)) 
	and (e4>=  (times * m1_e4_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorm1-----------------
node m1Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then m1_duration  else maxDuration -> 
          if  selected then m1_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: m2***************--
--************************************************--
node m2(clock, e2, e6 :int) returns (nextClock, e2_C, e12_P, e3_P, e6_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if m2DoFire(e2, e6,1) then 1
		else 0;

(e2_C, e6_C) = ((nbrFired * m2_e2_rate_in), (nbrFired * m2_e6_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = m2Stage (clock, stage, 1, nbrFired ); 
(e12_P, e3_P) = ((nbrEnd * m2_e12_rate_out), (nbrEnd * m2_e3_rate_out));

tel;
------------------subnode Dofire of Actorm2-----------------
node m2DoFire(e2, e6,times:int) returns ( yes: bool);
let

yes = if (e2>=  (times * m2_e2_rate_in)) 
	and (e6>=  (times * m2_e6_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorm2-----------------
node m2Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then m2_duration  else maxDuration -> 
          if  selected then m2_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: a1***************--
--************************************************--
node a1(clock, e3, e7, e9 :int) returns (nextClock, e3_C, e7_C, e4_P, e9_C, e10_P :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if a1DoFire(e3, e7, e9,1) then 1
		else 0;

(e3_C, e7_C, e9_C) = ((nbrFired * a1_e3_rate_in), (nbrFired * a1_e7_rate_in), (nbrFired * a1_e9_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = a1Stage (clock, stage, 1, nbrFired ); 
(e4_P, e10_P) = ((nbrEnd * a1_e4_rate_out), (nbrEnd * a1_e10_rate_out));

tel;
------------------subnode Dofire of Actora1-----------------
node a1DoFire(e3, e7, e9,times:int) returns ( yes: bool);
let

yes = if (e3>=  (times * a1_e3_rate_in)) 
	and (e7>=  (times * a1_e7_rate_in)) 
	and (e9>=  (times * a1_e9_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actora1-----------------
node a1Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then a1_duration  else maxDuration -> 
          if  selected then a1_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: a2***************--
--************************************************--
node a2(clock, e10, e11 :int) returns (nextClock, e6_P, e10_C, e9_P, e11_C, e5_P :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if a2DoFire(e10, e11,1) then 1
		else 0;

(e10_C, e11_C) = ((nbrFired * a2_e10_rate_in), (nbrFired * a2_e11_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = a2Stage (clock, stage, 1, nbrFired ); 
(e6_P, e9_P, e5_P) = ((nbrEnd * a2_e6_rate_out), (nbrEnd * a2_e9_rate_out), (nbrEnd * a2_e5_rate_out));

tel;
------------------subnode Dofire of Actora2-----------------
node a2DoFire(e10, e11,times:int) returns ( yes: bool);
let

yes = if (e10>=  (times * a2_e10_rate_in)) 
	and (e11>=  (times * a2_e11_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actora2-----------------
node a2Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then a2_duration  else maxDuration -> 
          if  selected then a2_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: r0***************--
--************************************************--
node r0(clock, e5 :int) returns (nextClock, e11_P, e5_C :int; nbrFired, nbrEnd: int );

let
nbrFired= if r0DoFire(e5,1) then 1
		else 0;

(e5_C) = ((nbrFired * r0_e5_rate_in));

nbrEnd = 0 -> pre nbrFired  ;
(e11_P) = ((nbrEnd * r0_e11_rate_out));

nextClock = if (nbrFired = 0) then maxDuration else 1;
tel;
------------------subnode Dofire of Actorr0-----------------
node r0DoFire(e5,times:int) returns ( yes: bool);
let

yes = if (e5>=  (times * r0_e5_rate_in)) 
	then true 
	else false;

tel;

--************************************************--
--******* Translation of Actor: a11***************--
--************************************************--
node a11(clock, ea32x, em31x, em32x :int) returns (nextClock, ea11x_P, ea11y_P, ea32x_C, em31x_C, em32x_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if a11DoFire(ea32x, em31x, em32x,1) then 1
		else 0;

(ea32x_C, em31x_C, em32x_C) = ((nbrFired * a11_ea32x_rate_in), (nbrFired * a11_em31x_rate_in), (nbrFired * a11_em32x_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = a11Stage (clock, stage, 1, nbrFired ); 
(ea11x_P, ea11y_P) = ((nbrEnd * a11_ea11x_rate_out), (nbrEnd * a11_ea11y_rate_out));

tel;
------------------subnode Dofire of Actora11-----------------
node a11DoFire(ea32x, em31x, em32x,times:int) returns ( yes: bool);
let

yes = if (ea32x>=  (times * a11_ea32x_rate_in)) 
	and (em31x>=  (times * a11_em31x_rate_in)) 
	and (em32x>=  (times * a11_em32x_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actora11-----------------
node a11Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then a11_duration  else maxDuration -> 
          if  selected then a11_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: a12***************--
--************************************************--
node a12(clock, ea11x :int) returns (nextClock, ea12x_P, ea12y_P, ea11x_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if a12DoFire(ea11x,1) then 1
		else 0;

(ea11x_C) = ((nbrFired * a12_ea11x_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = a12Stage (clock, stage, 1, nbrFired ); 
(ea12x_P, ea12y_P) = ((nbrEnd * a12_ea12x_rate_out), (nbrEnd * a12_ea12y_rate_out));

tel;
------------------subnode Dofire of Actora12-----------------
node a12DoFire(ea11x,times:int) returns ( yes: bool);
let

yes = if (ea11x>=  (times * a12_ea11x_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actora12-----------------
node a12Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then a12_duration  else maxDuration -> 
          if  selected then a12_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: a21***************--
--************************************************--
node a21(clock, ea12x, em11x, em12x :int) returns (nextClock, ea21x_P, ea21y_P, ea12x_C, em11x_C, em12x_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if a21DoFire(ea12x, em11x, em12x,1) then 1
		else 0;

(ea12x_C, em11x_C, em12x_C) = ((nbrFired * a21_ea12x_rate_in), (nbrFired * a21_em11x_rate_in), (nbrFired * a21_em12x_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = a21Stage (clock, stage, 1, nbrFired ); 
(ea21x_P, ea21y_P) = ((nbrEnd * a21_ea21x_rate_out), (nbrEnd * a21_ea21y_rate_out));

tel;
------------------subnode Dofire of Actora21-----------------
node a21DoFire(ea12x, em11x, em12x,times:int) returns ( yes: bool);
let

yes = if (ea12x>=  (times * a21_ea12x_rate_in)) 
	and (em11x>=  (times * a21_em11x_rate_in)) 
	and (em12x>=  (times * a21_em12x_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actora21-----------------
node a21Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then a21_duration  else maxDuration -> 
          if  selected then a21_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: a22***************--
--************************************************--
node a22(clock, ea21x :int) returns (nextClock, ea22x_P, ea22y_P, ea21x_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if a22DoFire(ea21x,1) then 1
		else 0;

(ea21x_C) = ((nbrFired * a22_ea21x_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = a22Stage (clock, stage, 1, nbrFired ); 
(ea22x_P, ea22y_P) = ((nbrEnd * a22_ea22x_rate_out), (nbrEnd * a22_ea22y_rate_out));

tel;
------------------subnode Dofire of Actora22-----------------
node a22DoFire(ea21x,times:int) returns ( yes: bool);
let

yes = if (ea21x>=  (times * a22_ea21x_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actora22-----------------
node a22Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then a22_duration  else maxDuration -> 
          if  selected then a22_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: a31***************--
--************************************************--
node a31(clock, ea22x, em21x, em22x :int) returns (nextClock, ea31x_P, ea31y_P, ea22x_C, em21x_C, em22x_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if a31DoFire(ea22x, em21x, em22x,1) then 1
		else 0;

(ea22x_C, em21x_C, em22x_C) = ((nbrFired * a31_ea22x_rate_in), (nbrFired * a31_em21x_rate_in), (nbrFired * a31_em22x_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = a31Stage (clock, stage, 1, nbrFired ); 
(ea31x_P, ea31y_P) = ((nbrEnd * a31_ea31x_rate_out), (nbrEnd * a31_ea31y_rate_out));

tel;
------------------subnode Dofire of Actora31-----------------
node a31DoFire(ea22x, em21x, em22x,times:int) returns ( yes: bool);
let

yes = if (ea22x>=  (times * a31_ea22x_rate_in)) 
	and (em21x>=  (times * a31_em21x_rate_in)) 
	and (em22x>=  (times * a31_em22x_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actora31-----------------
node a31Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then a31_duration  else maxDuration -> 
          if  selected then a31_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: a32***************--
--************************************************--
node a32(clock, ea31x :int) returns (nextClock, ea32x_P, ea32y_P, ea31x_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if a32DoFire(ea31x,1) then 1
		else 0;

(ea31x_C) = ((nbrFired * a32_ea31x_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = a32Stage (clock, stage, 1, nbrFired ); 
(ea32x_P, ea32y_P) = ((nbrEnd * a32_ea32x_rate_out), (nbrEnd * a32_ea32y_rate_out));

tel;
------------------subnode Dofire of Actora32-----------------
node a32DoFire(ea31x,times:int) returns ( yes: bool);
let

yes = if (ea31x>=  (times * a32_ea31x_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actora32-----------------
node a32Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then a32_duration  else maxDuration -> 
          if  selected then a32_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: m11***************--
--************************************************--
node m11(clock, ea11y, em32y :int) returns (nextClock, em11x_P, em11y_P, ea11y_C, em32y_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if m11DoFire(ea11y, em32y,1) then 1
		else 0;

(ea11y_C, em32y_C) = ((nbrFired * m11_ea11y_rate_in), (nbrFired * m11_em32y_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = m11Stage (clock, stage, 1, nbrFired ); 
(em11x_P, em11y_P) = ((nbrEnd * m11_em11x_rate_out), (nbrEnd * m11_em11y_rate_out));

tel;
------------------subnode Dofire of Actorm11-----------------
node m11DoFire(ea11y, em32y,times:int) returns ( yes: bool);
let

yes = if (ea11y>=  (times * m11_ea11y_rate_in)) 
	and (em32y>=  (times * m11_em32y_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorm11-----------------
node m11Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then m11_duration  else maxDuration -> 
          if  selected then m11_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: m12***************--
--************************************************--
node m12(clock, ea12y, em11y :int) returns (nextClock, em12x_P, em12y_P, ea12y_C, em11y_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if m12DoFire(ea12y, em11y,1) then 1
		else 0;

(ea12y_C, em11y_C) = ((nbrFired * m12_ea12y_rate_in), (nbrFired * m12_em11y_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = m12Stage (clock, stage, 1, nbrFired ); 
(em12x_P, em12y_P) = ((nbrEnd * m12_em12x_rate_out), (nbrEnd * m12_em12y_rate_out));

tel;
------------------subnode Dofire of Actorm12-----------------
node m12DoFire(ea12y, em11y,times:int) returns ( yes: bool);
let

yes = if (ea12y>=  (times * m12_ea12y_rate_in)) 
	and (em11y>=  (times * m12_em11y_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorm12-----------------
node m12Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then m12_duration  else maxDuration -> 
          if  selected then m12_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: m21***************--
--************************************************--
node m21(clock, ea21y, em12y :int) returns (nextClock, em21x_P, em21y_P, ea21y_C, em12y_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if m21DoFire(ea21y, em12y,1) then 1
		else 0;

(ea21y_C, em12y_C) = ((nbrFired * m21_ea21y_rate_in), (nbrFired * m21_em12y_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = m21Stage (clock, stage, 1, nbrFired ); 
(em21x_P, em21y_P) = ((nbrEnd * m21_em21x_rate_out), (nbrEnd * m21_em21y_rate_out));

tel;
------------------subnode Dofire of Actorm21-----------------
node m21DoFire(ea21y, em12y,times:int) returns ( yes: bool);
let

yes = if (ea21y>=  (times * m21_ea21y_rate_in)) 
	and (em12y>=  (times * m21_em12y_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorm21-----------------
node m21Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then m21_duration  else maxDuration -> 
          if  selected then m21_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: m22***************--
--************************************************--
node m22(clock, ea22y, em21y :int) returns (nextClock, em22x_P, em22y_P, ea22y_C, em21y_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if m22DoFire(ea22y, em21y,1) then 1
		else 0;

(ea22y_C, em21y_C) = ((nbrFired * m22_ea22y_rate_in), (nbrFired * m22_em21y_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = m22Stage (clock, stage, 1, nbrFired ); 
(em22x_P, em22y_P) = ((nbrEnd * m22_em22x_rate_out), (nbrEnd * m22_em22y_rate_out));

tel;
------------------subnode Dofire of Actorm22-----------------
node m22DoFire(ea22y, em21y,times:int) returns ( yes: bool);
let

yes = if (ea22y>=  (times * m22_ea22y_rate_in)) 
	and (em21y>=  (times * m22_em21y_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorm22-----------------
node m22Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then m22_duration  else maxDuration -> 
          if  selected then m22_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: m31***************--
--************************************************--
node m31(clock, ea31y, em22y :int) returns (nextClock, em31x_P, em31y_P, ea31y_C, em22y_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if m31DoFire(ea31y, em22y,1) then 1
		else 0;

(ea31y_C, em22y_C) = ((nbrFired * m31_ea31y_rate_in), (nbrFired * m31_em22y_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = m31Stage (clock, stage, 1, nbrFired ); 
(em31x_P, em31y_P) = ((nbrEnd * m31_em31x_rate_out), (nbrEnd * m31_em31y_rate_out));

tel;
------------------subnode Dofire of Actorm31-----------------
node m31DoFire(ea31y, em22y,times:int) returns ( yes: bool);
let

yes = if (ea31y>=  (times * m31_ea31y_rate_in)) 
	and (em22y>=  (times * m31_em22y_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorm31-----------------
node m31Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then m31_duration  else maxDuration -> 
          if  selected then m31_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: m32***************--
--************************************************--
node m32(clock, ea32y, em31y :int) returns (nextClock, em32x_P, em32y_P, ea32y_C, em31y_C :int; nbrFired, nbrEnd: int );

var
stage :int;
let
nbrFired= if m32DoFire(ea32y, em31y,1) then 1
		else 0;

(ea32y_C, em31y_C) = ((nbrFired * m32_ea32y_rate_in), (nbrFired * m32_em31y_rate_in));

stage = if (nbrFired = 0) then 0 
         else   1 ;

(nextClock, nbrEnd) = m32Stage (clock, stage, 1, nbrFired ); 
(em32x_P, em32y_P) = ((nbrEnd * m32_em32x_rate_out), (nbrEnd * m32_em32y_rate_out));

tel;
------------------subnode Dofire of Actorm32-----------------
node m32DoFire(ea32y, em31y,times:int) returns ( yes: bool);
let

yes = if (ea32y>=  (times * m32_ea32y_rate_in)) 
	and (em31y>=  (times * m32_em31y_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorm32-----------------
node m32Stage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then m32_duration  else maxDuration -> 
          if  selected then m32_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 

--******* Node Min***************--
node Min (x, y :int) returns ( r: int);
let
r= if  (x < y) then x else y;
tel;

--************************************************--
--******* Node Top***************--
--************************************************--
node top (_: bool) returns ( clock, e1, e8, e2, e12, e3, e6, e7, e4, e9, e10, e11, e5, ea11x, ea11y, ea12x, ea12y, ea21x, ea21y, ea22x, ea22y, ea31x, ea31y, ea32x, ea32y, em11x, em11y, em12x, em12y, em21x, em21y, em22x, em22y, em31x, em31y, em32x, em32y, rinbrFired, m1nbrFired, m2nbrFired, a1nbrFired, a2nbrFired, r0nbrFired, a11nbrFired, a12nbrFired, a21nbrFired, a22nbrFired, a31nbrFired, a32nbrFired, m11nbrFired, m12nbrFired, m21nbrFired, m22nbrFired, m31nbrFired, m32nbrFired:int);

var

e1_C, e1_P: int; 
e8_C, e8_P: int; 
e2_C, e2_P: int; 
e12_C, e12_P: int; 
e3_C, e3_P: int; 
e6_C, e6_P: int; 
e7_C, e7_P: int; 
e4_C, e4_P: int; 
e9_C, e9_P: int; 
e10_C, e10_P: int; 
e11_C, e11_P: int; 
e5_C, e5_P: int; 
ea11x_C, ea11x_P: int; 
ea11y_C, ea11y_P: int; 
ea12x_C, ea12x_P: int; 
ea12y_C, ea12y_P: int; 
ea21x_C, ea21x_P: int; 
ea21y_C, ea21y_P: int; 
ea22x_C, ea22x_P: int; 
ea22y_C, ea22y_P: int; 
ea31x_C, ea31x_P: int; 
ea31y_C, ea31y_P: int; 
ea32x_C, ea32x_P: int; 
ea32y_C, ea32y_P: int; 
em11x_C, em11x_P: int; 
em11y_C, em11y_P: int; 
em12x_C, em12x_P: int; 
em12y_C, em12y_P: int; 
em21x_C, em21x_P: int; 
em21y_C, em21y_P: int; 
em22x_C, em22x_P: int; 
em22y_C, em22y_P: int; 
em31x_C, em31x_P: int; 
em31y_C, em31y_P: int; 
em32x_C, em32x_P: int; 
em32y_C, em32y_P: int; 
rinextClock : int;  
m1nextClock : int;  
m2nextClock : int;  
a1nextClock : int;  
a2nextClock : int;  
r0nextClock : int;  
a11nextClock : int;  
a12nextClock : int;  
a21nextClock : int;  
a22nextClock : int;  
a31nextClock : int;  
a32nextClock : int;  
m11nextClock : int;  
m12nextClock : int;  
m21nextClock : int;  
m22nextClock : int;  
m31nextClock : int;  
m32nextClock : int;  
rinbrEnd, m1nbrEnd, m2nbrEnd, a1nbrEnd, a2nbrEnd, r0nbrEnd, a11nbrEnd, a12nbrEnd, a21nbrEnd, a22nbrEnd, a31nbrEnd, a32nbrEnd, m11nbrEnd, m12nbrEnd, m21nbrEnd, m22nbrEnd, m31nbrEnd, m32nbrEnd : int; 

rinbrRun, m1nbrRun, m2nbrRun, a1nbrRun, a2nbrRun, r0nbrRun, a11nbrRun, a12nbrRun, a21nbrRun, a22nbrRun, a31nbrRun, a32nbrRun, m11nbrRun, m12nbrRun, m21nbrRun, m22nbrRun, m31nbrRun, m32nbrRun : int; 

positiveValues: bool; 

let

e1 = e1_I ->  ( pre ( e1 - e1_C) + e1_P);
e8 = e8_I ->  ( pre ( e8 - e8_C) + e8_P);
e2 = e2_I ->  ( pre ( e2 - e2_C) + e2_P);
e12 = e12_I ->  ( pre ( e12 - e12_C) + e12_P);
e3 = e3_I ->  ( pre ( e3 - e3_C) + e3_P);
e6 = e6_I ->  ( pre ( e6 - e6_C) + e6_P);
e7 = e7_I ->  ( pre ( e7 - e7_C) + e7_P);
e4 = e4_I ->  ( pre ( e4 - e4_C) + e4_P);
e9 = e9_I ->  ( pre ( e9 - e9_C) + e9_P);
e10 = e10_I ->  ( pre ( e10 - e10_C) + e10_P);
e11 = e11_I ->  ( pre ( e11 - e11_C) + e11_P);
e5 = e5_I ->  ( pre ( e5 - e5_C) + e5_P);
ea11x = ea11x_I ->  ( pre ( ea11x - ea11x_C) + ea11x_P);
ea11y = ea11y_I ->  ( pre ( ea11y - ea11y_C) + ea11y_P);
ea12x = ea12x_I ->  ( pre ( ea12x - ea12x_C) + ea12x_P);
ea12y = ea12y_I ->  ( pre ( ea12y - ea12y_C) + ea12y_P);
ea21x = ea21x_I ->  ( pre ( ea21x - ea21x_C) + ea21x_P);
ea21y = ea21y_I ->  ( pre ( ea21y - ea21y_C) + ea21y_P);
ea22x = ea22x_I ->  ( pre ( ea22x - ea22x_C) + ea22x_P);
ea22y = ea22y_I ->  ( pre ( ea22y - ea22y_C) + ea22y_P);
ea31x = ea31x_I ->  ( pre ( ea31x - ea31x_C) + ea31x_P);
ea31y = ea31y_I ->  ( pre ( ea31y - ea31y_C) + ea31y_P);
ea32x = ea32x_I ->  ( pre ( ea32x - ea32x_C) + ea32x_P);
ea32y = ea32y_I ->  ( pre ( ea32y - ea32y_C) + ea32y_P);
em11x = em11x_I ->  ( pre ( em11x - em11x_C) + em11x_P);
em11y = em11y_I ->  ( pre ( em11y - em11y_C) + em11y_P);
em12x = em12x_I ->  ( pre ( em12x - em12x_C) + em12x_P);
em12y = em12y_I ->  ( pre ( em12y - em12y_C) + em12y_P);
em21x = em21x_I ->  ( pre ( em21x - em21x_C) + em21x_P);
em21y = em21y_I ->  ( pre ( em21y - em21y_C) + em21y_P);
em22x = em22x_I ->  ( pre ( em22x - em22x_C) + em22x_P);
em22y = em22y_I ->  ( pre ( em22y - em22y_C) + em22y_P);
em31x = em31x_I ->  ( pre ( em31x - em31x_C) + em31x_P);
em31y = em31y_I ->  ( pre ( em31y - em31y_C) + em31y_P);
em32x = em32x_I ->  ( pre ( em32x - em32x_C) + em32x_P);
em32y = em32y_I ->  ( pre ( em32y - em32y_C) + em32y_P);




(rinextClock, e1_P, e8_C, rinbrFired, rinbrEnd ) = ri(clock, e8);
(m1nextClock, e8_P, e1_C, e2_P, e12_C, e7_P, e4_C, m1nbrFired, m1nbrEnd ) = m1(clock, e1, e12, e4);
(m2nextClock, e2_C, e12_P, e3_P, e6_C, m2nbrFired, m2nbrEnd ) = m2(clock, e2, e6);
(a1nextClock, e3_C, e7_C, e4_P, e9_C, e10_P, a1nbrFired, a1nbrEnd ) = a1(clock, e3, e7, e9);
(a2nextClock, e6_P, e10_C, e9_P, e11_C, e5_P, a2nbrFired, a2nbrEnd ) = a2(clock, e10, e11);
(r0nextClock, e11_P, e5_C, r0nbrFired, r0nbrEnd ) = r0(clock, e5);
(a11nextClock, ea11x_P, ea11y_P, ea32x_C, em31x_C, em32x_C, a11nbrFired, a11nbrEnd ) = a11(clock, ea32x, em31x, em32x);
(a12nextClock, ea12x_P, ea12y_P, ea11x_C, a12nbrFired, a12nbrEnd ) = a12(clock, ea11x);
(a21nextClock, ea21x_P, ea21y_P, ea12x_C, em11x_C, em12x_C, a21nbrFired, a21nbrEnd ) = a21(clock, ea12x, em11x, em12x);
(a22nextClock, ea22x_P, ea22y_P, ea21x_C, a22nbrFired, a22nbrEnd ) = a22(clock, ea21x);
(a31nextClock, ea31x_P, ea31y_P, ea22x_C, em21x_C, em22x_C, a31nbrFired, a31nbrEnd ) = a31(clock, ea22x, em21x, em22x);
(a32nextClock, ea32x_P, ea32y_P, ea31x_C, a32nbrFired, a32nbrEnd ) = a32(clock, ea31x);
(m11nextClock, em11x_P, em11y_P, ea11y_C, em32y_C, m11nbrFired, m11nbrEnd ) = m11(clock, ea11y, em32y);
(m12nextClock, em12x_P, em12y_P, ea12y_C, em11y_C, m12nbrFired, m12nbrEnd ) = m12(clock, ea12y, em11y);
(m21nextClock, em21x_P, em21y_P, ea21y_C, em12y_C, m21nbrFired, m21nbrEnd ) = m21(clock, ea21y, em12y);
(m22nextClock, em22x_P, em22y_P, ea22y_C, em21y_C, m22nbrFired, m22nbrEnd ) = m22(clock, ea22y, em21y);
(m31nextClock, em31x_P, em31y_P, ea31y_C, em22y_C, m31nbrFired, m31nbrEnd ) = m31(clock, ea31y, em22y);
(m32nextClock, em32x_P, em32y_P, ea32y_C, em31y_C, m32nbrFired, m32nbrEnd ) = m32(clock, ea32y, em31y);

clock= Min(rinextClock , Min(m1nextClock , Min(m2nextClock , Min(a1nextClock , Min(a2nextClock , Min(r0nextClock , Min(a11nextClock , Min(a12nextClock , Min(a21nextClock , Min(a22nextClock , Min(a31nextClock , Min(a32nextClock , Min(m11nextClock , Min(m12nextClock , Min(m21nextClock , Min(m22nextClock , Min(m31nextClock , m32nextClock)))))))))))))))));


rinbrRun=  rinbrFired  -> (pre rinbrRun) +rinbrFired - rinbrEnd ;

m1nbrRun=  m1nbrFired  -> (pre m1nbrRun) +m1nbrFired - m1nbrEnd ;

m2nbrRun=  m2nbrFired  -> (pre m2nbrRun) +m2nbrFired - m2nbrEnd ;

a1nbrRun=  a1nbrFired  -> (pre a1nbrRun) +a1nbrFired - a1nbrEnd ;

a2nbrRun=  a2nbrFired  -> (pre a2nbrRun) +a2nbrFired - a2nbrEnd ;

r0nbrRun=  r0nbrFired  -> (pre r0nbrRun) +r0nbrFired - r0nbrEnd ;

a11nbrRun=  a11nbrFired  -> (pre a11nbrRun) +a11nbrFired - a11nbrEnd ;

a12nbrRun=  a12nbrFired  -> (pre a12nbrRun) +a12nbrFired - a12nbrEnd ;

a21nbrRun=  a21nbrFired  -> (pre a21nbrRun) +a21nbrFired - a21nbrEnd ;

a22nbrRun=  a22nbrFired  -> (pre a22nbrRun) +a22nbrFired - a22nbrEnd ;

a31nbrRun=  a31nbrFired  -> (pre a31nbrRun) +a31nbrFired - a31nbrEnd ;

a32nbrRun=  a32nbrFired  -> (pre a32nbrRun) +a32nbrFired - a32nbrEnd ;

m11nbrRun=  m11nbrFired  -> (pre m11nbrRun) +m11nbrFired - m11nbrEnd ;

m12nbrRun=  m12nbrFired  -> (pre m12nbrRun) +m12nbrFired - m12nbrEnd ;

m21nbrRun=  m21nbrFired  -> (pre m21nbrRun) +m21nbrFired - m21nbrEnd ;

m22nbrRun=  m22nbrFired  -> (pre m22nbrRun) +m22nbrFired - m22nbrEnd ;

m31nbrRun=  m31nbrFired  -> (pre m31nbrRun) +m31nbrFired - m31nbrEnd ;

m32nbrRun=  m32nbrFired  -> (pre m32nbrRun) +m32nbrFired - m32nbrEnd ;


positiveValues = ( e1 >= 0) 
	and ( e8 >= 0) 
	and ( e2 >= 0) 
	and ( e12 >= 0) 
	and ( e3 >= 0) 
	and ( e6 >= 0) 
	and ( e7 >= 0) 
	and ( e4 >= 0) 
	and ( e9 >= 0) 
	and ( e10 >= 0) 
	and ( e11 >= 0) 
	and ( e5 >= 0) 
	and ( ea11x >= 0) 
	and ( ea11y >= 0) 
	and ( ea12x >= 0) 
	and ( ea12y >= 0) 
	and ( ea21x >= 0) 
	and ( ea21y >= 0) 
	and ( ea22x >= 0) 
	and ( ea22y >= 0) 
	and ( ea31x >= 0) 
	and ( ea31y >= 0) 
	and ( ea32x >= 0) 
	and ( ea32y >= 0) 
	and ( em11x >= 0) 
	and ( em11y >= 0) 
	and ( em12x >= 0) 
	and ( em12y >= 0) 
	and ( em21x >= 0) 
	and ( em21y >= 0) 
	and ( em22x >= 0) 
	and ( em22y >= 0) 
	and ( em31x >= 0) 
	and ( em31y >= 0) 
	and ( em32x >= 0) 
	and ( em32y >= 0) 
	and ( rinbrFired  >=  0) 
	and ( m1nbrFired  >=  0) 
	and ( m2nbrFired  >=  0) 
	and ( a1nbrFired  >=  0) 
	and ( a2nbrFired  >=  0) 
	and ( r0nbrFired  >=  0) 
	and ( a11nbrFired  >=  0) 
	and ( a12nbrFired  >=  0) 
	and ( a21nbrFired  >=  0) 
	and ( a22nbrFired  >=  0) 
	and ( a31nbrFired  >=  0) 
	and ( a32nbrFired  >=  0) 
	and ( m11nbrFired  >=  0) 
	and ( m12nbrFired  >=  0) 
	and ( m21nbrFired  >=  0) 
	and ( m22nbrFired  >=  0) 
	and ( m31nbrFired  >=  0) 
	and ( m32nbrFired  >=  0) ;
--%MAIN;

--%PROPERTY  "Ok, all variables are positive "  positiveValues;


tel;


