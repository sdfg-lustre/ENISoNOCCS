include "./toInclude_BitBlasting_ok.lus"

const maxValue = [1,1,1,1,0,0,0,0];

--**************** Const Rates ****************--

const a0_in_rate_in = [1,0,0,0,0,0,0,0];
const a0_e1in_rate_in = [1,0,0,0,0,0,0,0];
const a0_e1out_rate_out = [1,0,0,0,0,0,0,0];
const a0_e2_rate_out = [1,0,0,0,0,0,0,0];
const a0_e3_rate_out = [1,0,0,0,0,0,0,0];
const a0_e4_rate_out = [1,0,0,0,0,0,0,0];
const a0_e5_rate_out = [1,1,0,0,0,0,0,0];
const b0_e3_rate_in = [1,0,0,0,0,0,0,0];
const b0_e8_rate_in = [1,0,0,0,0,0,0,0];
const b0_e6_rate_out = [1,0,0,0,0,0,0,0];
const b0_e7_rate_out = [1,0,0,0,0,0,0,0];
const b1_e2_rate_in = [1,0,0,0,0,0,0,0];
const b1_e7_rate_in = [1,0,0,0,0,0,0,0];
const b1_e9_rate_out = [1,0,0,0,0,0,0,0];
const b1_e10_rate_out = [1,0,0,0,0,0,0,0];
const b2_e4_rate_in = [1,0,0,0,0,0,0,0];
const b2_e9_rate_in = [1,0,0,0,0,0,0,0];
const b2_e8_rate_out = [1,0,0,0,0,0,0,0];
const b2_e11_rate_out = [1,0,0,0,0,0,0,0];
const c0_e6_rate_in = [1,0,0,0,0,0,0,0];
const c0_e12_rate_out = [1,0,0,0,0,0,0,0];
const c1_e10_rate_in = [1,0,0,0,0,0,0,0];
const c1_e13_rate_out = [1,0,0,0,0,0,0,0];
const c2_e11_rate_in = [1,0,0,0,0,0,0,0];
const c2_e14_rate_out = [1,0,0,0,0,0,0,0];
const d0_e12_rate_in = [1,0,0,0,0,0,0,0];
const d0_e13_rate_in = [1,0,0,0,0,0,0,0];
const d0_e14_rate_in = [1,0,0,0,0,0,0,0];
const d0_e15in_rate_in = [1,0,0,0,0,0,0,0];
const d0_e15out_rate_out = [1,0,0,0,0,0,0,0];
const b_e5_rate_in = [1,0,0,0,0,0,0,0];
const b_e16in_rate_in = [1,0,0,0,0,0,0,0];
const b_e16out_rate_out = [1,0,0,0,0,0,0,0];
const b_e17_rate_out = [1,0,0,0,0,0,0,0];
const c_e17_rate_in = [1,0,0,0,0,0,0,0];
const c_e18_rate_out = [1,0,0,0,0,0,0,0];
const d_e18_rate_in = [1,1,0,0,0,0,0,0];
const d_e19in_rate_in = [1,0,0,0,0,0,0,0];
const d_e19out_rate_out = [1,0,0,0,0,0,0,0];

--**************** Init Channel ****************--

const e1_I = [1,0,0,0,0,0,0,0];
const e2_I = [0,0,0,0,0,0,0,0];
const e3_I = [0,0,0,0,0,0,0,0];
const e4_I = [0,0,0,0,0,0,0,0];
const e5_I = [0,0,0,0,0,0,0,0];
const e6_I = [0,0,0,0,0,0,0,0];
const e7_I = [0,0,0,0,0,0,0,0];
const e8_I = [1,0,0,0,0,0,0,0];
const e9_I = [0,0,0,0,0,0,0,0];
const e10_I = [0,0,0,0,0,0,0,0];
const e11_I = [0,0,0,0,0,0,0,0];
const e12_I = [0,0,0,0,0,0,0,0];
const e13_I = [0,0,0,0,0,0,0,0];
const e14_I = [0,0,0,0,0,0,0,0];
const e15_I = [1,0,0,0,0,0,0,0];
const e16_I = [1,0,0,0,0,0,0,0];
const e17_I = [0,0,0,0,0,0,0,0];
const e18_I = [0,0,0,0,0,0,0,0];
const e19_I = [1,0,0,0,0,0,0,0];

const in_I = [0,0,0,0,0,0,0,0];

--**************** Nodes Declaration ****************--

node a0(in, e1in :UsrInt) returns (in_C, e1in_C, e1out_P, e2_P, e3_P, e4_P, e5_P :UsrInt; a0nbrFired: UsrInt );

let
a0nbrFired= if a0DoFire(in, e1in,UsrInt_3) then UsrInt_3
		else if a0DoFire(in, e1in,UsrInt_2) then UsrInt_2
		else if a0DoFire(in, e1in,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(in_C, e1in_C,e1out_P, e2_P, e3_P, e4_P, e5_P) = (UsrIntMult(a0nbrFired, a0_in_rate_in),UsrIntMult(a0nbrFired, a0_e1in_rate_in),UsrIntMult(a0nbrFired, a0_e1out_rate_out),UsrIntMult(a0nbrFired, a0_e2_rate_out),UsrIntMult(a0nbrFired, a0_e3_rate_out),UsrIntMult(a0nbrFired, a0_e4_rate_out),UsrIntMult(a0nbrFired, a0_e5_rate_out));

tel;
------------------
node a0DoFire(in, e1in,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(in, UsrIntMult(times, a0_in_rate_in)) 
	and UsrIntGte(e1in, UsrIntMult(times, a0_e1in_rate_in)) 
	then true 
	else false;

tel;
------------------
node b0(e3, e8 :UsrInt) returns (e3_C, e8_C, e6_P, e7_P :UsrInt; b0nbrFired: UsrInt );

let
b0nbrFired= if b0DoFire(e3, e8,UsrInt_3) then UsrInt_3
		else if b0DoFire(e3, e8,UsrInt_2) then UsrInt_2
		else if b0DoFire(e3, e8,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e3_C, e8_C,e6_P, e7_P) = (UsrIntMult(b0nbrFired, b0_e3_rate_in),UsrIntMult(b0nbrFired, b0_e8_rate_in),UsrIntMult(b0nbrFired, b0_e6_rate_out),UsrIntMult(b0nbrFired, b0_e7_rate_out));

tel;
------------------
node b0DoFire(e3, e8,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e3, UsrIntMult(times, b0_e3_rate_in)) 
	and UsrIntGte(e8, UsrIntMult(times, b0_e8_rate_in)) 
	then true 
	else false;

tel;
------------------
node b1(e2, e7 :UsrInt) returns (e2_C, e7_C, e9_P, e10_P :UsrInt; b1nbrFired: UsrInt );

let
b1nbrFired= if b1DoFire(e2, e7,UsrInt_3) then UsrInt_3
		else if b1DoFire(e2, e7,UsrInt_2) then UsrInt_2
		else if b1DoFire(e2, e7,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e2_C, e7_C,e9_P, e10_P) = (UsrIntMult(b1nbrFired, b1_e2_rate_in),UsrIntMult(b1nbrFired, b1_e7_rate_in),UsrIntMult(b1nbrFired, b1_e9_rate_out),UsrIntMult(b1nbrFired, b1_e10_rate_out));

tel;
------------------
node b1DoFire(e2, e7,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e2, UsrIntMult(times, b1_e2_rate_in)) 
	and UsrIntGte(e7, UsrIntMult(times, b1_e7_rate_in)) 
	then true 
	else false;

tel;
------------------
node b2(e4, e9 :UsrInt) returns (e4_C, e9_C, e8_P, e11_P :UsrInt; b2nbrFired: UsrInt );

let
b2nbrFired= if b2DoFire(e4, e9,UsrInt_3) then UsrInt_3
		else if b2DoFire(e4, e9,UsrInt_2) then UsrInt_2
		else if b2DoFire(e4, e9,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e4_C, e9_C,e8_P, e11_P) = (UsrIntMult(b2nbrFired, b2_e4_rate_in),UsrIntMult(b2nbrFired, b2_e9_rate_in),UsrIntMult(b2nbrFired, b2_e8_rate_out),UsrIntMult(b2nbrFired, b2_e11_rate_out));

tel;
------------------
node b2DoFire(e4, e9,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e4, UsrIntMult(times, b2_e4_rate_in)) 
	and UsrIntGte(e9, UsrIntMult(times, b2_e9_rate_in)) 
	then true 
	else false;

tel;
------------------
node c0(e6 :UsrInt) returns (e6_C, e12_P :UsrInt; c0nbrFired: UsrInt );

let
c0nbrFired= if c0DoFire(e6,UsrInt_3) then UsrInt_3
		else if c0DoFire(e6,UsrInt_2) then UsrInt_2
		else if c0DoFire(e6,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e6_C,e12_P) = (UsrIntMult(c0nbrFired, c0_e6_rate_in),UsrIntMult(c0nbrFired, c0_e12_rate_out));

tel;
------------------
node c0DoFire(e6,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e6, UsrIntMult(times, c0_e6_rate_in)) 
	then true 
	else false;

tel;
------------------
node c1(e10 :UsrInt) returns (e10_C, e13_P :UsrInt; c1nbrFired: UsrInt );

let
c1nbrFired= if c1DoFire(e10,UsrInt_3) then UsrInt_3
		else if c1DoFire(e10,UsrInt_2) then UsrInt_2
		else if c1DoFire(e10,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e10_C,e13_P) = (UsrIntMult(c1nbrFired, c1_e10_rate_in),UsrIntMult(c1nbrFired, c1_e13_rate_out));

tel;
------------------
node c1DoFire(e10,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e10, UsrIntMult(times, c1_e10_rate_in)) 
	then true 
	else false;

tel;
------------------
node c2(e11 :UsrInt) returns (e11_C, e14_P :UsrInt; c2nbrFired: UsrInt );

let
c2nbrFired= if c2DoFire(e11,UsrInt_3) then UsrInt_3
		else if c2DoFire(e11,UsrInt_2) then UsrInt_2
		else if c2DoFire(e11,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e11_C,e14_P) = (UsrIntMult(c2nbrFired, c2_e11_rate_in),UsrIntMult(c2nbrFired, c2_e14_rate_out));

tel;
------------------
node c2DoFire(e11,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e11, UsrIntMult(times, c2_e11_rate_in)) 
	then true 
	else false;

tel;
------------------
node d0(e12, e13, e14, e15in :UsrInt) returns (e12_C, e13_C, e14_C, e15in_C, e15out_P :UsrInt; d0nbrFired: UsrInt );

let
d0nbrFired= if d0DoFire(e12, e13, e14, e15in,UsrInt_3) then UsrInt_3
		else if d0DoFire(e12, e13, e14, e15in,UsrInt_2) then UsrInt_2
		else if d0DoFire(e12, e13, e14, e15in,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e12_C, e13_C, e14_C, e15in_C,e15out_P) = (UsrIntMult(d0nbrFired, d0_e12_rate_in),UsrIntMult(d0nbrFired, d0_e13_rate_in),UsrIntMult(d0nbrFired, d0_e14_rate_in),UsrIntMult(d0nbrFired, d0_e15in_rate_in),UsrIntMult(d0nbrFired, d0_e15out_rate_out));

tel;
------------------
node d0DoFire(e12, e13, e14, e15in,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e12, UsrIntMult(times, d0_e12_rate_in)) 
	and UsrIntGte(e13, UsrIntMult(times, d0_e13_rate_in)) 
	and UsrIntGte(e14, UsrIntMult(times, d0_e14_rate_in)) 
	and UsrIntGte(e15in, UsrIntMult(times, d0_e15in_rate_in)) 
	then true 
	else false;

tel;
------------------
node b(e5, e16in :UsrInt) returns (e5_C, e16in_C, e16out_P, e17_P :UsrInt; bnbrFired: UsrInt );

let
bnbrFired= if bDoFire(e5, e16in,UsrInt_3) then UsrInt_3
		else if bDoFire(e5, e16in,UsrInt_2) then UsrInt_2
		else if bDoFire(e5, e16in,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e5_C, e16in_C,e16out_P, e17_P) = (UsrIntMult(bnbrFired, b_e5_rate_in),UsrIntMult(bnbrFired, b_e16in_rate_in),UsrIntMult(bnbrFired, b_e16out_rate_out),UsrIntMult(bnbrFired, b_e17_rate_out));

tel;
------------------
node bDoFire(e5, e16in,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e5, UsrIntMult(times, b_e5_rate_in)) 
	and UsrIntGte(e16in, UsrIntMult(times, b_e16in_rate_in)) 
	then true 
	else false;

tel;
------------------
node c(e17 :UsrInt) returns (e17_C, e18_P :UsrInt; cnbrFired: UsrInt );

let
cnbrFired= if cDoFire(e17,UsrInt_3) then UsrInt_3
		else if cDoFire(e17,UsrInt_2) then UsrInt_2
		else if cDoFire(e17,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e17_C,e18_P) = (UsrIntMult(cnbrFired, c_e17_rate_in),UsrIntMult(cnbrFired, c_e18_rate_out));

tel;
------------------
node cDoFire(e17,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e17, UsrIntMult(times, c_e17_rate_in)) 
	then true 
	else false;

tel;
------------------
node d(e18, e19in :UsrInt) returns (e18_C, e19in_C, e19out_P :UsrInt; dnbrFired: UsrInt );

let
dnbrFired= if dDoFire(e18, e19in,UsrInt_3) then UsrInt_3
		else if dDoFire(e18, e19in,UsrInt_2) then UsrInt_2
		else if dDoFire(e18, e19in,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e18_C, e19in_C,e19out_P) = (UsrIntMult(dnbrFired, d_e18_rate_in),UsrIntMult(dnbrFired, d_e19in_rate_in),UsrIntMult(dnbrFired, d_e19out_rate_out));

tel;
------------------
node dDoFire(e18, e19in,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e18, UsrIntMult(times, d_e18_rate_in)) 
	and UsrIntGte(e19in, UsrIntMult(times, d_e19in_rate_in)) 
	then true 
	else false;

tel;
------------------

--**************** Node Top Declaration ****************--

node top (in_P: UsrInt) returns (e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, in, a0nbrFired, b0nbrFired, b1nbrFired, b2nbrFired, c0nbrFired, c1nbrFired, c2nbrFired, d0nbrFired, bnbrFired, cnbrFired, dnbrFired:UsrInt);

-------------- Les variables -------------- 

var

e1_C, e1_P: UsrInt; 
e2_C, e2_P: UsrInt; 
e3_C, e3_P: UsrInt; 
e4_C, e4_P: UsrInt; 
e5_C, e5_P: UsrInt; 
e6_C, e6_P: UsrInt; 
e7_C, e7_P: UsrInt; 
e8_C, e8_P: UsrInt; 
e9_C, e9_P: UsrInt; 
e10_C, e10_P: UsrInt; 
e11_C, e11_P: UsrInt; 
e12_C, e12_P: UsrInt; 
e13_C, e13_P: UsrInt; 
e14_C, e14_P: UsrInt; 
e15_C, e15_P: UsrInt; 
e16_C, e16_P: UsrInt; 
e17_C, e17_P: UsrInt; 
e18_C, e18_P: UsrInt; 
e19_C, e19_P: UsrInt; 
in_C : UsrInt;

let

e1 = e1_I -> pre UsrIntPlus( UsrIntMinus( e1,e1_C), e1_P);
e2 = e2_I -> pre UsrIntPlus( UsrIntMinus( e2,e2_C), e2_P);
e3 = e3_I -> pre UsrIntPlus( UsrIntMinus( e3,e3_C), e3_P);
e4 = e4_I -> pre UsrIntPlus( UsrIntMinus( e4,e4_C), e4_P);
e5 = e5_I -> pre UsrIntPlus( UsrIntMinus( e5,e5_C), e5_P);
e6 = e6_I -> pre UsrIntPlus( UsrIntMinus( e6,e6_C), e6_P);
e7 = e7_I -> pre UsrIntPlus( UsrIntMinus( e7,e7_C), e7_P);
e8 = e8_I -> pre UsrIntPlus( UsrIntMinus( e8,e8_C), e8_P);
e9 = e9_I -> pre UsrIntPlus( UsrIntMinus( e9,e9_C), e9_P);
e10 = e10_I -> pre UsrIntPlus( UsrIntMinus( e10,e10_C), e10_P);
e11 = e11_I -> pre UsrIntPlus( UsrIntMinus( e11,e11_C), e11_P);
e12 = e12_I -> pre UsrIntPlus( UsrIntMinus( e12,e12_C), e12_P);
e13 = e13_I -> pre UsrIntPlus( UsrIntMinus( e13,e13_C), e13_P);
e14 = e14_I -> pre UsrIntPlus( UsrIntMinus( e14,e14_C), e14_P);
e15 = e15_I -> pre UsrIntPlus( UsrIntMinus( e15,e15_C), e15_P);
e16 = e16_I -> pre UsrIntPlus( UsrIntMinus( e16,e16_C), e16_P);
e17 = e17_I -> pre UsrIntPlus( UsrIntMinus( e17,e17_C), e17_P);
e18 = e18_I -> pre UsrIntPlus( UsrIntMinus( e18,e18_C), e18_P);
e19 = e19_I -> pre UsrIntPlus( UsrIntMinus( e19,e19_C), e19_P);

in = in_I -> pre if UsrIntLt(UsrIntPlus( UsrIntMinus( in,in_C), in_P), maxValue) 
				then UsrIntPlus( UsrIntMinus( in,in_C), in_P)
				else UsrIntMinus( in,in_C);


(in_C, e1_C, e1_P, e2_P, e3_P, e4_P, e5_P, a0nbrFired) = a0(in, e1);
(e3_C, e8_C, e6_P, e7_P, b0nbrFired) = b0(e3, e8);
(e2_C, e7_C, e9_P, e10_P, b1nbrFired) = b1(e2, e7);
(e4_C, e9_C, e8_P, e11_P, b2nbrFired) = b2(e4, e9);
(e6_C, e12_P, c0nbrFired) = c0(e6);
(e10_C, e13_P, c1nbrFired) = c1(e10);
(e11_C, e14_P, c2nbrFired) = c2(e11);
(e12_C, e13_C, e14_C, e15_C, e15_P, d0nbrFired) = d0(e12, e13, e14, e15);
(e5_C, e16_C, e16_P, e17_P, bnbrFired) = b(e5, e16);
(e17_C, e18_P, cnbrFired) = c(e17);
(e18_C, e19_C, e19_P, dnbrFired) = d(e18, e19);


tel;


--**************** Node Harness Declaration ****************--

node Harness (in_P: UsrInt) returns (noError :bool)

var

e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, in, a0nbrFired, b0nbrFired, b1nbrFired, b2nbrFired, c0nbrFired, c1nbrFired, c2nbrFired, d0nbrFired, bnbrFired, cnbrFired, dnbrFired:UsrInt;

noDeadlock : bool;

let

(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, in, a0nbrFired, b0nbrFired, b1nbrFired, b2nbrFired, c0nbrFired, c1nbrFired, c2nbrFired, d0nbrFired, bnbrFired, cnbrFired, dnbrFired) = top(in_P);

noDeadlock = UsrIntGte( a0nbrFired , UsrInt_1) 
	or UsrIntGte( b0nbrFired , UsrInt_1) 
	or UsrIntGte( b1nbrFired , UsrInt_1) 
	or UsrIntGte( b2nbrFired , UsrInt_1) 
	or UsrIntGte( c0nbrFired , UsrInt_1) 
	or UsrIntGte( c1nbrFired , UsrInt_1) 
	or UsrIntGte( c2nbrFired , UsrInt_1) 
	or UsrIntGte( d0nbrFired , UsrInt_1) 
	or UsrIntGte( bnbrFired , UsrInt_1) 
	or UsrIntGte( cnbrFired , UsrInt_1) 
	or UsrIntGte( dnbrFired , UsrInt_1);

noError= noDeadlock;

tel
