include "./toInclude_BitBlasting_ok.lus"

const maxValue = [1,1,1,1,0,0,0,0];

--**************** Const Rates ****************--

const A_in_rate_in = [1,0,0,0,0,0,0,0];
const A_e1_rate_out = [1,0,0,0,0,0,0,0];
const A_e6_rate_out = [1,0,0,0,0,0,0,0];
const A_e12_rate_out = [0,1,0,0,0,0,0,0];
const B1_e1_rate_in = [1,0,0,0,0,0,0,0];
const B1_e2_rate_in = [1,0,0,0,0,0,0,0];
const B1_e3_rate_in = [1,0,0,0,0,0,0,0];
const B1_e4_rate_out = [1,0,0,0,0,0,0,0];
const B1_e5_rate_out = [1,0,0,0,0,0,0,0];
const B2_e6_rate_in = [1,0,0,0,0,0,0,0];
const B2_e7_rate_in = [1,0,0,0,0,0,0,0];
const B2_e8_rate_in = [1,0,0,0,0,0,0,0];
const B2_e9_rate_out = [1,0,0,0,0,0,0,0];
const B2_e10_rate_out = [1,0,0,0,0,0,0,0];
const B3_e12_rate_in = [1,0,0,0,0,0,0,0];
const B3_e14_rate_in = [0,1,0,0,0,0,0,0];
const B3_e13_rate_out = [0,1,0,0,0,0,0,0];
const C1_e9_rate_in = [1,0,0,0,0,0,0,0];
const C1_e11_rate_in = [1,0,0,0,0,0,0,0];
const C1_e3_rate_out = [1,0,0,0,0,0,0,0];
const C1_e16_rate_out = [1,0,0,0,0,0,0,0];
const C2_e4_rate_in = [1,0,0,0,0,0,0,0];
const C2_e16_rate_in = [1,0,0,0,0,0,0,0];
const C2_e7_rate_out = [1,0,0,0,0,0,0,0];
const C2_e17_rate_out = [1,0,0,0,0,0,0,0];
const C3_e5_rate_in = [1,0,0,0,0,0,0,0];
const C3_e17_rate_in = [1,0,0,0,0,0,0,0];
const C3_e8_rate_out = [1,0,0,0,0,0,0,0];
const C3_e18_rate_out = [1,0,0,0,0,0,0,0];
const C4_e10_rate_in = [1,0,0,0,0,0,0,0];
const C4_e18_rate_in = [1,0,0,0,0,0,0,0];
const C4_e2_rate_out = [1,0,0,0,0,0,0,0];
const C4_e11_rate_out = [1,0,0,0,0,0,0,0];
const C5_e13_rate_in = [1,0,0,0,0,0,0,0];
const C5_e15in_rate_in = [1,0,0,0,0,0,0,0];
const C5_e14_rate_out = [1,0,0,0,0,0,0,0];
const C5_e15out_rate_out = [1,0,0,0,0,0,0,0];

--**************** Init Channel ****************--

const e1_I = [0,0,0,0,0,0,0,0];
const e2_I = [1,0,0,0,0,0,0,0];
const e3_I = [0,0,0,0,0,0,0,0];
const e4_I = [0,0,0,0,0,0,0,0];
const e5_I = [0,0,0,0,0,0,0,0];
const e6_I = [0,0,0,0,0,0,0,0];
const e7_I = [0,0,0,0,0,0,0,0];
const e8_I = [0,0,0,0,0,0,0,0];
const e9_I = [1,0,0,0,0,0,0,0];
const e10_I = [0,0,0,0,0,0,0,0];
const e11_I = [1,0,0,0,0,0,0,0];
const e12_I = [0,0,0,0,0,0,0,0];
const e13_I = [1,0,0,0,0,0,0,0];
const e14_I = [1,0,0,0,0,0,0,0];
const e15_I = [1,0,0,0,0,0,0,0];
const e16_I = [0,0,0,0,0,0,0,0];
const e17_I = [0,0,0,0,0,0,0,0];
const e18_I = [0,0,0,0,0,0,0,0];

const in_I = [0,0,0,0,0,0,0,0];

--**************** Nodes Declaration ****************--

node A(in :UsrInt) returns (in_C, e1_P, e6_P, e12_P :UsrInt; AnbrFired: UsrInt );

let
AnbrFired= if ADoFire(in,UsrInt_3) then UsrInt_3
		else if ADoFire(in,UsrInt_2) then UsrInt_2
		else if ADoFire(in,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(in_C,e1_P, e6_P, e12_P) = (UsrIntMult(AnbrFired, A_in_rate_in),UsrIntMult(AnbrFired, A_e1_rate_out),UsrIntMult(AnbrFired, A_e6_rate_out),UsrIntMult(AnbrFired, A_e12_rate_out));

tel;
------------------
node ADoFire(in,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(in, UsrIntMult(times, A_in_rate_in)) 
	then true 
	else false;

tel;
------------------
node B1(e1, e2, e3 :UsrInt) returns (e1_C, e2_C, e3_C, e4_P, e5_P :UsrInt; B1nbrFired: UsrInt );

let
B1nbrFired= if B1DoFire(e1, e2, e3,UsrInt_3) then UsrInt_3
		else if B1DoFire(e1, e2, e3,UsrInt_2) then UsrInt_2
		else if B1DoFire(e1, e2, e3,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e1_C, e2_C, e3_C,e4_P, e5_P) = (UsrIntMult(B1nbrFired, B1_e1_rate_in),UsrIntMult(B1nbrFired, B1_e2_rate_in),UsrIntMult(B1nbrFired, B1_e3_rate_in),UsrIntMult(B1nbrFired, B1_e4_rate_out),UsrIntMult(B1nbrFired, B1_e5_rate_out));

tel;
------------------
node B1DoFire(e1, e2, e3,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e1, UsrIntMult(times, B1_e1_rate_in)) 
	and UsrIntGte(e2, UsrIntMult(times, B1_e2_rate_in)) 
	and UsrIntGte(e3, UsrIntMult(times, B1_e3_rate_in)) 
	then true 
	else false;

tel;
------------------
node B2(e6, e7, e8 :UsrInt) returns (e6_C, e7_C, e8_C, e9_P, e10_P :UsrInt; B2nbrFired: UsrInt );

let
B2nbrFired= if B2DoFire(e6, e7, e8,UsrInt_3) then UsrInt_3
		else if B2DoFire(e6, e7, e8,UsrInt_2) then UsrInt_2
		else if B2DoFire(e6, e7, e8,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e6_C, e7_C, e8_C,e9_P, e10_P) = (UsrIntMult(B2nbrFired, B2_e6_rate_in),UsrIntMult(B2nbrFired, B2_e7_rate_in),UsrIntMult(B2nbrFired, B2_e8_rate_in),UsrIntMult(B2nbrFired, B2_e9_rate_out),UsrIntMult(B2nbrFired, B2_e10_rate_out));

tel;
------------------
node B2DoFire(e6, e7, e8,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e6, UsrIntMult(times, B2_e6_rate_in)) 
	and UsrIntGte(e7, UsrIntMult(times, B2_e7_rate_in)) 
	and UsrIntGte(e8, UsrIntMult(times, B2_e8_rate_in)) 
	then true 
	else false;

tel;
------------------
node B3(e12, e14 :UsrInt) returns (e12_C, e14_C, e13_P :UsrInt; B3nbrFired: UsrInt );

let
B3nbrFired= if B3DoFire(e12, e14,UsrInt_3) then UsrInt_3
		else if B3DoFire(e12, e14,UsrInt_2) then UsrInt_2
		else if B3DoFire(e12, e14,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e12_C, e14_C,e13_P) = (UsrIntMult(B3nbrFired, B3_e12_rate_in),UsrIntMult(B3nbrFired, B3_e14_rate_in),UsrIntMult(B3nbrFired, B3_e13_rate_out));

tel;
------------------
node B3DoFire(e12, e14,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e12, UsrIntMult(times, B3_e12_rate_in)) 
	and UsrIntGte(e14, UsrIntMult(times, B3_e14_rate_in)) 
	then true 
	else false;

tel;
------------------
node C1(e9, e11 :UsrInt) returns (e9_C, e11_C, e3_P, e16_P :UsrInt; C1nbrFired: UsrInt );

let
C1nbrFired= if C1DoFire(e9, e11,UsrInt_3) then UsrInt_3
		else if C1DoFire(e9, e11,UsrInt_2) then UsrInt_2
		else if C1DoFire(e9, e11,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e9_C, e11_C,e3_P, e16_P) = (UsrIntMult(C1nbrFired, C1_e9_rate_in),UsrIntMult(C1nbrFired, C1_e11_rate_in),UsrIntMult(C1nbrFired, C1_e3_rate_out),UsrIntMult(C1nbrFired, C1_e16_rate_out));

tel;
------------------
node C1DoFire(e9, e11,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e9, UsrIntMult(times, C1_e9_rate_in)) 
	and UsrIntGte(e11, UsrIntMult(times, C1_e11_rate_in)) 
	then true 
	else false;

tel;
------------------
node C2(e4, e16 :UsrInt) returns (e4_C, e16_C, e7_P, e17_P :UsrInt; C2nbrFired: UsrInt );

let
C2nbrFired= if C2DoFire(e4, e16,UsrInt_3) then UsrInt_3
		else if C2DoFire(e4, e16,UsrInt_2) then UsrInt_2
		else if C2DoFire(e4, e16,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e4_C, e16_C,e7_P, e17_P) = (UsrIntMult(C2nbrFired, C2_e4_rate_in),UsrIntMult(C2nbrFired, C2_e16_rate_in),UsrIntMult(C2nbrFired, C2_e7_rate_out),UsrIntMult(C2nbrFired, C2_e17_rate_out));

tel;
------------------
node C2DoFire(e4, e16,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e4, UsrIntMult(times, C2_e4_rate_in)) 
	and UsrIntGte(e16, UsrIntMult(times, C2_e16_rate_in)) 
	then true 
	else false;

tel;
------------------
node C3(e5, e17 :UsrInt) returns (e5_C, e17_C, e8_P, e18_P :UsrInt; C3nbrFired: UsrInt );

let
C3nbrFired= if C3DoFire(e5, e17,UsrInt_3) then UsrInt_3
		else if C3DoFire(e5, e17,UsrInt_2) then UsrInt_2
		else if C3DoFire(e5, e17,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e5_C, e17_C,e8_P, e18_P) = (UsrIntMult(C3nbrFired, C3_e5_rate_in),UsrIntMult(C3nbrFired, C3_e17_rate_in),UsrIntMult(C3nbrFired, C3_e8_rate_out),UsrIntMult(C3nbrFired, C3_e18_rate_out));

tel;
------------------
node C3DoFire(e5, e17,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e5, UsrIntMult(times, C3_e5_rate_in)) 
	and UsrIntGte(e17, UsrIntMult(times, C3_e17_rate_in)) 
	then true 
	else false;

tel;
------------------
node C4(e10, e18 :UsrInt) returns (e10_C, e18_C, e2_P, e11_P :UsrInt; C4nbrFired: UsrInt );

let
C4nbrFired= if C4DoFire(e10, e18,UsrInt_3) then UsrInt_3
		else if C4DoFire(e10, e18,UsrInt_2) then UsrInt_2
		else if C4DoFire(e10, e18,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e10_C, e18_C,e2_P, e11_P) = (UsrIntMult(C4nbrFired, C4_e10_rate_in),UsrIntMult(C4nbrFired, C4_e18_rate_in),UsrIntMult(C4nbrFired, C4_e2_rate_out),UsrIntMult(C4nbrFired, C4_e11_rate_out));

tel;
------------------
node C4DoFire(e10, e18,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e10, UsrIntMult(times, C4_e10_rate_in)) 
	and UsrIntGte(e18, UsrIntMult(times, C4_e18_rate_in)) 
	then true 
	else false;

tel;
------------------
node C5(e13, e15in :UsrInt) returns (e13_C, e15in_C, e14_P, e15out_P :UsrInt; C5nbrFired: UsrInt );

let
C5nbrFired= if C5DoFire(e13, e15in,UsrInt_3) then UsrInt_3
		else if C5DoFire(e13, e15in,UsrInt_2) then UsrInt_2
		else if C5DoFire(e13, e15in,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e13_C, e15in_C,e14_P, e15out_P) = (UsrIntMult(C5nbrFired, C5_e13_rate_in),UsrIntMult(C5nbrFired, C5_e15in_rate_in),UsrIntMult(C5nbrFired, C5_e14_rate_out),UsrIntMult(C5nbrFired, C5_e15out_rate_out));

tel;
------------------
node C5DoFire(e13, e15in,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e13, UsrIntMult(times, C5_e13_rate_in)) 
	and UsrIntGte(e15in, UsrIntMult(times, C5_e15in_rate_in)) 
	then true 
	else false;

tel;
------------------

--**************** Node Top Declaration ****************--

node top (in_P: UsrInt) returns (e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, in, AnbrFired, B1nbrFired, B2nbrFired, B3nbrFired, C1nbrFired, C2nbrFired, C3nbrFired, C4nbrFired, C5nbrFired:UsrInt);

-------------- Les variables -------------- 

var

e1_C, e1_P: UsrInt; 
e2_C, e2_P: UsrInt; 
e3_C, e3_P: UsrInt; 
e4_C, e4_P: UsrInt; 
e5_C, e5_P: UsrInt; 
e6_C, e6_P: UsrInt; 
e7_C, e7_P: UsrInt; 
e8_C, e8_P: UsrInt; 
e9_C, e9_P: UsrInt; 
e10_C, e10_P: UsrInt; 
e11_C, e11_P: UsrInt; 
e12_C, e12_P: UsrInt; 
e13_C, e13_P: UsrInt; 
e14_C, e14_P: UsrInt; 
e15_C, e15_P: UsrInt; 
e16_C, e16_P: UsrInt; 
e17_C, e17_P: UsrInt; 
e18_C, e18_P: UsrInt; 
in_C : UsrInt;

let

e1 = e1_I -> pre UsrIntPlus( UsrIntMinus( e1,e1_C), e1_P);
e2 = e2_I -> pre UsrIntPlus( UsrIntMinus( e2,e2_C), e2_P);
e3 = e3_I -> pre UsrIntPlus( UsrIntMinus( e3,e3_C), e3_P);
e4 = e4_I -> pre UsrIntPlus( UsrIntMinus( e4,e4_C), e4_P);
e5 = e5_I -> pre UsrIntPlus( UsrIntMinus( e5,e5_C), e5_P);
e6 = e6_I -> pre UsrIntPlus( UsrIntMinus( e6,e6_C), e6_P);
e7 = e7_I -> pre UsrIntPlus( UsrIntMinus( e7,e7_C), e7_P);
e8 = e8_I -> pre UsrIntPlus( UsrIntMinus( e8,e8_C), e8_P);
e9 = e9_I -> pre UsrIntPlus( UsrIntMinus( e9,e9_C), e9_P);
e10 = e10_I -> pre UsrIntPlus( UsrIntMinus( e10,e10_C), e10_P);
e11 = e11_I -> pre UsrIntPlus( UsrIntMinus( e11,e11_C), e11_P);
e12 = e12_I -> pre UsrIntPlus( UsrIntMinus( e12,e12_C), e12_P);
e13 = e13_I -> pre UsrIntPlus( UsrIntMinus( e13,e13_C), e13_P);
e14 = e14_I -> pre UsrIntPlus( UsrIntMinus( e14,e14_C), e14_P);
e15 = e15_I -> pre UsrIntPlus( UsrIntMinus( e15,e15_C), e15_P);
e16 = e16_I -> pre UsrIntPlus( UsrIntMinus( e16,e16_C), e16_P);
e17 = e17_I -> pre UsrIntPlus( UsrIntMinus( e17,e17_C), e17_P);
e18 = e18_I -> pre UsrIntPlus( UsrIntMinus( e18,e18_C), e18_P);

in = in_I -> pre if UsrIntLt(UsrIntPlus( UsrIntMinus( in,in_C), in_P), maxValue) 
				then UsrIntPlus( UsrIntMinus( in,in_C), in_P)
				else UsrIntMinus( in,in_C);


(in_C, e1_P, e6_P, e12_P, AnbrFired) = A(in);
(e1_C, e2_C, e3_C, e4_P, e5_P, B1nbrFired) = B1(e1, e2, e3);
(e6_C, e7_C, e8_C, e9_P, e10_P, B2nbrFired) = B2(e6, e7, e8);
(e12_C, e14_C, e13_P, B3nbrFired) = B3(e12, e14);
(e9_C, e11_C, e3_P, e16_P, C1nbrFired) = C1(e9, e11);
(e4_C, e16_C, e7_P, e17_P, C2nbrFired) = C2(e4, e16);
(e5_C, e17_C, e8_P, e18_P, C3nbrFired) = C3(e5, e17);
(e10_C, e18_C, e2_P, e11_P, C4nbrFired) = C4(e10, e18);
(e13_C, e15_C, e14_P, e15_P, C5nbrFired) = C5(e13, e15);


tel;


--**************** Node Harness Declaration ****************--

node Harness (in_P: UsrInt) returns (noError :bool)

var

e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, in, AnbrFired, B1nbrFired, B2nbrFired, B3nbrFired, C1nbrFired, C2nbrFired, C3nbrFired, C4nbrFired, C5nbrFired:UsrInt;

positiveValues: bool;

let

(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, in, AnbrFired, B1nbrFired, B2nbrFired, B3nbrFired, C1nbrFired, C2nbrFired, C3nbrFired, C4nbrFired, C5nbrFired) = top(in_P);

positiveValues = UsrIntGte( e1, UsrInt_0) 
	and UsrIntGte( e2, UsrInt_0) 
	and UsrIntGte( e3, UsrInt_0) 
	and UsrIntGte( e4, UsrInt_0) 
	and UsrIntGte( e5, UsrInt_0) 
	and UsrIntGte( e6, UsrInt_0) 
	and UsrIntGte( e7, UsrInt_0) 
	and UsrIntGte( e8, UsrInt_0) 
	and UsrIntGte( e9, UsrInt_0) 
	and UsrIntGte( e10, UsrInt_0) 
	and UsrIntGte( e11, UsrInt_0) 
	and UsrIntGte( e12, UsrInt_0) 
	and UsrIntGte( e13, UsrInt_0) 
	and UsrIntGte( e14, UsrInt_0) 
	and UsrIntGte( e15, UsrInt_0) 
	and UsrIntGte( e16, UsrInt_0) 
	and UsrIntGte( e17, UsrInt_0) 
	and UsrIntGte( e18, UsrInt_0) 
	and UsrIntGte( in, UsrInt_0) 
	and UsrIntGte( AnbrFired , UsrInt_0) 
	and UsrIntGte( B1nbrFired , UsrInt_0) 
	and UsrIntGte( B2nbrFired , UsrInt_0) 
	and UsrIntGte( B3nbrFired , UsrInt_0) 
	and UsrIntGte( C1nbrFired , UsrInt_0) 
	and UsrIntGte( C2nbrFired , UsrInt_0) 
	and UsrIntGte( C3nbrFired , UsrInt_0) 
	and UsrIntGte( C4nbrFired , UsrInt_0) 
	and UsrIntGte( C5nbrFired , UsrInt_0) ;

noError= positiveValues and true;

tel
