include "./toInclude_BitBlasting_ok.lus"
--**************** Const Rates ****************--

const a1_p1_rate_out = [1,0,0,0,0,0,0,0];
const a1_p2_rate_in =  [1,0,0,0,0,0,0,0];
const a2_p1_rate_in =  [1,0,0,0,0,0,0,0];
const a2_p2_rate_out = [1,0,0,0,0,0,0,0];

--**************** Init Channel ****************--

const e1_I = [1,0,0,0,0,0,0,0];
const e2_I = [1,0,0,0,0,0,0,0];


--**************** Nodes Declaration ****************--

------------------
node a1(p2 :UsrInt) returns (p2_C, p1_P :UsrInt; a1nbrFired: UsrInt );

var
p1_PD :UsrInt;
let
a1nbrFired= if a1DoFire(p2,UsrInt_4) then UsrInt_4
		else if a1DoFire(p2,UsrInt_3) then UsrInt_3
		else if a1DoFire(p2,UsrInt_2) then UsrInt_2
		else if a1DoFire(p2,UsrInt_1) then UsrInt_1
		else UsrInt_0;
-- si le  delai est 1 alors on eccrit ceci
--(p2_C,p1_P) = (UsrIntMult(a1nbrFired, a1_p2_rate_in),UsrIntMult(a1nbrFired, a1_p1_rate_out));

-- si le  delai est >1 alors on Ã©crit ceci
(p2_C,p1_PD) = (UsrIntMult(a1nbrFired, a1_p2_rate_in),UsrIntMult(a1nbrFired, a1_p1_rate_out));
p1_P = UsrInt_0 -> pre p1_PD;


tel;
------------------
node a1DoFire(p2,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p2, UsrIntMult(times, a1_p2_rate_in)) then true
	else false;

tel;
------------------
node a2(p1 :UsrInt) returns (p1_C, p2_P :UsrInt; a2nbrFired: UsrInt );

var
p2_PD :UsrInt;
let
a2nbrFired= if a2DoFire(p1,UsrInt_4) then UsrInt_4
		else if a2DoFire(p1,UsrInt_3) then UsrInt_3
		else if a2DoFire(p1,UsrInt_2) then UsrInt_2
		else if a2DoFire(p1,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(p1_C,p2_PD) = (UsrIntMult(a2nbrFired, a2_p1_rate_in),UsrIntMult(a2nbrFired, a2_p2_rate_out));

p2_P = UsrInt_0 -> pre UsrInt_0 -> pre p2_PD;


tel;
------------------
node a2DoFire(p1,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(p1, UsrIntMult(times, a2_p1_rate_in)) then true
	else false;

tel;

--**************** Node Top Declaration ****************--

node top (X: bool) returns (e1, e2, a1nbrFired,a2nbrFired:UsrInt);

-------------- Les variables -------------- 

var

e1_C, e1_P: UsrInt; 
e2_C, e2_P: UsrInt; 



let

e1 = e1_I -> pre UsrIntPlus( UsrIntMinus( e1,e1_C), e1_P);
e2 = e2_I -> pre UsrIntPlus( UsrIntMinus( e2,e2_C), e2_P);

(e2_C, e1_P,a1nbrFired) = a1(e2);
(e1_C, e2_P,a2nbrFired) = a2(e1);

tel;


