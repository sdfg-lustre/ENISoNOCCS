--** This lustre code is generated automatically. 
--** It corresponds to the translation of an SDFG model to Lustre. This version produce a Lustre code having a reduced number of steps.
--     24 mai 2020 01:14:43 AM




--**************** Const Rates ****************--

const maxValue = 15;
const get_MB_e1_rate_out = 768;
const get_MB_e2_rate_in = 768;
const ca_1a_e1_rate_in = 4;
const ca_1a_e4_rate_in = 4;
const ca_1a_e2_rate_out = 4;
const ca_1a_e3_rate_out = 4;
const ca_2a_e3_rate_in = 4;
const ca_2a_e6_rate_in = 4;
const ca_2a_e4_rate_out = 4;
const ca_2a_e5_rate_out = 4;
const CC_e5_rate_in = 128;
const CC_e8_rate_in = 64;
const CC_e6_rate_out = 128;
const CC_e7_rate_out = 64;
const ca_2b_e7_rate_in = 4;
const ca_2b_e10_rate_in = 4;
const ca_2b_e8_rate_out = 4;
const ca_2b_e9_rate_out = 4;
const ca_3a_e9_rate_in = 4;
const ca_3a_e12_rate_in = 4;
const ca_3a_e10_rate_out = 4;
const ca_3a_e11_rate_out = 4;
const DCT_e11_rate_in = 64;
const DCT_e14_rate_in = 64;
const DCT_e12_rate_out = 64;
const DCT_e13_rate_out = 64;
const ca_3b_e13_rate_in = 4;
const ca_3b_e16_rate_in = 4;
const ca_3b_e14_rate_out = 4;
const ca_3b_e15_rate_out = 4;
const ca_4a_e15_rate_in = 4;
const ca_4a_e18_rate_in = 4;
const ca_4a_e16_rate_out = 4;
const ca_4a_e17_rate_out = 4;
const VLC_e17_rate_in = 64;
const VLC_e18_rate_out = 64;

--****************  Actor'durations ****************--

const get_MB_maxStages  = 3;
const get_MB_duration  = 10;
const ca_1a_maxStages  = 2;
const ca_1a_duration  = 2;
const ca_2a_maxStages  = 2;
const ca_2a_duration  = 2;
const CC_maxStages  = 3;
const CC_duration  = 10;
const ca_2b_maxStages  = 3;
const ca_2b_duration  = 4;
const ca_3a_maxStages  = 3;
const ca_3a_duration  = 4;
const DCT_maxStages  = 3;
const DCT_duration  = 10;
const ca_3b_maxStages  = 3;
const ca_3b_duration  = 4;
const ca_4a_maxStages  = 2;
const ca_4a_duration  = 2;
const VLC_maxStages  = 3;
const VLC_duration  = 4;
const  maxDuration  = 10;

--**************** Init Channel ****************--

const e1_I = 0;
const e2_I = 1024;
const e3_I = 0;
const e4_I = 4;
const e5_I = 0;
const e6_I = 1024;
const e7_I = 0;
const e8_I = 64;
const e9_I = 0;
const e10_I = 4;
const e11_I = 0;
const e12_I = 64;
const e13_I = 0;
const e14_I = 64;
const e15_I = 0;
const e16_I = 4;
const e17_I = 0;
const e18_I = 64;


--************************************************--
--******* Translation of Actor: get_MB***************--
--************************************************--
node get_MB(clock, e2 :int) returns (nextClock, e1_P, e2_C :int; get_MBnbrFired: int );

var
e1_PD :int;
stage :int;
 lastStage  :int;
rTime1, e1_P1 : int; 
rTime2, e1_P2 : int; 
rTime3, e1_P3 : int; 
let
get_MBnbrFired= if get_MBDoFire(e2,3) then 3
		else if get_MBDoFire(e2,2) then 2
		else if get_MBDoFire(e2,1) then 1
		else 0;

(e2_C,e1_PD) = ((get_MBnbrFired * get_MB_e2_rate_in),(get_MBnbrFired * get_MB_e1_rate_out));

stage = (if (get_MBnbrFired = 0) then 0 
         else   1) 
 -> if (get_MBnbrFired = 0) then 0 
         else if (pre lastStage = get_MB_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (get_MBnbrFired = 0) then 0 
         else   1) 
 -> if (get_MBnbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, e1_P1)=get_MBStage(clock, stage, 1, e1_PD); 
(rTime2, e1_P2)=get_MBStage(clock, stage, 2, e1_PD); 
(rTime3, e1_P3)=get_MBStage(clock, stage, 3, e1_PD); 

 nextClock= Min(rTime1 , Min(rTime2 , rTime3));
 
e1_P = (e1_P1 + (e1_P2 + e1_P3));

tel;
------------------subnode Dofire of Actorget_MB-----------------
node get_MBDoFire(e2,times:int) returns ( yes: bool);
let

yes = if (e2>=  (times * get_MB_e2_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorget_MB-----------------
node get_MBStage(clock,  stage, numStage, e1_PD: int) returns (rTime, e1_P : int);

var 
e1_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then get_MB_duration  else maxDuration -> 
          if  selected then get_MB_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e1_PDBuffer) = if selected then (e1_PD) 
                               else (0) 
 ->if selected then (e1_PD) 
                               else if endExecution then (0)
           else pre (e1_PDBuffer); 
(e1_P) = (0) ->   if endExecution then pre (e1_PDBuffer)
                                        else (0); 
tel; 


--************************************************--
--******* Translation of Actor: ca_1a***************--
--************************************************--
node ca_1a(clock, e1, e4 :int) returns (nextClock, e1_C, e4_C, e2_P, e3_P :int; ca_1anbrFired: int );

var
e2_PD, e3_PD :int;
stage :int;
 lastStage  :int;
rTime1, e2_P1, e3_P1 : int; 
rTime2, e2_P2, e3_P2 : int; 
let
ca_1anbrFired= if ca_1aDoFire(e1, e4,3) then 3
		else if ca_1aDoFire(e1, e4,2) then 2
		else if ca_1aDoFire(e1, e4,1) then 1
		else 0;

(e1_C, e4_C,e2_PD, e3_PD) = ((ca_1anbrFired * ca_1a_e1_rate_in),(ca_1anbrFired * ca_1a_e4_rate_in),(ca_1anbrFired * ca_1a_e2_rate_out),(ca_1anbrFired * ca_1a_e3_rate_out));

stage = (if (ca_1anbrFired = 0) then 0 
         else   1) 
 -> if (ca_1anbrFired = 0) then 0 
         else if (pre lastStage = ca_1a_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (ca_1anbrFired = 0) then 0 
         else   1) 
 -> if (ca_1anbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, e2_P1, e3_P1)=ca_1aStage(clock, stage, 1, e2_PD, e3_PD); 
(rTime2, e2_P2, e3_P2)=ca_1aStage(clock, stage, 2, e2_PD, e3_PD); 

 nextClock= Min(rTime1 , rTime2);
 
e2_P = (e2_P1 + e2_P2);
e3_P = (e3_P1 + e3_P2);

tel;
------------------subnode Dofire of Actorca_1a-----------------
node ca_1aDoFire(e1, e4,times:int) returns ( yes: bool);
let

yes = if (e1>=  (times * ca_1a_e1_rate_in)) 
	and (e4>=  (times * ca_1a_e4_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_1a-----------------
node ca_1aStage(clock,  stage, numStage, e2_PD, e3_PD: int) returns (rTime, e2_P, e3_P : int);

var 
e2_PDBuffer, e3_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then ca_1a_duration  else maxDuration -> 
          if  selected then ca_1a_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e2_PDBuffer, e3_PDBuffer) = if selected then (e2_PD, e3_PD) 
                               else (0, 0) 
 ->if selected then (e2_PD, e3_PD) 
                               else if endExecution then (0, 0)
           else pre (e2_PDBuffer, e3_PDBuffer); 
(e2_P, e3_P) = (0, 0) ->   if endExecution then pre (e2_PDBuffer, e3_PDBuffer)
                                        else (0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: ca_2a***************--
--************************************************--
node ca_2a(clock, e3, e6 :int) returns (nextClock, e3_C, e6_C, e4_P, e5_P :int; ca_2anbrFired: int );

var
e4_PD, e5_PD :int;
stage :int;
 lastStage  :int;
rTime1, e4_P1, e5_P1 : int; 
rTime2, e4_P2, e5_P2 : int; 
let
ca_2anbrFired= if ca_2aDoFire(e3, e6,3) then 3
		else if ca_2aDoFire(e3, e6,2) then 2
		else if ca_2aDoFire(e3, e6,1) then 1
		else 0;

(e3_C, e6_C,e4_PD, e5_PD) = ((ca_2anbrFired * ca_2a_e3_rate_in),(ca_2anbrFired * ca_2a_e6_rate_in),(ca_2anbrFired * ca_2a_e4_rate_out),(ca_2anbrFired * ca_2a_e5_rate_out));

stage = (if (ca_2anbrFired = 0) then 0 
         else   1) 
 -> if (ca_2anbrFired = 0) then 0 
         else if (pre lastStage = ca_2a_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (ca_2anbrFired = 0) then 0 
         else   1) 
 -> if (ca_2anbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, e4_P1, e5_P1)=ca_2aStage(clock, stage, 1, e4_PD, e5_PD); 
(rTime2, e4_P2, e5_P2)=ca_2aStage(clock, stage, 2, e4_PD, e5_PD); 

 nextClock= Min(rTime1 , rTime2);
 
e4_P = (e4_P1 + e4_P2);
e5_P = (e5_P1 + e5_P2);

tel;
------------------subnode Dofire of Actorca_2a-----------------
node ca_2aDoFire(e3, e6,times:int) returns ( yes: bool);
let

yes = if (e3>=  (times * ca_2a_e3_rate_in)) 
	and (e6>=  (times * ca_2a_e6_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_2a-----------------
node ca_2aStage(clock,  stage, numStage, e4_PD, e5_PD: int) returns (rTime, e4_P, e5_P : int);

var 
e4_PDBuffer, e5_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then ca_2a_duration  else maxDuration -> 
          if  selected then ca_2a_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e4_PDBuffer, e5_PDBuffer) = if selected then (e4_PD, e5_PD) 
                               else (0, 0) 
 ->if selected then (e4_PD, e5_PD) 
                               else if endExecution then (0, 0)
           else pre (e4_PDBuffer, e5_PDBuffer); 
(e4_P, e5_P) = (0, 0) ->   if endExecution then pre (e4_PDBuffer, e5_PDBuffer)
                                        else (0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: CC***************--
--************************************************--
node CC(clock, e5, e8 :int) returns (nextClock, e5_C, e8_C, e6_P, e7_P :int; CCnbrFired: int );

var
e6_PD, e7_PD :int;
stage :int;
 lastStage  :int;
rTime1, e6_P1, e7_P1 : int; 
rTime2, e6_P2, e7_P2 : int; 
rTime3, e6_P3, e7_P3 : int; 
let
CCnbrFired= if CCDoFire(e5, e8,3) then 3
		else if CCDoFire(e5, e8,2) then 2
		else if CCDoFire(e5, e8,1) then 1
		else 0;

(e5_C, e8_C,e6_PD, e7_PD) = ((CCnbrFired * CC_e5_rate_in),(CCnbrFired * CC_e8_rate_in),(CCnbrFired * CC_e6_rate_out),(CCnbrFired * CC_e7_rate_out));

stage = (if (CCnbrFired = 0) then 0 
         else   1) 
 -> if (CCnbrFired = 0) then 0 
         else if (pre lastStage = CC_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (CCnbrFired = 0) then 0 
         else   1) 
 -> if (CCnbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, e6_P1, e7_P1)=CCStage(clock, stage, 1, e6_PD, e7_PD); 
(rTime2, e6_P2, e7_P2)=CCStage(clock, stage, 2, e6_PD, e7_PD); 
(rTime3, e6_P3, e7_P3)=CCStage(clock, stage, 3, e6_PD, e7_PD); 

 nextClock= Min(rTime1 , Min(rTime2 , rTime3));
 
e6_P = (e6_P1 + (e6_P2 + e6_P3));
e7_P = (e7_P1 + (e7_P2 + e7_P3));

tel;
------------------subnode Dofire of ActorCC-----------------
node CCDoFire(e5, e8,times:int) returns ( yes: bool);
let

yes = if (e5>=  (times * CC_e5_rate_in)) 
	and (e8>=  (times * CC_e8_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorCC-----------------
node CCStage(clock,  stage, numStage, e6_PD, e7_PD: int) returns (rTime, e6_P, e7_P : int);

var 
e6_PDBuffer, e7_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then CC_duration  else maxDuration -> 
          if  selected then CC_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e6_PDBuffer, e7_PDBuffer) = if selected then (e6_PD, e7_PD) 
                               else (0, 0) 
 ->if selected then (e6_PD, e7_PD) 
                               else if endExecution then (0, 0)
           else pre (e6_PDBuffer, e7_PDBuffer); 
(e6_P, e7_P) = (0, 0) ->   if endExecution then pre (e6_PDBuffer, e7_PDBuffer)
                                        else (0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: ca_2b***************--
--************************************************--
node ca_2b(clock, e7, e10 :int) returns (nextClock, e7_C, e10_C, e8_P, e9_P :int; ca_2bnbrFired: int );

var
e8_PD, e9_PD :int;
stage :int;
 lastStage  :int;
rTime1, e8_P1, e9_P1 : int; 
rTime2, e8_P2, e9_P2 : int; 
rTime3, e8_P3, e9_P3 : int; 
let
ca_2bnbrFired= if ca_2bDoFire(e7, e10,3) then 3
		else if ca_2bDoFire(e7, e10,2) then 2
		else if ca_2bDoFire(e7, e10,1) then 1
		else 0;

(e7_C, e10_C,e8_PD, e9_PD) = ((ca_2bnbrFired * ca_2b_e7_rate_in),(ca_2bnbrFired * ca_2b_e10_rate_in),(ca_2bnbrFired * ca_2b_e8_rate_out),(ca_2bnbrFired * ca_2b_e9_rate_out));

stage = (if (ca_2bnbrFired = 0) then 0 
         else   1) 
 -> if (ca_2bnbrFired = 0) then 0 
         else if (pre lastStage = ca_2b_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (ca_2bnbrFired = 0) then 0 
         else   1) 
 -> if (ca_2bnbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, e8_P1, e9_P1)=ca_2bStage(clock, stage, 1, e8_PD, e9_PD); 
(rTime2, e8_P2, e9_P2)=ca_2bStage(clock, stage, 2, e8_PD, e9_PD); 
(rTime3, e8_P3, e9_P3)=ca_2bStage(clock, stage, 3, e8_PD, e9_PD); 

 nextClock= Min(rTime1 , Min(rTime2 , rTime3));
 
e8_P = (e8_P1 + (e8_P2 + e8_P3));
e9_P = (e9_P1 + (e9_P2 + e9_P3));

tel;
------------------subnode Dofire of Actorca_2b-----------------
node ca_2bDoFire(e7, e10,times:int) returns ( yes: bool);
let

yes = if (e7>=  (times * ca_2b_e7_rate_in)) 
	and (e10>=  (times * ca_2b_e10_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_2b-----------------
node ca_2bStage(clock,  stage, numStage, e8_PD, e9_PD: int) returns (rTime, e8_P, e9_P : int);

var 
e8_PDBuffer, e9_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then ca_2b_duration  else maxDuration -> 
          if  selected then ca_2b_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e8_PDBuffer, e9_PDBuffer) = if selected then (e8_PD, e9_PD) 
                               else (0, 0) 
 ->if selected then (e8_PD, e9_PD) 
                               else if endExecution then (0, 0)
           else pre (e8_PDBuffer, e9_PDBuffer); 
(e8_P, e9_P) = (0, 0) ->   if endExecution then pre (e8_PDBuffer, e9_PDBuffer)
                                        else (0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: ca_3a***************--
--************************************************--
node ca_3a(clock, e9, e12 :int) returns (nextClock, e9_C, e12_C, e10_P, e11_P :int; ca_3anbrFired: int );

var
e10_PD, e11_PD :int;
stage :int;
 lastStage  :int;
rTime1, e10_P1, e11_P1 : int; 
rTime2, e10_P2, e11_P2 : int; 
rTime3, e10_P3, e11_P3 : int; 
let
ca_3anbrFired= if ca_3aDoFire(e9, e12,3) then 3
		else if ca_3aDoFire(e9, e12,2) then 2
		else if ca_3aDoFire(e9, e12,1) then 1
		else 0;

(e9_C, e12_C,e10_PD, e11_PD) = ((ca_3anbrFired * ca_3a_e9_rate_in),(ca_3anbrFired * ca_3a_e12_rate_in),(ca_3anbrFired * ca_3a_e10_rate_out),(ca_3anbrFired * ca_3a_e11_rate_out));

stage = (if (ca_3anbrFired = 0) then 0 
         else   1) 
 -> if (ca_3anbrFired = 0) then 0 
         else if (pre lastStage = ca_3a_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (ca_3anbrFired = 0) then 0 
         else   1) 
 -> if (ca_3anbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, e10_P1, e11_P1)=ca_3aStage(clock, stage, 1, e10_PD, e11_PD); 
(rTime2, e10_P2, e11_P2)=ca_3aStage(clock, stage, 2, e10_PD, e11_PD); 
(rTime3, e10_P3, e11_P3)=ca_3aStage(clock, stage, 3, e10_PD, e11_PD); 

 nextClock= Min(rTime1 , Min(rTime2 , rTime3));
 
e10_P = (e10_P1 + (e10_P2 + e10_P3));
e11_P = (e11_P1 + (e11_P2 + e11_P3));

tel;
------------------subnode Dofire of Actorca_3a-----------------
node ca_3aDoFire(e9, e12,times:int) returns ( yes: bool);
let

yes = if (e9>=  (times * ca_3a_e9_rate_in)) 
	and (e12>=  (times * ca_3a_e12_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_3a-----------------
node ca_3aStage(clock,  stage, numStage, e10_PD, e11_PD: int) returns (rTime, e10_P, e11_P : int);

var 
e10_PDBuffer, e11_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then ca_3a_duration  else maxDuration -> 
          if  selected then ca_3a_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e10_PDBuffer, e11_PDBuffer) = if selected then (e10_PD, e11_PD) 
                               else (0, 0) 
 ->if selected then (e10_PD, e11_PD) 
                               else if endExecution then (0, 0)
           else pre (e10_PDBuffer, e11_PDBuffer); 
(e10_P, e11_P) = (0, 0) ->   if endExecution then pre (e10_PDBuffer, e11_PDBuffer)
                                        else (0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: DCT***************--
--************************************************--
node DCT(clock, e11, e14 :int) returns (nextClock, e11_C, e14_C, e12_P, e13_P :int; DCTnbrFired: int );

var
e12_PD, e13_PD :int;
stage :int;
 lastStage  :int;
rTime1, e12_P1, e13_P1 : int; 
rTime2, e12_P2, e13_P2 : int; 
rTime3, e12_P3, e13_P3 : int; 
let
DCTnbrFired= if DCTDoFire(e11, e14,3) then 3
		else if DCTDoFire(e11, e14,2) then 2
		else if DCTDoFire(e11, e14,1) then 1
		else 0;

(e11_C, e14_C,e12_PD, e13_PD) = ((DCTnbrFired * DCT_e11_rate_in),(DCTnbrFired * DCT_e14_rate_in),(DCTnbrFired * DCT_e12_rate_out),(DCTnbrFired * DCT_e13_rate_out));

stage = (if (DCTnbrFired = 0) then 0 
         else   1) 
 -> if (DCTnbrFired = 0) then 0 
         else if (pre lastStage = DCT_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (DCTnbrFired = 0) then 0 
         else   1) 
 -> if (DCTnbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, e12_P1, e13_P1)=DCTStage(clock, stage, 1, e12_PD, e13_PD); 
(rTime2, e12_P2, e13_P2)=DCTStage(clock, stage, 2, e12_PD, e13_PD); 
(rTime3, e12_P3, e13_P3)=DCTStage(clock, stage, 3, e12_PD, e13_PD); 

 nextClock= Min(rTime1 , Min(rTime2 , rTime3));
 
e12_P = (e12_P1 + (e12_P2 + e12_P3));
e13_P = (e13_P1 + (e13_P2 + e13_P3));

tel;
------------------subnode Dofire of ActorDCT-----------------
node DCTDoFire(e11, e14,times:int) returns ( yes: bool);
let

yes = if (e11>=  (times * DCT_e11_rate_in)) 
	and (e14>=  (times * DCT_e14_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorDCT-----------------
node DCTStage(clock,  stage, numStage, e12_PD, e13_PD: int) returns (rTime, e12_P, e13_P : int);

var 
e12_PDBuffer, e13_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then DCT_duration  else maxDuration -> 
          if  selected then DCT_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e12_PDBuffer, e13_PDBuffer) = if selected then (e12_PD, e13_PD) 
                               else (0, 0) 
 ->if selected then (e12_PD, e13_PD) 
                               else if endExecution then (0, 0)
           else pre (e12_PDBuffer, e13_PDBuffer); 
(e12_P, e13_P) = (0, 0) ->   if endExecution then pre (e12_PDBuffer, e13_PDBuffer)
                                        else (0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: ca_3b***************--
--************************************************--
node ca_3b(clock, e13, e16 :int) returns (nextClock, e13_C, e16_C, e14_P, e15_P :int; ca_3bnbrFired: int );

var
e14_PD, e15_PD :int;
stage :int;
 lastStage  :int;
rTime1, e14_P1, e15_P1 : int; 
rTime2, e14_P2, e15_P2 : int; 
rTime3, e14_P3, e15_P3 : int; 
let
ca_3bnbrFired= if ca_3bDoFire(e13, e16,3) then 3
		else if ca_3bDoFire(e13, e16,2) then 2
		else if ca_3bDoFire(e13, e16,1) then 1
		else 0;

(e13_C, e16_C,e14_PD, e15_PD) = ((ca_3bnbrFired * ca_3b_e13_rate_in),(ca_3bnbrFired * ca_3b_e16_rate_in),(ca_3bnbrFired * ca_3b_e14_rate_out),(ca_3bnbrFired * ca_3b_e15_rate_out));

stage = (if (ca_3bnbrFired = 0) then 0 
         else   1) 
 -> if (ca_3bnbrFired = 0) then 0 
         else if (pre lastStage = ca_3b_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (ca_3bnbrFired = 0) then 0 
         else   1) 
 -> if (ca_3bnbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, e14_P1, e15_P1)=ca_3bStage(clock, stage, 1, e14_PD, e15_PD); 
(rTime2, e14_P2, e15_P2)=ca_3bStage(clock, stage, 2, e14_PD, e15_PD); 
(rTime3, e14_P3, e15_P3)=ca_3bStage(clock, stage, 3, e14_PD, e15_PD); 

 nextClock= Min(rTime1 , Min(rTime2 , rTime3));
 
e14_P = (e14_P1 + (e14_P2 + e14_P3));
e15_P = (e15_P1 + (e15_P2 + e15_P3));

tel;
------------------subnode Dofire of Actorca_3b-----------------
node ca_3bDoFire(e13, e16,times:int) returns ( yes: bool);
let

yes = if (e13>=  (times * ca_3b_e13_rate_in)) 
	and (e16>=  (times * ca_3b_e16_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_3b-----------------
node ca_3bStage(clock,  stage, numStage, e14_PD, e15_PD: int) returns (rTime, e14_P, e15_P : int);

var 
e14_PDBuffer, e15_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then ca_3b_duration  else maxDuration -> 
          if  selected then ca_3b_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e14_PDBuffer, e15_PDBuffer) = if selected then (e14_PD, e15_PD) 
                               else (0, 0) 
 ->if selected then (e14_PD, e15_PD) 
                               else if endExecution then (0, 0)
           else pre (e14_PDBuffer, e15_PDBuffer); 
(e14_P, e15_P) = (0, 0) ->   if endExecution then pre (e14_PDBuffer, e15_PDBuffer)
                                        else (0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: ca_4a***************--
--************************************************--
node ca_4a(clock, e15, e18 :int) returns (nextClock, e15_C, e18_C, e16_P, e17_P :int; ca_4anbrFired: int );

var
e16_PD, e17_PD :int;
stage :int;
 lastStage  :int;
rTime1, e16_P1, e17_P1 : int; 
rTime2, e16_P2, e17_P2 : int; 
let
ca_4anbrFired= if ca_4aDoFire(e15, e18,3) then 3
		else if ca_4aDoFire(e15, e18,2) then 2
		else if ca_4aDoFire(e15, e18,1) then 1
		else 0;

(e15_C, e18_C,e16_PD, e17_PD) = ((ca_4anbrFired * ca_4a_e15_rate_in),(ca_4anbrFired * ca_4a_e18_rate_in),(ca_4anbrFired * ca_4a_e16_rate_out),(ca_4anbrFired * ca_4a_e17_rate_out));

stage = (if (ca_4anbrFired = 0) then 0 
         else   1) 
 -> if (ca_4anbrFired = 0) then 0 
         else if (pre lastStage = ca_4a_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (ca_4anbrFired = 0) then 0 
         else   1) 
 -> if (ca_4anbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, e16_P1, e17_P1)=ca_4aStage(clock, stage, 1, e16_PD, e17_PD); 
(rTime2, e16_P2, e17_P2)=ca_4aStage(clock, stage, 2, e16_PD, e17_PD); 

 nextClock= Min(rTime1 , rTime2);
 
e16_P = (e16_P1 + e16_P2);
e17_P = (e17_P1 + e17_P2);

tel;
------------------subnode Dofire of Actorca_4a-----------------
node ca_4aDoFire(e15, e18,times:int) returns ( yes: bool);
let

yes = if (e15>=  (times * ca_4a_e15_rate_in)) 
	and (e18>=  (times * ca_4a_e18_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_4a-----------------
node ca_4aStage(clock,  stage, numStage, e16_PD, e17_PD: int) returns (rTime, e16_P, e17_P : int);

var 
e16_PDBuffer, e17_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then ca_4a_duration  else maxDuration -> 
          if  selected then ca_4a_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e16_PDBuffer, e17_PDBuffer) = if selected then (e16_PD, e17_PD) 
                               else (0, 0) 
 ->if selected then (e16_PD, e17_PD) 
                               else if endExecution then (0, 0)
           else pre (e16_PDBuffer, e17_PDBuffer); 
(e16_P, e17_P) = (0, 0) ->   if endExecution then pre (e16_PDBuffer, e17_PDBuffer)
                                        else (0, 0); 
tel; 


--************************************************--
--******* Translation of Actor: VLC***************--
--************************************************--
node VLC(clock, e17 :int) returns (nextClock, e17_C, e18_P :int; VLCnbrFired: int );

var
e18_PD :int;
stage :int;
 lastStage  :int;
rTime1, e18_P1 : int; 
rTime2, e18_P2 : int; 
rTime3, e18_P3 : int; 
let
VLCnbrFired= if VLCDoFire(e17,3) then 3
		else if VLCDoFire(e17,2) then 2
		else if VLCDoFire(e17,1) then 1
		else 0;

(e17_C,e18_PD) = ((VLCnbrFired * VLC_e17_rate_in),(VLCnbrFired * VLC_e18_rate_out));

stage = (if (VLCnbrFired = 0) then 0 
         else   1) 
 -> if (VLCnbrFired = 0) then 0 
         else if (pre lastStage = VLC_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (VLCnbrFired = 0) then 0 
         else   1) 
 -> if (VLCnbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, e18_P1)=VLCStage(clock, stage, 1, e18_PD); 
(rTime2, e18_P2)=VLCStage(clock, stage, 2, e18_PD); 
(rTime3, e18_P3)=VLCStage(clock, stage, 3, e18_PD); 

 nextClock= Min(rTime1 , Min(rTime2 , rTime3));
 
e18_P = (e18_P1 + (e18_P2 + e18_P3));

tel;
------------------subnode Dofire of ActorVLC-----------------
node VLCDoFire(e17,times:int) returns ( yes: bool);
let

yes = if (e17>=  (times * VLC_e17_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorVLC-----------------
node VLCStage(clock,  stage, numStage, e18_PD: int) returns (rTime, e18_P : int);

var 
e18_PDBuffer: int; 
selected, endExecution, active : bool; 

 let 
selected = if  (stage = numStage) then true else false ; 
 endExecution= false -> if not pre (active)  then false else pre  ((rTime - clock) = 0); 
active = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre active; 
rTime = if  selected then VLC_duration  else maxDuration -> 
          if  selected then VLC_duration 
          else if  (pre active) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 
(e18_PDBuffer) = if selected then (e18_PD) 
                               else (0) 
 ->if selected then (e18_PD) 
                               else if endExecution then (0)
           else pre (e18_PDBuffer); 
(e18_P) = (0) ->   if endExecution then pre (e18_PDBuffer)
                                        else (0); 
tel; 

--******* Node Min***************--
node Min (x, y :int) returns ( r: int);
let
r= if  (x < y) then x else y;
tel;

--************************************************--
--******* Node Top***************--
--************************************************--
node top (_: bool) returns ( clock, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, get_MBnbrFired, ca_1anbrFired, ca_2anbrFired, CCnbrFired, ca_2bnbrFired, ca_3anbrFired, DCTnbrFired, ca_3bnbrFired, ca_4anbrFired, VLCnbrFired:int);

var

e1_C, e1_P: int; 
e2_C, e2_P: int; 
e3_C, e3_P: int; 
e4_C, e4_P: int; 
e5_C, e5_P: int; 
e6_C, e6_P: int; 
e7_C, e7_P: int; 
e8_C, e8_P: int; 
e9_C, e9_P: int; 
e10_C, e10_P: int; 
e11_C, e11_P: int; 
e12_C, e12_P: int; 
e13_C, e13_P: int; 
e14_C, e14_P: int; 
e15_C, e15_P: int; 
e16_C, e16_P: int; 
e17_C, e17_P: int; 
e18_C, e18_P: int; 
get_MBnextClock : int;  
ca_1anextClock : int;  
ca_2anextClock : int;  
CCnextClock : int;  
ca_2bnextClock : int;  
ca_3anextClock : int;  
DCTnextClock : int;  
ca_3bnextClock : int;  
ca_4anextClock : int;  
VLCnextClock : int;  

let

e1 = e1_I ->  ( pre ( e1 - e1_C) + e1_P);
e2 = e2_I ->  ( pre ( e2 - e2_C) + e2_P);
e3 = e3_I ->  ( pre ( e3 - e3_C) + e3_P);
e4 = e4_I ->  ( pre ( e4 - e4_C) + e4_P);
e5 = e5_I ->  ( pre ( e5 - e5_C) + e5_P);
e6 = e6_I ->  ( pre ( e6 - e6_C) + e6_P);
e7 = e7_I ->  ( pre ( e7 - e7_C) + e7_P);
e8 = e8_I ->  ( pre ( e8 - e8_C) + e8_P);
e9 = e9_I ->  ( pre ( e9 - e9_C) + e9_P);
e10 = e10_I ->  ( pre ( e10 - e10_C) + e10_P);
e11 = e11_I ->  ( pre ( e11 - e11_C) + e11_P);
e12 = e12_I ->  ( pre ( e12 - e12_C) + e12_P);
e13 = e13_I ->  ( pre ( e13 - e13_C) + e13_P);
e14 = e14_I ->  ( pre ( e14 - e14_C) + e14_P);
e15 = e15_I ->  ( pre ( e15 - e15_C) + e15_P);
e16 = e16_I ->  ( pre ( e16 - e16_C) + e16_P);
e17 = e17_I ->  ( pre ( e17 - e17_C) + e17_P);
e18 = e18_I ->  ( pre ( e18 - e18_C) + e18_P);



(get_MBnextClock, e1_P, e2_C, get_MBnbrFired) = get_MB(clock, e2);
(ca_1anextClock, e1_C, e4_C, e2_P, e3_P, ca_1anbrFired) = ca_1a(clock, e1, e4);
(ca_2anextClock, e3_C, e6_C, e4_P, e5_P, ca_2anbrFired) = ca_2a(clock, e3, e6);
(CCnextClock, e5_C, e8_C, e6_P, e7_P, CCnbrFired) = CC(clock, e5, e8);
(ca_2bnextClock, e7_C, e10_C, e8_P, e9_P, ca_2bnbrFired) = ca_2b(clock, e7, e10);
(ca_3anextClock, e9_C, e12_C, e10_P, e11_P, ca_3anbrFired) = ca_3a(clock, e9, e12);
(DCTnextClock, e11_C, e14_C, e12_P, e13_P, DCTnbrFired) = DCT(clock, e11, e14);
(ca_3bnextClock, e13_C, e16_C, e14_P, e15_P, ca_3bnbrFired) = ca_3b(clock, e13, e16);
(ca_4anextClock, e15_C, e18_C, e16_P, e17_P, ca_4anbrFired) = ca_4a(clock, e15, e18);
(VLCnextClock, e17_C, e18_P, VLCnbrFired) = VLC(clock, e17);

clock=  Min(get_MBnextClock , Min(ca_1anextClock , Min(ca_2anextClock , Min(CCnextClock , Min(ca_2bnextClock , Min(ca_3anextClock , Min(DCTnextClock , Min(ca_3bnextClock , Min(ca_4anextClock , VLCnextClock)))))))));



tel;



--************************************************--
--******* Node Harness***************--
--************************************************--
node Harness (_: bool ) returns (noError :bool)

var
clock : int;

e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, get_MBnbrFired, ca_1anbrFired, ca_2anbrFired, CCnbrFired, ca_2bnbrFired, ca_3anbrFired, DCTnbrFired, ca_3bnbrFired, ca_4anbrFired, VLCnbrFired:int;

positiveValues: bool;

let

(clock, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, get_MBnbrFired, ca_1anbrFired, ca_2anbrFired, CCnbrFired, ca_2bnbrFired, ca_3anbrFired, DCTnbrFired, ca_3bnbrFired, ca_4anbrFired, VLCnbrFired) =top(_); 

positiveValues = ( e1 >= 0) 
	and ( e2 >= 0) 
	and ( e3 >= 0) 
	and ( e4 >= 0) 
	and ( e5 >= 0) 
	and ( e6 >= 0) 
	and ( e7 >= 0) 
	and ( e8 >= 0) 
	and ( e9 >= 0) 
	and ( e10 >= 0) 
	and ( e11 >= 0) 
	and ( e12 >= 0) 
	and ( e13 >= 0) 
	and ( e14 >= 0) 
	and ( e15 >= 0) 
	and ( e16 >= 0) 
	and ( e17 >= 0) 
	and ( e18 >= 0) 
	and ( get_MBnbrFired  >=  0) 
	and ( ca_1anbrFired  >=  0) 
	and ( ca_2anbrFired  >=  0) 
	and ( CCnbrFired  >=  0) 
	and ( ca_2bnbrFired  >=  0) 
	and ( ca_3anbrFired  >=  0) 
	and ( DCTnbrFired  >=  0) 
	and ( ca_3bnbrFired  >=  0) 
	and ( ca_4anbrFired  >=  0) 
	and ( VLCnbrFired  >=  0) ;

noError= positiveValues;

--%MAIN;

--%PROPERTY  "All variables are positive "  noError;

tel 

