 --to be included BEFORE binary . lus
--signed binary on 4 bits
-- ( range [ -7 , 7 ] + nan ( 0 0 1 )
-- ( range [ -255 , 255 ] + nan ( 0 0 1 )
const BIN_SZ =8;
const UsrInt_0 = [0 , 0 , 0 , 0, 0, 0, 0, 0];
const UsrInt_1 = [1 , 0 , 0 , 0, 0, 0, 0, 0];
const UsrInt_2=[0 , 1 , 0 , 0, 0, 0, 0, 0];
const UsrInt_3=[1 , 1 , 0 , 0, 0, 0, 0, 0];
const  UsrInt_4=[0 , 0 , 1 , 0, 0, 0, 0, 0];
const  UsrInt_5=[1 , 0 , 1 , 0, 0, 0, 0, 0];
const UsrInt_6= [0 , 1 , 1 , 0, 0, 0, 0, 0];
const UsrInt_7= [1, 1 , 1 , 0, 0, 0, 0, 0];
const UsrInt_8= [0,0, 0 , 1, 0, 0, 0, 0];
const UsrInt_9= [1,0, 0 , 1, 0, 0, 0, 0];
const UsrInt_10= [0,1, 0 , 1, 0, 0, 0, 0];
const UsrInt_11= [1,1, 0 , 1, 0, 0, 0, 0];
const UsrInt_12= [0,0, 1 , 1, 0, 0, 0, 0];
const UsrInt_13= [1,0, 1 , 1, 0, 0, 0, 0];
const UsrInt_14= [0,1, 1 , 1, 0, 0, 0, 0];

const UsrInt_m7=[1 , 0 , 0 , 1, 1, 1, 1, 1];
const UsrInt_m6=[0 , 1 , 0 , 1, 1, 1, 1, 1];
const UsrInt_m5=[1 , 1 , 0 , 1, 1, 1, 1, 1];
const UsrInt_m4=[0 , 0 , 1 , 1, 1, 1, 1, 1];
const UsrInt_m3=[1 , 0 , 1 , 1, 1, 1, 1, 1];
const UsrInt_m2=[0 , 1 , 1 , 1, 1, 1, 1, 1];
const UsrInt_m1=[1 , 1 , 1 , 1, 1, 1, 1, 1];

------------------------
 
type UsrInt = bool^BIN_SZ ;

node UsrIntIf (c : bool ; x : UsrInt ; y : UsrInt) returns (s : UsrInt);
let
s = if c^BIN_SZ then x else y ;
tel
-----

node UsrIntPlus ( x : UsrInt ; y : UsrInt ) returns ( s : UsrInt ) ;
var c : bool ^( BIN_SZ +1) ;
let
c[0] = false ;
c[1..BIN_SZ]= if c[0..(BIN_SZ -1)] then (x or y) else (x and y);
s= x[0..(BIN_SZ -1)] xor y[0..(BIN_SZ -1)] xor c[0..(BIN_SZ -1)];
tel
-----



node UsrIntChs ( x : UsrInt ) returns ( s : UsrInt ) ;
var c : bool ^( BIN_SZ +1) ;
let
c [ 0 ] = false ;
--c[1..BIN_SZ]= c[0..(BIN_SZ-1)] or x[0..(BIN_SZ-1)] ;
c[1]= c[0] or x[0] ;
c[2]= c[1] or x[1] ;
c[3]= c[2] or x[2] ;
c[4]= c[3] or x[3] ;
c[5]= c[4] or x[4] ;
c[6]= c[5] or x[5] ;
c[7]= c[6] or x[6] ;
c[8]= c[7] or x[7] ;

--s = c[0..(BIN_SZ -1)] xor x[0..(BIN_SZ -1)] ;
s[0]= c[0] xor x[0] ;
s[1]= c[1] xor x[1] ;
s[2]= c[2] xor x[2] ;
s[3]= c[3] xor x[3] ;
s[4]= c[4] xor x[4] ;
s[5]= c[5] xor x[5] ;
s[6]= c[6] xor x[6] ;
s[7]= c[7] xor x[7] ;
 tel



----

node UsrIntMinus ( x : UsrInt ; y : UsrInt ) returns ( s : UsrInt ) ;
let
s = UsrIntPlus ( x , UsrIntChs ( y ) ) ;
tel
-------

node UsrIntGt ( x : UsrInt ; y : UsrInt ) returns ( o : bool ) ;
var
z : UsrInt ;
let
-- x > y <=> y - x < 0
z = UsrIntPlus ( y , UsrIntChs ( x ) ) ;
o = z [ BIN_SZ - 1 ] ;
tel

---------
node UsrIntLt ( x : UsrInt ; y : UsrInt ) returns ( o : bool ) ;
let
-- x < y <=> y > x
o = UsrIntGt ( y , x ) ;
tel
-----------

node UsrIntGte ( x : UsrInt ; y : UsrInt ) returns ( o : bool ) ;
let
-- x >= y <=> not y > x
o = not UsrIntGt ( y , x ) ;
tel
------

node UsrIntLte ( x : UsrInt ; y : UsrInt ) returns ( o : bool ) ;
let
-- x <= y <=> not x > y
o = not UsrIntGt ( x , y ) ;
tel
-----


node UsrIntEq ( x : UsrInt ; y : UsrInt ) returns ( o : bool ) ;
var
a : bool^BIN_SZ +1;
let
a [ 0 ] = true ;
a [ 1..BIN_SZ ] = a [ 0..BIN_SZ -1] and ( x = y ) ;
o = a [ BIN_SZ - 1 ] ;
tel


--node TwoBitsMult (a, b: bool^2) returns (q: bool^4)
node TwoBitsMult (a, b: UsrInt) returns (q: UsrInt)
 var a1b0, a0b1, a1b0a0b1, a1b1: bool;
let
 
q[0]= a[0] and b[0] ;
a1b0= a[1] and b[0] ;
a0b1= a[0] and b[1] ;
a1b1= a[1] and b[1] ;
a1b0a0b1= a1b0 and a0b1;
q[1]= a1b0 xor a0b1;
q[2]= a1b0a0b1 xor a1b1;
q[3]= a1b0a0b1 and a1b1;
q[4..BIN_SZ-1]=false^(BIN_SZ-4);
tel
----

node UsrIntMult ( a, b: UsrInt) returns ( q: UsrInt)
var
 
a01, a23, b01, b23, outMult1, outMult2, outMult3, outMult4,
in1Add1, in2Add1, in1Add2, in2Add2,  outLastAdd: UsrInt;
let


a01[0..1]= a[0..1];  a01[2..BIN_SZ-1]= false^(BIN_SZ-2);
a23[0..1]= a[2..3];  a23[2..BIN_SZ-1]= false^(BIN_SZ-2);
b01[0..1]= b[0..1];  b01[2..BIN_SZ-1]= false^(BIN_SZ-2);
b23[0..1]= b[2..3];  b23[2..BIN_SZ-1]= false^(BIN_SZ-2);

outMult1 = TwoBitsMult (a01, b01);
outMult2 = TwoBitsMult (a23, b01);
outMult3 = TwoBitsMult (a01, b23);
outMult4 = TwoBitsMult (a23, b23);

in1Add1[0..1]= outMult1[2..3]; in1Add1[2..BIN_SZ-1]= false^(BIN_SZ-2);
in2Add1[0..3]=outMult2[0..3];  in2Add1[4..BIN_SZ-1]= false^(BIN_SZ-4);

in1Add2[0..3]=outMult3[0..3];  in1Add2[4..BIN_SZ-1]= false^(BIN_SZ-4);
in2Add2[2..5]=outMult4[0..3];  in2Add2[0..1]= false^2; in2Add2[6..BIN_SZ-1]= false^(BIN_SZ-6);

outLastAdd=UsrIntPlus (UsrIntPlus(in1Add1, in2Add1), UsrIntPlus(in1Add2, in2Add2));
q[0..1]=outMult1[0..1];
q[2..7]= outLastAdd[0..5];

--q[0..7]=true^(BIN_SZ);
tel
