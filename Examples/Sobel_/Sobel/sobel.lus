include "./toInclude_BitBlasting_ok.lus"

const maxValue = [1,1,1,1,0,0,0,0];

--**************** Const Rates ****************--

const get_pixels_e1_rate_out = [0,1,1,0,0,0,0,0];
const get_pixels_e2_rate_in = [0,1,1,0,0,0,0,0];
const get_pixels_e24_rate_out = [0,1,1,0,0,0,0,0];
const get_pixels_e23_rate_in = [0,1,1,0,0,0,0,0];
const ca_0a_e1_rate_in = [1,0,0,0,0,0,0,0];
const ca_0a_e4_rate_in = [1,0,0,0,0,0,0,0];
const ca_0a_e2_rate_out = [1,0,0,0,0,0,0,0];
const ca_0a_e3_rate_out = [1,0,0,0,0,0,0,0];
const ca_1a_e3_rate_in = [1,0,0,0,0,0,0,0];
const ca_1a_e6_rate_in = [1,0,0,0,0,0,0,0];
const ca_1a_e4_rate_out = [1,0,0,0,0,0,0,0];
const ca_1a_e5_rate_out = [1,0,0,0,0,0,0,0];
const GX_e5_rate_in = [0,1,1,0,0,0,0,0];
const GX_e8_rate_in = [1,0,0,0,0,0,0,0];
const GX_e6_rate_out = [0,1,1,0,0,0,0,0];
const GX_e7_rate_out = [1,0,0,0,0,0,0,0];
const ca_1b_e7_rate_in = [1,0,0,0,0,0,0,0];
const ca_1b_e10_rate_in = [1,0,0,0,0,0,0,0];
const ca_1b_e8_rate_out = [1,0,0,0,0,0,0,0];
const ca_1b_e9_rate_out = [1,0,0,0,0,0,0,0];
const ca_3a_e9_rate_in = [1,0,0,0,0,0,0,0];
const ca_3a_e12_rate_in = [1,0,0,0,0,0,0,0];
const ca_3a_e10_rate_out = [1,0,0,0,0,0,0,0];
const ca_3a_e11_rate_out = [1,0,0,0,0,0,0,0];
const ABS_e11_rate_in = [1,0,0,0,0,0,0,0];
const ABS_e14_rate_in = [1,0,0,0,0,0,0,0];
const ABS_e12_rate_out = [1,0,0,0,0,0,0,0];
const ABS_e13_rate_out = [1,0,0,0,0,0,0,0];
const ca_3b_e13_rate_in = [1,0,0,0,0,0,0,0];
const ca_3b_e16_rate_in = [1,0,0,0,0,0,0,0];
const ca_3b_e14_rate_out = [1,0,0,0,0,0,0,0];
const ca_3b_e15_rate_out = [1,0,0,0,0,0,0,0];
const ca_2b_e15_rate_in = [1,0,0,0,0,0,0,0];
const ca_2b_e18_rate_in = [1,0,0,0,0,0,0,0];
const ca_2b_e16_rate_out = [1,0,0,0,0,0,0,0];
const ca_2b_e17_rate_out = [1,0,0,0,0,0,0,0];
const GY_e17_rate_in = [1,0,0,0,0,0,0,0];
const GY_e18_rate_out = [1,0,0,0,0,0,0,0];
const GY_e20_rate_in = [0,1,1,0,0,0,0,0];
const GY_e19_rate_out = [0,1,1,0,0,0,0,0];
const ca_2a_e19_rate_in = [1,0,0,0,0,0,0,0];
const ca_2a_e22_rate_in = [1,0,0,0,0,0,0,0];
const ca_2a_e20_rate_out = [1,0,0,0,0,0,0,0];
const ca_2a_e21_rate_out = [1,0,0,0,0,0,0,0];
const ca_0b_e21_rate_in = [1,0,0,0,0,0,0,0];
const ca_0b_e24_rate_in = [1,0,0,0,0,0,0,0];
const ca_0b_e22_rate_out = [1,0,0,0,0,0,0,0];
const ca_0b_e23_rate_out = [1,0,0,0,0,0,0,0];

--**************** Init Channel ****************--

const e1_I = [0,0,0,0,0,0,0,0];
const e2_I = [0,0,0,1,0,0,0,0];
const e3_I = [0,0,0,0,0,0,0,0];
const e4_I = [1,0,0,0,0,0,0,0];
const e5_I = [0,0,0,0,0,0,0,0];
const e6_I = [0,0,0,1,0,0,0,0];
const e7_I = [0,0,0,0,0,0,0,0];
const e8_I = [1,0,0,0,0,0,0,0];
const e9_I = [0,0,0,0,0,0,0,0];
const e10_I = [1,0,0,0,0,0,0,0];
const e11_I = [0,0,0,0,0,0,0,0];
const e12_I = [1,0,0,0,0,0,0,0];
const e13_I = [1,0,0,0,0,0,0,0];
const e14_I = [0,0,0,0,0,0,0,0];
const e15_I = [1,0,0,0,0,0,0,0];
const e16_I = [0,0,0,0,0,0,0,0];
const e17_I = [1,0,0,0,0,0,0,0];
const e18_I = [0,0,0,0,0,0,0,0];
const e19_I = [0,0,0,1,0,0,0,0];
const e20_I = [0,0,0,0,0,0,0,0];
const e21_I = [1,0,0,0,0,0,0,0];
const e22_I = [0,0,0,0,0,0,0,0];
const e23_I = [0,0,0,1,0,0,0,0];
const e24_I = [0,0,0,0,0,0,0,0];


--**************** Nodes Declaration ****************--

node get_pixels(e2, e23 :UsrInt) returns (e1_P, e2_C, e24_P, e23_C :UsrInt; get_pixelsnbrFired: UsrInt );

var
e1_PD, e24_PD :UsrInt;
let
get_pixelsnbrFired= if get_pixelsDoFire(e2, e23,UsrInt_3) then UsrInt_3
		else if get_pixelsDoFire(e2, e23,UsrInt_2) then UsrInt_2
		else if get_pixelsDoFire(e2, e23,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e2_C, e23_C,e1_PD, e24_PD) = (UsrIntMult(get_pixelsnbrFired, get_pixels_e2_rate_in),UsrIntMult(get_pixelsnbrFired, get_pixels_e23_rate_in),UsrIntMult(get_pixelsnbrFired, get_pixels_e1_rate_out),UsrIntMult(get_pixelsnbrFired, get_pixels_e24_rate_out));

e1_P = UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (e1_PD))))))))))))));

e24_P = UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (e24_PD))))))))))))));


tel;
------------------
node get_pixelsDoFire(e2, e23,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e2, UsrIntMult(times, get_pixels_e2_rate_in)) 
	and UsrIntGte(e23, UsrIntMult(times, get_pixels_e23_rate_in)) 
	then true 
	else false;

tel;
------------------
node ca_0a(e1, e4 :UsrInt) returns (e1_C, e4_C, e2_P, e3_P :UsrInt; ca_0anbrFired: UsrInt );

var
e2_PD, e3_PD :UsrInt;
let
ca_0anbrFired= if ca_0aDoFire(e1, e4,UsrInt_3) then UsrInt_3
		else if ca_0aDoFire(e1, e4,UsrInt_2) then UsrInt_2
		else if ca_0aDoFire(e1, e4,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e1_C, e4_C,e2_PD, e3_PD) = (UsrIntMult(ca_0anbrFired, ca_0a_e1_rate_in),UsrIntMult(ca_0anbrFired, ca_0a_e4_rate_in),UsrIntMult(ca_0anbrFired, ca_0a_e2_rate_out),UsrIntMult(ca_0anbrFired, ca_0a_e3_rate_out));

e2_P = UsrInt_0 -> pre (e2_PD);

e3_P = UsrInt_0 -> pre (e3_PD);


tel;
------------------
node ca_0aDoFire(e1, e4,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e1, UsrIntMult(times, ca_0a_e1_rate_in)) 
	and UsrIntGte(e4, UsrIntMult(times, ca_0a_e4_rate_in)) 
	then true 
	else false;

tel;
------------------
node ca_1a(e3, e6 :UsrInt) returns (e3_C, e6_C, e4_P, e5_P :UsrInt; ca_1anbrFired: UsrInt );

var
e4_PD, e5_PD :UsrInt;
let
ca_1anbrFired= if ca_1aDoFire(e3, e6,UsrInt_3) then UsrInt_3
		else if ca_1aDoFire(e3, e6,UsrInt_2) then UsrInt_2
		else if ca_1aDoFire(e3, e6,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e3_C, e6_C,e4_PD, e5_PD) = (UsrIntMult(ca_1anbrFired, ca_1a_e3_rate_in),UsrIntMult(ca_1anbrFired, ca_1a_e6_rate_in),UsrIntMult(ca_1anbrFired, ca_1a_e4_rate_out),UsrIntMult(ca_1anbrFired, ca_1a_e5_rate_out));

e4_P = UsrInt_0 -> pre (e4_PD);

e5_P = UsrInt_0 -> pre (e5_PD);


tel;
------------------
node ca_1aDoFire(e3, e6,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e3, UsrIntMult(times, ca_1a_e3_rate_in)) 
	and UsrIntGte(e6, UsrIntMult(times, ca_1a_e6_rate_in)) 
	then true 
	else false;

tel;
------------------
node GX(e5, e8 :UsrInt) returns (e5_C, e8_C, e6_P, e7_P :UsrInt; GXnbrFired: UsrInt );

var
e6_PD, e7_PD :UsrInt;
let
GXnbrFired= if GXDoFire(e5, e8,UsrInt_3) then UsrInt_3
		else if GXDoFire(e5, e8,UsrInt_2) then UsrInt_2
		else if GXDoFire(e5, e8,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e5_C, e8_C,e6_PD, e7_PD) = (UsrIntMult(GXnbrFired, GX_e5_rate_in),UsrIntMult(GXnbrFired, GX_e8_rate_in),UsrIntMult(GXnbrFired, GX_e6_rate_out),UsrIntMult(GXnbrFired, GX_e7_rate_out));

e6_P = UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (e6_PD))))))));

e7_P = UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (e7_PD))))))));


tel;
------------------
node GXDoFire(e5, e8,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e5, UsrIntMult(times, GX_e5_rate_in)) 
	and UsrIntGte(e8, UsrIntMult(times, GX_e8_rate_in)) 
	then true 
	else false;

tel;
------------------
node ca_1b(e7, e10 :UsrInt) returns (e7_C, e10_C, e8_P, e9_P :UsrInt; ca_1bnbrFired: UsrInt );

var
e8_PD, e9_PD :UsrInt;
let
ca_1bnbrFired= if ca_1bDoFire(e7, e10,UsrInt_3) then UsrInt_3
		else if ca_1bDoFire(e7, e10,UsrInt_2) then UsrInt_2
		else if ca_1bDoFire(e7, e10,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e7_C, e10_C,e8_PD, e9_PD) = (UsrIntMult(ca_1bnbrFired, ca_1b_e7_rate_in),UsrIntMult(ca_1bnbrFired, ca_1b_e10_rate_in),UsrIntMult(ca_1bnbrFired, ca_1b_e8_rate_out),UsrIntMult(ca_1bnbrFired, ca_1b_e9_rate_out));

e8_P = UsrInt_0 -> pre (e8_PD);

e9_P = UsrInt_0 -> pre (e9_PD);


tel;
------------------
node ca_1bDoFire(e7, e10,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e7, UsrIntMult(times, ca_1b_e7_rate_in)) 
	and UsrIntGte(e10, UsrIntMult(times, ca_1b_e10_rate_in)) 
	then true 
	else false;

tel;
------------------
node ca_3a(e9, e12 :UsrInt) returns (e9_C, e12_C, e10_P, e11_P :UsrInt; ca_3anbrFired: UsrInt );

var
e10_PD, e11_PD :UsrInt;
let
ca_3anbrFired= if ca_3aDoFire(e9, e12,UsrInt_3) then UsrInt_3
		else if ca_3aDoFire(e9, e12,UsrInt_2) then UsrInt_2
		else if ca_3aDoFire(e9, e12,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e9_C, e12_C,e10_PD, e11_PD) = (UsrIntMult(ca_3anbrFired, ca_3a_e9_rate_in),UsrIntMult(ca_3anbrFired, ca_3a_e12_rate_in),UsrIntMult(ca_3anbrFired, ca_3a_e10_rate_out),UsrIntMult(ca_3anbrFired, ca_3a_e11_rate_out));

e10_P = UsrInt_0 -> pre (e10_PD);

e11_P = UsrInt_0 -> pre (e11_PD);


tel;
------------------
node ca_3aDoFire(e9, e12,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e9, UsrIntMult(times, ca_3a_e9_rate_in)) 
	and UsrIntGte(e12, UsrIntMult(times, ca_3a_e12_rate_in)) 
	then true 
	else false;

tel;
------------------
node ABS(e11, e14 :UsrInt) returns (e11_C, e14_C, e12_P, e13_P :UsrInt; ABSnbrFired: UsrInt );

var
e12_PD, e13_PD :UsrInt;
let
ABSnbrFired= if ABSDoFire(e11, e14,UsrInt_3) then UsrInt_3
		else if ABSDoFire(e11, e14,UsrInt_2) then UsrInt_2
		else if ABSDoFire(e11, e14,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e11_C, e14_C,e12_PD, e13_PD) = (UsrIntMult(ABSnbrFired, ABS_e11_rate_in),UsrIntMult(ABSnbrFired, ABS_e14_rate_in),UsrIntMult(ABSnbrFired, ABS_e12_rate_out),UsrIntMult(ABSnbrFired, ABS_e13_rate_out));

e12_P = UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (e12_PD)))))))))));

e13_P = UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (e13_PD)))))))))));


tel;
------------------
node ABSDoFire(e11, e14,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e11, UsrIntMult(times, ABS_e11_rate_in)) 
	and UsrIntGte(e14, UsrIntMult(times, ABS_e14_rate_in)) 
	then true 
	else false;

tel;
------------------
node ca_3b(e13, e16 :UsrInt) returns (e13_C, e16_C, e14_P, e15_P :UsrInt; ca_3bnbrFired: UsrInt );

var
e14_PD, e15_PD :UsrInt;
let
ca_3bnbrFired= if ca_3bDoFire(e13, e16,UsrInt_3) then UsrInt_3
		else if ca_3bDoFire(e13, e16,UsrInt_2) then UsrInt_2
		else if ca_3bDoFire(e13, e16,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e13_C, e16_C,e14_PD, e15_PD) = (UsrIntMult(ca_3bnbrFired, ca_3b_e13_rate_in),UsrIntMult(ca_3bnbrFired, ca_3b_e16_rate_in),UsrIntMult(ca_3bnbrFired, ca_3b_e14_rate_out),UsrIntMult(ca_3bnbrFired, ca_3b_e15_rate_out));

e14_P = UsrInt_0 -> pre (e14_PD);

e15_P = UsrInt_0 -> pre (e15_PD);


tel;
------------------
node ca_3bDoFire(e13, e16,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e13, UsrIntMult(times, ca_3b_e13_rate_in)) 
	and UsrIntGte(e16, UsrIntMult(times, ca_3b_e16_rate_in)) 
	then true 
	else false;

tel;
------------------
node ca_2b(e15, e18 :UsrInt) returns (e15_C, e18_C, e16_P, e17_P :UsrInt; ca_2bnbrFired: UsrInt );

var
e16_PD, e17_PD :UsrInt;
let
ca_2bnbrFired= if ca_2bDoFire(e15, e18,UsrInt_3) then UsrInt_3
		else if ca_2bDoFire(e15, e18,UsrInt_2) then UsrInt_2
		else if ca_2bDoFire(e15, e18,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e15_C, e18_C,e16_PD, e17_PD) = (UsrIntMult(ca_2bnbrFired, ca_2b_e15_rate_in),UsrIntMult(ca_2bnbrFired, ca_2b_e18_rate_in),UsrIntMult(ca_2bnbrFired, ca_2b_e16_rate_out),UsrIntMult(ca_2bnbrFired, ca_2b_e17_rate_out));

e16_P = UsrInt_0 -> pre (e16_PD);

e17_P = UsrInt_0 -> pre (e17_PD);


tel;
------------------
node ca_2bDoFire(e15, e18,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e15, UsrIntMult(times, ca_2b_e15_rate_in)) 
	and UsrIntGte(e18, UsrIntMult(times, ca_2b_e18_rate_in)) 
	then true 
	else false;

tel;
------------------
node GY(e17, e20 :UsrInt) returns (e17_C, e18_P, e20_C, e19_P :UsrInt; GYnbrFired: UsrInt );

var
e18_PD, e19_PD :UsrInt;
let
GYnbrFired= if GYDoFire(e17, e20,UsrInt_3) then UsrInt_3
		else if GYDoFire(e17, e20,UsrInt_2) then UsrInt_2
		else if GYDoFire(e17, e20,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e17_C, e20_C,e18_PD, e19_PD) = (UsrIntMult(GYnbrFired, GY_e17_rate_in),UsrIntMult(GYnbrFired, GY_e20_rate_in),UsrIntMult(GYnbrFired, GY_e18_rate_out),UsrIntMult(GYnbrFired, GY_e19_rate_out));

e18_P = UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (e18_PD))))))));

e19_P = UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (UsrInt_0 -> pre (e19_PD))))))));


tel;
------------------
node GYDoFire(e17, e20,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e17, UsrIntMult(times, GY_e17_rate_in)) 
	and UsrIntGte(e20, UsrIntMult(times, GY_e20_rate_in)) 
	then true 
	else false;

tel;
------------------
node ca_2a(e19, e22 :UsrInt) returns (e19_C, e22_C, e20_P, e21_P :UsrInt; ca_2anbrFired: UsrInt );

var
e20_PD, e21_PD :UsrInt;
let
ca_2anbrFired= if ca_2aDoFire(e19, e22,UsrInt_3) then UsrInt_3
		else if ca_2aDoFire(e19, e22,UsrInt_2) then UsrInt_2
		else if ca_2aDoFire(e19, e22,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e19_C, e22_C,e20_PD, e21_PD) = (UsrIntMult(ca_2anbrFired, ca_2a_e19_rate_in),UsrIntMult(ca_2anbrFired, ca_2a_e22_rate_in),UsrIntMult(ca_2anbrFired, ca_2a_e20_rate_out),UsrIntMult(ca_2anbrFired, ca_2a_e21_rate_out));

e20_P = UsrInt_0 -> pre (e20_PD);

e21_P = UsrInt_0 -> pre (e21_PD);


tel;
------------------
node ca_2aDoFire(e19, e22,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e19, UsrIntMult(times, ca_2a_e19_rate_in)) 
	and UsrIntGte(e22, UsrIntMult(times, ca_2a_e22_rate_in)) 
	then true 
	else false;

tel;
------------------
node ca_0b(e21, e24 :UsrInt) returns (e21_C, e24_C, e22_P, e23_P :UsrInt; ca_0bnbrFired: UsrInt );

var
e22_PD, e23_PD :UsrInt;
let
ca_0bnbrFired= if ca_0bDoFire(e21, e24,UsrInt_3) then UsrInt_3
		else if ca_0bDoFire(e21, e24,UsrInt_2) then UsrInt_2
		else if ca_0bDoFire(e21, e24,UsrInt_1) then UsrInt_1
		else UsrInt_0;

(e21_C, e24_C,e22_PD, e23_PD) = (UsrIntMult(ca_0bnbrFired, ca_0b_e21_rate_in),UsrIntMult(ca_0bnbrFired, ca_0b_e24_rate_in),UsrIntMult(ca_0bnbrFired, ca_0b_e22_rate_out),UsrIntMult(ca_0bnbrFired, ca_0b_e23_rate_out));

e22_P = UsrInt_0 -> pre (e22_PD);

e23_P = UsrInt_0 -> pre (e23_PD);


tel;
------------------
node ca_0bDoFire(e21, e24,times:UsrInt) returns ( yes: bool);
let

yes = if UsrIntGte(e21, UsrIntMult(times, ca_0b_e21_rate_in)) 
	and UsrIntGte(e24, UsrIntMult(times, ca_0b_e24_rate_in)) 
	then true 
	else false;

tel;
------------------

--**************** Node Top Declaration ****************--

node top (: UsrInt) returns (e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, get_pixelsnbrFired, ca_0anbrFired, ca_1anbrFired, GXnbrFired, ca_1bnbrFired, ca_3anbrFired, ABSnbrFired, ca_3bnbrFired, ca_2bnbrFired, GYnbrFired, ca_2anbrFired, ca_0bnbrFired:UsrInt);

-------------- Les variables -------------- 

var

e1_C, e1_P: UsrInt; 
e2_C, e2_P: UsrInt; 
e3_C, e3_P: UsrInt; 
e4_C, e4_P: UsrInt; 
e5_C, e5_P: UsrInt; 
e6_C, e6_P: UsrInt; 
e7_C, e7_P: UsrInt; 
e8_C, e8_P: UsrInt; 
e9_C, e9_P: UsrInt; 
e10_C, e10_P: UsrInt; 
e11_C, e11_P: UsrInt; 
e12_C, e12_P: UsrInt; 
e13_C, e13_P: UsrInt; 
e14_C, e14_P: UsrInt; 
e15_C, e15_P: UsrInt; 
e16_C, e16_P: UsrInt; 
e17_C, e17_P: UsrInt; 
e18_C, e18_P: UsrInt; 
e19_C, e19_P: UsrInt; 
e20_C, e20_P: UsrInt; 
e21_C, e21_P: UsrInt; 
e22_C, e22_P: UsrInt; 
e23_C, e23_P: UsrInt; 
e24_C, e24_P: UsrInt; 

let

e1 = e1_I -> pre UsrIntPlus( UsrIntMinus( e1,e1_C), e1_P);
e2 = e2_I -> pre UsrIntPlus( UsrIntMinus( e2,e2_C), e2_P);
e3 = e3_I -> pre UsrIntPlus( UsrIntMinus( e3,e3_C), e3_P);
e4 = e4_I -> pre UsrIntPlus( UsrIntMinus( e4,e4_C), e4_P);
e5 = e5_I -> pre UsrIntPlus( UsrIntMinus( e5,e5_C), e5_P);
e6 = e6_I -> pre UsrIntPlus( UsrIntMinus( e6,e6_C), e6_P);
e7 = e7_I -> pre UsrIntPlus( UsrIntMinus( e7,e7_C), e7_P);
e8 = e8_I -> pre UsrIntPlus( UsrIntMinus( e8,e8_C), e8_P);
e9 = e9_I -> pre UsrIntPlus( UsrIntMinus( e9,e9_C), e9_P);
e10 = e10_I -> pre UsrIntPlus( UsrIntMinus( e10,e10_C), e10_P);
e11 = e11_I -> pre UsrIntPlus( UsrIntMinus( e11,e11_C), e11_P);
e12 = e12_I -> pre UsrIntPlus( UsrIntMinus( e12,e12_C), e12_P);
e13 = e13_I -> pre UsrIntPlus( UsrIntMinus( e13,e13_C), e13_P);
e14 = e14_I -> pre UsrIntPlus( UsrIntMinus( e14,e14_C), e14_P);
e15 = e15_I -> pre UsrIntPlus( UsrIntMinus( e15,e15_C), e15_P);
e16 = e16_I -> pre UsrIntPlus( UsrIntMinus( e16,e16_C), e16_P);
e17 = e17_I -> pre UsrIntPlus( UsrIntMinus( e17,e17_C), e17_P);
e18 = e18_I -> pre UsrIntPlus( UsrIntMinus( e18,e18_C), e18_P);
e19 = e19_I -> pre UsrIntPlus( UsrIntMinus( e19,e19_C), e19_P);
e20 = e20_I -> pre UsrIntPlus( UsrIntMinus( e20,e20_C), e20_P);
e21 = e21_I -> pre UsrIntPlus( UsrIntMinus( e21,e21_C), e21_P);
e22 = e22_I -> pre UsrIntPlus( UsrIntMinus( e22,e22_C), e22_P);
e23 = e23_I -> pre UsrIntPlus( UsrIntMinus( e23,e23_C), e23_P);
e24 = e24_I -> pre UsrIntPlus( UsrIntMinus( e24,e24_C), e24_P);



(e1_P, e2_C, e24_P, e23_C, get_pixelsnbrFired) = get_pixels(e2, e23);
(e1_C, e4_C, e2_P, e3_P, ca_0anbrFired) = ca_0a(e1, e4);
(e3_C, e6_C, e4_P, e5_P, ca_1anbrFired) = ca_1a(e3, e6);
(e5_C, e8_C, e6_P, e7_P, GXnbrFired) = GX(e5, e8);
(e7_C, e10_C, e8_P, e9_P, ca_1bnbrFired) = ca_1b(e7, e10);
(e9_C, e12_C, e10_P, e11_P, ca_3anbrFired) = ca_3a(e9, e12);
(e11_C, e14_C, e12_P, e13_P, ABSnbrFired) = ABS(e11, e14);
(e13_C, e16_C, e14_P, e15_P, ca_3bnbrFired) = ca_3b(e13, e16);
(e15_C, e18_C, e16_P, e17_P, ca_2bnbrFired) = ca_2b(e15, e18);
(e17_C, e18_P, e20_C, e19_P, GYnbrFired) = GY(e17, e20);
(e19_C, e22_C, e20_P, e21_P, ca_2anbrFired) = ca_2a(e19, e22);
(e21_C, e24_C, e22_P, e23_P, ca_0bnbrFired) = ca_0b(e21, e24);


tel;


--**************** Node Harness Declaration ****************--

node Harness (: UsrInt) returns (noError :bool)

var

e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, get_pixelsnbrFired, ca_0anbrFired, ca_1anbrFired, GXnbrFired, ca_1bnbrFired, ca_3anbrFired, ABSnbrFired, ca_3bnbrFired, ca_2bnbrFired, GYnbrFired, ca_2anbrFired, ca_0bnbrFired:UsrInt;

positiveValues: bool;

let

(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, get_pixelsnbrFired, ca_0anbrFired, ca_1anbrFired, GXnbrFired, ca_1bnbrFired, ca_3anbrFired, ABSnbrFired, ca_3bnbrFired, ca_2bnbrFired, GYnbrFired, ca_2anbrFired, ca_0bnbrFired) = top();

positiveValues = UsrIntGte( e1, UsrInt_0) 
	and UsrIntGte( e2, UsrInt_0) 
	and UsrIntGte( e3, UsrInt_0) 
	and UsrIntGte( e4, UsrInt_0) 
	and UsrIntGte( e5, UsrInt_0) 
	and UsrIntGte( e6, UsrInt_0) 
	and UsrIntGte( e7, UsrInt_0) 
	and UsrIntGte( e8, UsrInt_0) 
	and UsrIntGte( e9, UsrInt_0) 
	and UsrIntGte( e10, UsrInt_0) 
	and UsrIntGte( e11, UsrInt_0) 
	and UsrIntGte( e12, UsrInt_0) 
	and UsrIntGte( e13, UsrInt_0) 
	and UsrIntGte( e14, UsrInt_0) 
	and UsrIntGte( e15, UsrInt_0) 
	and UsrIntGte( e16, UsrInt_0) 
	and UsrIntGte( e17, UsrInt_0) 
	and UsrIntGte( e18, UsrInt_0) 
	and UsrIntGte( e19, UsrInt_0) 
	and UsrIntGte( e20, UsrInt_0) 
	and UsrIntGte( e21, UsrInt_0) 
	and UsrIntGte( e22, UsrInt_0) 
	and UsrIntGte( e23, UsrInt_0) 
	and UsrIntGte( e24, UsrInt_0) 
	and UsrIntGte( get_pixelsnbrFired , UsrInt_0) 
	and UsrIntGte( ca_0anbrFired , UsrInt_0) 
	and UsrIntGte( ca_1anbrFired , UsrInt_0) 
	and UsrIntGte( GXnbrFired , UsrInt_0) 
	and UsrIntGte( ca_1bnbrFired , UsrInt_0) 
	and UsrIntGte( ca_3anbrFired , UsrInt_0) 
	and UsrIntGte( ABSnbrFired , UsrInt_0) 
	and UsrIntGte( ca_3bnbrFired , UsrInt_0) 
	and UsrIntGte( ca_2bnbrFired , UsrInt_0) 
	and UsrIntGte( GYnbrFired , UsrInt_0) 
	and UsrIntGte( ca_2anbrFired , UsrInt_0) 
	and UsrIntGte( ca_0bnbrFired , UsrInt_0) ;

noError= positiveValues and true;

tel
