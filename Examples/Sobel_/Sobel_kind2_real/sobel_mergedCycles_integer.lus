--** This lustre code is generated automatically on 27 aoÃ»t 2020 12:59:33 PM
--** It corresponds to the translation of an SDFG model (Sobel)  to Lustre. This version produce a Lustre code having a reduced number of steps.




--**************** Const Rates ****************--

const get_pixels_e1_rate_out = 6;
const get_pixels_e2_rate_in = 6;
const get_pixels_e24_rate_out = 6;
const get_pixels_e23_rate_in = 6;
const ca_0a_e1_rate_in = 1;
const ca_0a_e4_rate_in = 1;
const ca_0a_e2_rate_out = 1;
const ca_0a_e3_rate_out = 1;
const ca_1a_e3_rate_in = 1;
const ca_1a_e6_rate_in = 1;
const ca_1a_e4_rate_out = 1;
const ca_1a_e5_rate_out = 1;
const GX_e5_rate_in = 6;
const GX_e8_rate_in = 1;
const GX_e6_rate_out = 6;
const GX_e7_rate_out = 1;
const ca_1b_e7_rate_in = 1;
const ca_1b_e10_rate_in = 1;
const ca_1b_e8_rate_out = 1;
const ca_1b_e9_rate_out = 1;
const ca_3a_e9_rate_in = 1;
const ca_3a_e12_rate_in = 1;
const ca_3a_e10_rate_out = 1;
const ca_3a_e11_rate_out = 1;
const ABS_e11_rate_in = 1;
const ABS_e14_rate_in = 1;
const ABS_e12_rate_out = 1;
const ABS_e13_rate_out = 1;
const ca_3b_e13_rate_in = 1;
const ca_3b_e16_rate_in = 1;
const ca_3b_e14_rate_out = 1;
const ca_3b_e15_rate_out = 1;
const ca_2b_e15_rate_in = 1;
const ca_2b_e18_rate_in = 1;
const ca_2b_e16_rate_out = 1;
const ca_2b_e17_rate_out = 1;
const GY_e17_rate_in = 1;
const GY_e18_rate_out = 1;
const GY_e20_rate_in = 6;
const GY_e19_rate_out = 6;
const ca_2a_e19_rate_in = 1;
const ca_2a_e22_rate_in = 1;
const ca_2a_e20_rate_out = 1;
const ca_2a_e21_rate_out = 1;
const ca_0b_e21_rate_in = 1;
const ca_0b_e24_rate_in = 1;
const ca_0b_e22_rate_out = 1;
const ca_0b_e23_rate_out = 1;

--****************  Actors' durations ****************--

const get_pixels_maxStages  = 2;
const get_pixels_duration  = 394;
const ca_0a_maxStages  = 2;
const ca_0a_duration  = 4;
const ca_1a_maxStages  = 2;
const ca_1a_duration  = 4;
const GX_maxStages  = 2;
const GX_duration  = 142;
const ca_1b_maxStages  = 2;
const ca_1b_duration  = 4;
const ca_3a_maxStages  = 2;
const ca_3a_duration  = 4;
const ABS_maxStages  = 2;
const ABS_duration  = 195;
const ca_3b_maxStages  = 2;
const ca_3b_duration  = 4;
const ca_2b_maxStages  = 2;
const ca_2b_duration  = 4;
const GY_maxStages  = 2;
const GY_duration  = 142;
const ca_2a_maxStages  = 2;
const ca_2a_duration  = 4;
const ca_0b_maxStages  = 2;
const ca_0b_duration  = 4;
const  maxDuration  = 394;

--**************** Init Channel ****************--

const e1_I = 0;
const e2_I = 8;
const e3_I = 0;
const e4_I = 1;
const e5_I = 0;
const e6_I = 8;
const e7_I = 0;
const e8_I = 1;
const e9_I = 0;
const e10_I = 1;
const e11_I = 0;
const e12_I = 1;
const e13_I = 1;
const e14_I = 0;
const e15_I = 1;
const e16_I = 0;
const e17_I = 1;
const e18_I = 0;
const e19_I = 8;
const e20_I = 0;
const e21_I = 1;
const e22_I = 0;
const e23_I = 8;
const e24_I = 0;


--************************************************--
--******* Translation of Actor: get_pixels***************--
--************************************************--
node get_pixels(clock, e2, e23 :int) returns (nextClock, e1_P, e2_C, e24_P, e23_C :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if get_pixelsDoFire(e2, e23,2) then 2
		else if get_pixelsDoFire(e2, e23,1) then 1
		else 0;

(e2_C, e23_C) = ((nbrFired * get_pixels_e2_rate_in), (nbrFired * get_pixels_e23_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = get_pixels_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =get_pixelsStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =get_pixelsStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e1_P, e24_P) = ((nbrEnd * get_pixels_e1_rate_out), (nbrEnd * get_pixels_e24_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of Actorget_pixels-----------------
node get_pixelsDoFire(e2, e23,times:int) returns ( yes: bool);
let

yes = if (e2>=  (times * get_pixels_e2_rate_in)) 
	and (e23>=  (times * get_pixels_e23_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorget_pixels-----------------
node get_pixelsStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then get_pixels_duration  else maxDuration -> 
          if  selected then get_pixels_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: ca_0a***************--
--************************************************--
node ca_0a(clock, e1, e4 :int) returns (nextClock, e1_C, e4_C, e2_P, e3_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if ca_0aDoFire(e1, e4,2) then 2
		else if ca_0aDoFire(e1, e4,1) then 1
		else 0;

(e1_C, e4_C) = ((nbrFired * ca_0a_e1_rate_in), (nbrFired * ca_0a_e4_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = ca_0a_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =ca_0aStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =ca_0aStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e2_P, e3_P) = ((nbrEnd * ca_0a_e2_rate_out), (nbrEnd * ca_0a_e3_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of Actorca_0a-----------------
node ca_0aDoFire(e1, e4,times:int) returns ( yes: bool);
let

yes = if (e1>=  (times * ca_0a_e1_rate_in)) 
	and (e4>=  (times * ca_0a_e4_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_0a-----------------
node ca_0aStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then ca_0a_duration  else maxDuration -> 
          if  selected then ca_0a_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: ca_1a***************--
--************************************************--
node ca_1a(clock, e3, e6 :int) returns (nextClock, e3_C, e6_C, e4_P, e5_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if ca_1aDoFire(e3, e6,2) then 2
		else if ca_1aDoFire(e3, e6,1) then 1
		else 0;

(e3_C, e6_C) = ((nbrFired * ca_1a_e3_rate_in), (nbrFired * ca_1a_e6_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = ca_1a_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =ca_1aStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =ca_1aStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e4_P, e5_P) = ((nbrEnd * ca_1a_e4_rate_out), (nbrEnd * ca_1a_e5_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of Actorca_1a-----------------
node ca_1aDoFire(e3, e6,times:int) returns ( yes: bool);
let

yes = if (e3>=  (times * ca_1a_e3_rate_in)) 
	and (e6>=  (times * ca_1a_e6_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_1a-----------------
node ca_1aStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then ca_1a_duration  else maxDuration -> 
          if  selected then ca_1a_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: GX***************--
--************************************************--
node GX(clock, e5, e8 :int) returns (nextClock, e5_C, e8_C, e6_P, e7_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if GXDoFire(e5, e8,2) then 2
		else if GXDoFire(e5, e8,1) then 1
		else 0;

(e5_C, e8_C) = ((nbrFired * GX_e5_rate_in), (nbrFired * GX_e8_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = GX_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =GXStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =GXStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e6_P, e7_P) = ((nbrEnd * GX_e6_rate_out), (nbrEnd * GX_e7_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of ActorGX-----------------
node GXDoFire(e5, e8,times:int) returns ( yes: bool);
let

yes = if (e5>=  (times * GX_e5_rate_in)) 
	and (e8>=  (times * GX_e8_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorGX-----------------
node GXStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then GX_duration  else maxDuration -> 
          if  selected then GX_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: ca_1b***************--
--************************************************--
node ca_1b(clock, e7, e10 :int) returns (nextClock, e7_C, e10_C, e8_P, e9_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if ca_1bDoFire(e7, e10,2) then 2
		else if ca_1bDoFire(e7, e10,1) then 1
		else 0;

(e7_C, e10_C) = ((nbrFired * ca_1b_e7_rate_in), (nbrFired * ca_1b_e10_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = ca_1b_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =ca_1bStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =ca_1bStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e8_P, e9_P) = ((nbrEnd * ca_1b_e8_rate_out), (nbrEnd * ca_1b_e9_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of Actorca_1b-----------------
node ca_1bDoFire(e7, e10,times:int) returns ( yes: bool);
let

yes = if (e7>=  (times * ca_1b_e7_rate_in)) 
	and (e10>=  (times * ca_1b_e10_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_1b-----------------
node ca_1bStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then ca_1b_duration  else maxDuration -> 
          if  selected then ca_1b_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: ca_3a***************--
--************************************************--
node ca_3a(clock, e9, e12 :int) returns (nextClock, e9_C, e12_C, e10_P, e11_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if ca_3aDoFire(e9, e12,2) then 2
		else if ca_3aDoFire(e9, e12,1) then 1
		else 0;

(e9_C, e12_C) = ((nbrFired * ca_3a_e9_rate_in), (nbrFired * ca_3a_e12_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = ca_3a_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =ca_3aStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =ca_3aStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e10_P, e11_P) = ((nbrEnd * ca_3a_e10_rate_out), (nbrEnd * ca_3a_e11_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of Actorca_3a-----------------
node ca_3aDoFire(e9, e12,times:int) returns ( yes: bool);
let

yes = if (e9>=  (times * ca_3a_e9_rate_in)) 
	and (e12>=  (times * ca_3a_e12_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_3a-----------------
node ca_3aStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then ca_3a_duration  else maxDuration -> 
          if  selected then ca_3a_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: ABS***************--
--************************************************--
node ABS(clock, e11, e14 :int) returns (nextClock, e11_C, e14_C, e12_P, e13_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if ABSDoFire(e11, e14,2) then 2
		else if ABSDoFire(e11, e14,1) then 1
		else 0;

(e11_C, e14_C) = ((nbrFired * ABS_e11_rate_in), (nbrFired * ABS_e14_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = ABS_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =ABSStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =ABSStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e12_P, e13_P) = ((nbrEnd * ABS_e12_rate_out), (nbrEnd * ABS_e13_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of ActorABS-----------------
node ABSDoFire(e11, e14,times:int) returns ( yes: bool);
let

yes = if (e11>=  (times * ABS_e11_rate_in)) 
	and (e14>=  (times * ABS_e14_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorABS-----------------
node ABSStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then ABS_duration  else maxDuration -> 
          if  selected then ABS_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: ca_3b***************--
--************************************************--
node ca_3b(clock, e13, e16 :int) returns (nextClock, e13_C, e16_C, e14_P, e15_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if ca_3bDoFire(e13, e16,2) then 2
		else if ca_3bDoFire(e13, e16,1) then 1
		else 0;

(e13_C, e16_C) = ((nbrFired * ca_3b_e13_rate_in), (nbrFired * ca_3b_e16_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = ca_3b_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =ca_3bStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =ca_3bStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e14_P, e15_P) = ((nbrEnd * ca_3b_e14_rate_out), (nbrEnd * ca_3b_e15_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of Actorca_3b-----------------
node ca_3bDoFire(e13, e16,times:int) returns ( yes: bool);
let

yes = if (e13>=  (times * ca_3b_e13_rate_in)) 
	and (e16>=  (times * ca_3b_e16_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_3b-----------------
node ca_3bStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then ca_3b_duration  else maxDuration -> 
          if  selected then ca_3b_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: ca_2b***************--
--************************************************--
node ca_2b(clock, e15, e18 :int) returns (nextClock, e15_C, e18_C, e16_P, e17_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if ca_2bDoFire(e15, e18,2) then 2
		else if ca_2bDoFire(e15, e18,1) then 1
		else 0;

(e15_C, e18_C) = ((nbrFired * ca_2b_e15_rate_in), (nbrFired * ca_2b_e18_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = ca_2b_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =ca_2bStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =ca_2bStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e16_P, e17_P) = ((nbrEnd * ca_2b_e16_rate_out), (nbrEnd * ca_2b_e17_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of Actorca_2b-----------------
node ca_2bDoFire(e15, e18,times:int) returns ( yes: bool);
let

yes = if (e15>=  (times * ca_2b_e15_rate_in)) 
	and (e18>=  (times * ca_2b_e18_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_2b-----------------
node ca_2bStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then ca_2b_duration  else maxDuration -> 
          if  selected then ca_2b_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: GY***************--
--************************************************--
node GY(clock, e17, e20 :int) returns (nextClock, e17_C, e18_P, e20_C, e19_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if GYDoFire(e17, e20,2) then 2
		else if GYDoFire(e17, e20,1) then 1
		else 0;

(e17_C, e20_C) = ((nbrFired * GY_e17_rate_in), (nbrFired * GY_e20_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = GY_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =GYStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =GYStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e18_P, e19_P) = ((nbrEnd * GY_e18_rate_out), (nbrEnd * GY_e19_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of ActorGY-----------------
node GYDoFire(e17, e20,times:int) returns ( yes: bool);
let

yes = if (e17>=  (times * GY_e17_rate_in)) 
	and (e20>=  (times * GY_e20_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of ActorGY-----------------
node GYStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then GY_duration  else maxDuration -> 
          if  selected then GY_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: ca_2a***************--
--************************************************--
node ca_2a(clock, e19, e22 :int) returns (nextClock, e19_C, e22_C, e20_P, e21_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if ca_2aDoFire(e19, e22,2) then 2
		else if ca_2aDoFire(e19, e22,1) then 1
		else 0;

(e19_C, e22_C) = ((nbrFired * ca_2a_e19_rate_in), (nbrFired * ca_2a_e22_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = ca_2a_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =ca_2aStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =ca_2aStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e20_P, e21_P) = ((nbrEnd * ca_2a_e20_rate_out), (nbrEnd * ca_2a_e21_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of Actorca_2a-----------------
node ca_2aDoFire(e19, e22,times:int) returns ( yes: bool);
let

yes = if (e19>=  (times * ca_2a_e19_rate_in)) 
	and (e22>=  (times * ca_2a_e22_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_2a-----------------
node ca_2aStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then ca_2a_duration  else maxDuration -> 
          if  selected then ca_2a_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 


--************************************************--
--******* Translation of Actor: ca_0b***************--
--************************************************--
node ca_0b(clock, e21, e24 :int) returns (nextClock, e21_C, e24_C, e22_P, e23_P :int; nbrFired, nbrEnd: int );

var
stage :int;
 lastStage  :int;
rTime1, nbrEnd1 : int; 
rTime2, nbrEnd2 : int; 
let
nbrFired= if ca_0bDoFire(e21, e24,2) then 2
		else if ca_0bDoFire(e21, e24,1) then 1
		else 0;

(e21_C, e24_C) = ((nbrFired * ca_0b_e21_rate_in), (nbrFired * ca_0b_e24_rate_in));

stage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then 0 
         else if (pre lastStage = ca_0b_maxStages) then  1 
         else  (pre lastStage + 1) ; 
 
lastStage = (if (nbrFired = 0) then 0 
         else   1) 
 -> if (nbrFired = 0) then (pre lastStage) 
         else stage; 
 

(rTime1, nbrEnd1) =ca_0bStage(clock, stage, 1, nbrFired); 
(rTime2, nbrEnd2) =ca_0bStage(clock, stage, 2, nbrFired); 
 
 nbrEnd = ( nbrEnd1 + nbrEnd2);
 
(e22_P, e23_P) = ((nbrEnd * ca_0b_e22_rate_out), (nbrEnd * ca_0b_e23_rate_out));

 nextClock= Min(rTime1 , rTime2);
 

tel;
------------------subnode Dofire of Actorca_0b-----------------
node ca_0bDoFire(e21, e24,times:int) returns ( yes: bool);
let

yes = if (e21>=  (times * ca_0b_e21_rate_in)) 
	and (e24>=  (times * ca_0b_e24_rate_in)) 
	then true 
	else false;

tel;
------------------subnode Stage of Actorca_0b-----------------
node ca_0bStage(clock,  stage, numStage, nbrFired : int) returns (rTime, nbrEnd : int);

var 
nbrFiredBuf : int; 
selected, endExecution, running : bool; 

 let
 selected = if  (stage = numStage) then true else false ; 
 
 endExecution= false -> if not pre (running)  then false else pre  ((rTime - clock) = 0); 

 running = if  selected then true else false -> 
           if  selected then true 
         else if  endExecution then false else pre running; 

 nbrFiredBuf = if selected then nbrFired  else 0 -> 
                        if selected then  nbrFired  else if endExecution then 0 else pre nbrFiredBuf ; 

 nbrEnd = 0 -> if endExecution then pre nbrFiredBuf else 0; 

 rTime = if  selected then ca_0b_duration  else maxDuration -> 
          if  selected then ca_0b_duration 
          else if  (pre running) then if  (pre (rTime > clock) )then  pre (rTime - clock) 
          else maxDuration   else maxDuration ; 

 tel; 

--******* Node Min***************--
node Min (x, y :int) returns ( r: int);
let
r= if  (x < y) then x else y;
tel;

--************************************************--
--******* Node Top***************--
--************************************************--
node top (_: bool) returns ( clock, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, get_pixelsnbrFired, ca_0anbrFired, ca_1anbrFired, GXnbrFired, ca_1bnbrFired, ca_3anbrFired, ABSnbrFired, ca_3bnbrFired, ca_2bnbrFired, GYnbrFired, ca_2anbrFired, ca_0bnbrFired:int);

var

e1_C, e1_P: int; 
e2_C, e2_P: int; 
e3_C, e3_P: int; 
e4_C, e4_P: int; 
e5_C, e5_P: int; 
e6_C, e6_P: int; 
e7_C, e7_P: int; 
e8_C, e8_P: int; 
e9_C, e9_P: int; 
e10_C, e10_P: int; 
e11_C, e11_P: int; 
e12_C, e12_P: int; 
e13_C, e13_P: int; 
e14_C, e14_P: int; 
e15_C, e15_P: int; 
e16_C, e16_P: int; 
e17_C, e17_P: int; 
e18_C, e18_P: int; 
e19_C, e19_P: int; 
e20_C, e20_P: int; 
e21_C, e21_P: int; 
e22_C, e22_P: int; 
e23_C, e23_P: int; 
e24_C, e24_P: int; 
get_pixelsnextClock : int;  
ca_0anextClock : int;  
ca_1anextClock : int;  
GXnextClock : int;  
ca_1bnextClock : int;  
ca_3anextClock : int;  
ABSnextClock : int;  
ca_3bnextClock : int;  
ca_2bnextClock : int;  
GYnextClock : int;  
ca_2anextClock : int;  
ca_0bnextClock : int;  
get_pixelsnbrEnd, ca_0anbrEnd, ca_1anbrEnd, GXnbrEnd, ca_1bnbrEnd, ca_3anbrEnd, ABSnbrEnd, ca_3bnbrEnd, ca_2bnbrEnd, GYnbrEnd, ca_2anbrEnd, ca_0bnbrEnd : int; 

get_pixelsnbrRun, ca_0anbrRun, ca_1anbrRun, GXnbrRun, ca_1bnbrRun, ca_3anbrRun, ABSnbrRun, ca_3bnbrRun, ca_2bnbrRun, GYnbrRun, ca_2anbrRun, ca_0bnbrRun : int; 

positiveValues: bool; 

let

e1 = e1_I ->  ( pre ( e1 - e1_C) + e1_P);
e2 = e2_I ->  ( pre ( e2 - e2_C) + e2_P);
e3 = e3_I ->  ( pre ( e3 - e3_C) + e3_P);
e4 = e4_I ->  ( pre ( e4 - e4_C) + e4_P);
e5 = e5_I ->  ( pre ( e5 - e5_C) + e5_P);
e6 = e6_I ->  ( pre ( e6 - e6_C) + e6_P);
e7 = e7_I ->  ( pre ( e7 - e7_C) + e7_P);
e8 = e8_I ->  ( pre ( e8 - e8_C) + e8_P);
e9 = e9_I ->  ( pre ( e9 - e9_C) + e9_P);
e10 = e10_I ->  ( pre ( e10 - e10_C) + e10_P);
e11 = e11_I ->  ( pre ( e11 - e11_C) + e11_P);
e12 = e12_I ->  ( pre ( e12 - e12_C) + e12_P);
e13 = e13_I ->  ( pre ( e13 - e13_C) + e13_P);
e14 = e14_I ->  ( pre ( e14 - e14_C) + e14_P);
e15 = e15_I ->  ( pre ( e15 - e15_C) + e15_P);
e16 = e16_I ->  ( pre ( e16 - e16_C) + e16_P);
e17 = e17_I ->  ( pre ( e17 - e17_C) + e17_P);
e18 = e18_I ->  ( pre ( e18 - e18_C) + e18_P);
e19 = e19_I ->  ( pre ( e19 - e19_C) + e19_P);
e20 = e20_I ->  ( pre ( e20 - e20_C) + e20_P);
e21 = e21_I ->  ( pre ( e21 - e21_C) + e21_P);
e22 = e22_I ->  ( pre ( e22 - e22_C) + e22_P);
e23 = e23_I ->  ( pre ( e23 - e23_C) + e23_P);
e24 = e24_I ->  ( pre ( e24 - e24_C) + e24_P);




(get_pixelsnextClock, e1_P, e2_C, e24_P, e23_C, get_pixelsnbrFired, get_pixelsnbrEnd ) = get_pixels(clock, e2, e23);
(ca_0anextClock, e1_C, e4_C, e2_P, e3_P, ca_0anbrFired, ca_0anbrEnd ) = ca_0a(clock, e1, e4);
(ca_1anextClock, e3_C, e6_C, e4_P, e5_P, ca_1anbrFired, ca_1anbrEnd ) = ca_1a(clock, e3, e6);
(GXnextClock, e5_C, e8_C, e6_P, e7_P, GXnbrFired, GXnbrEnd ) = GX(clock, e5, e8);
(ca_1bnextClock, e7_C, e10_C, e8_P, e9_P, ca_1bnbrFired, ca_1bnbrEnd ) = ca_1b(clock, e7, e10);
(ca_3anextClock, e9_C, e12_C, e10_P, e11_P, ca_3anbrFired, ca_3anbrEnd ) = ca_3a(clock, e9, e12);
(ABSnextClock, e11_C, e14_C, e12_P, e13_P, ABSnbrFired, ABSnbrEnd ) = ABS(clock, e11, e14);
(ca_3bnextClock, e13_C, e16_C, e14_P, e15_P, ca_3bnbrFired, ca_3bnbrEnd ) = ca_3b(clock, e13, e16);
(ca_2bnextClock, e15_C, e18_C, e16_P, e17_P, ca_2bnbrFired, ca_2bnbrEnd ) = ca_2b(clock, e15, e18);
(GYnextClock, e17_C, e18_P, e20_C, e19_P, GYnbrFired, GYnbrEnd ) = GY(clock, e17, e20);
(ca_2anextClock, e19_C, e22_C, e20_P, e21_P, ca_2anbrFired, ca_2anbrEnd ) = ca_2a(clock, e19, e22);
(ca_0bnextClock, e21_C, e24_C, e22_P, e23_P, ca_0bnbrFired, ca_0bnbrEnd ) = ca_0b(clock, e21, e24);

clock= Min(get_pixelsnextClock , Min(ca_0anextClock , Min(ca_1anextClock , Min(GXnextClock , Min(ca_1bnextClock , Min(ca_3anextClock , Min(ABSnextClock , Min(ca_3bnextClock , Min(ca_2bnextClock , Min(GYnextClock , Min(ca_2anextClock , ca_0bnextClock)))))))))));


get_pixelsnbrRun=  get_pixelsnbrFired  -> (pre get_pixelsnbrRun) +get_pixelsnbrFired - get_pixelsnbrEnd ;

ca_0anbrRun=  ca_0anbrFired  -> (pre ca_0anbrRun) +ca_0anbrFired - ca_0anbrEnd ;

ca_1anbrRun=  ca_1anbrFired  -> (pre ca_1anbrRun) +ca_1anbrFired - ca_1anbrEnd ;

GXnbrRun=  GXnbrFired  -> (pre GXnbrRun) +GXnbrFired - GXnbrEnd ;

ca_1bnbrRun=  ca_1bnbrFired  -> (pre ca_1bnbrRun) +ca_1bnbrFired - ca_1bnbrEnd ;

ca_3anbrRun=  ca_3anbrFired  -> (pre ca_3anbrRun) +ca_3anbrFired - ca_3anbrEnd ;

ABSnbrRun=  ABSnbrFired  -> (pre ABSnbrRun) +ABSnbrFired - ABSnbrEnd ;

ca_3bnbrRun=  ca_3bnbrFired  -> (pre ca_3bnbrRun) +ca_3bnbrFired - ca_3bnbrEnd ;

ca_2bnbrRun=  ca_2bnbrFired  -> (pre ca_2bnbrRun) +ca_2bnbrFired - ca_2bnbrEnd ;

GYnbrRun=  GYnbrFired  -> (pre GYnbrRun) +GYnbrFired - GYnbrEnd ;

ca_2anbrRun=  ca_2anbrFired  -> (pre ca_2anbrRun) +ca_2anbrFired - ca_2anbrEnd ;

ca_0bnbrRun=  ca_0bnbrFired  -> (pre ca_0bnbrRun) +ca_0bnbrFired - ca_0bnbrEnd ;


positiveValues = ( e1 >= 0) 
	and ( e2 >= 0) 
	and ( e3 >= 0) 
	and ( e4 >= 0) 
	and ( e5 >= 0) 
	and ( e6 >= 0) 
	and ( e7 >= 0) 
	and ( e8 >= 0) 
	and ( e9 >= 0) 
	and ( e10 >= 0) 
	and ( e11 >= 0) 
	and ( e12 >= 0) 
	and ( e13 >= 0) 
	and ( e14 >= 0) 
	and ( e15 >= 0) 
	and ( e16 >= 0) 
	and ( e17 >= 0) 
	and ( e18 >= 0) 
	and ( e19 >= 0) 
	and ( e20 >= 0) 
	and ( e21 >= 0) 
	and ( e22 >= 0) 
	and ( e23 >= 0) 
	and ( e24 >= 0) 
	and ( get_pixelsnbrFired  >=  0) 
	and ( ca_0anbrFired  >=  0) 
	and ( ca_1anbrFired  >=  0) 
	and ( GXnbrFired  >=  0) 
	and ( ca_1bnbrFired  >=  0) 
	and ( ca_3anbrFired  >=  0) 
	and ( ABSnbrFired  >=  0) 
	and ( ca_3bnbrFired  >=  0) 
	and ( ca_2bnbrFired  >=  0) 
	and ( GYnbrFired  >=  0) 
	and ( ca_2anbrFired  >=  0) 
	and ( ca_0bnbrFired  >=  0) ;
--%MAIN;

--%PROPERTY  "Ok, all variables are positive "  positiveValues;


tel;


